{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SimulAI # An extensible Python package with data-driven pipelines for physics-informed machine learning. The SimulAI toolkit provides easy access to state-of-the-art models and algorithms for physics-informed machine learning. Currently, it includes the following methods described in the literature: Physics-Informed Neural Networks (PINNs) Deep Operator Networks (DeepONets) Variational Encoder-Decoders (VED) Operator Inference (OpInf) Koopman Autoencoders (experimental) Echo State Networks (experimental GPU support) Transformers U-Nets In addition to the methods above, many more techniques for model reduction and regularization are included in SimulAI. See documentation . Installing # Python version requirements: 3.9 \\<= python \\<= 3.11 Using pip # For installing the most recent stable version from PyPI: pip install simulai-toolkit For installing from the latest commit sent to GitHub (just for testing and developing purposes): pip uninstall simulai_toolkit pip install -U git+https://github.com/IBM/simulai@$(git ls-remote git@github.com:IBM/simulai.git | head -1 | awk '{print $1;}')#egg=simulai_toolkit Contributing code to SimulAI # If you are interested in directly contributing to this project, please see CONTRIBUTING . Using MPI # Some methods implemented on SimulAI support multiprocessing with MPI. In order to use it, you will need a valid MPI distribution, e.g. MPICH, OpenMPI. As an example, you can use conda to install MPICH as follows: conda install -c conda-forge mpich gcc Issues with macOS # If you have problems installing gcc using the command above, we recommend you to install it using Homebrew . Using Tensorboard # Tensorboard is supported for monitoring neural network training tasks. For a tutorial about how to set it see this example . Documentation # Please, refer to the SimulAI API documentation before using the toolkit. Examples # Additionally, you can refer to examples in the respective folder . License # This software is licensed under Apache license 2.0. See LICENSE . Contributing code to SimulAI # If you are interested in directly contributing to this project, please see CONTRIBUTING . How to cite SimulAI in your publications # If you find SimulAI to be useful, please consider citing it in your published work: @misc{simulai, author = {IBM}, title = {SimulAI Toolkit}, subtitle = {A Python package with data-driven pipelines for physics-informed machine learning}, note = \"https://github.com/IBM/simulai\", doi = {10.5281/zenodo.7351516}, year = {2022}, } or, via Zenodo: @software{joao_lucas_de_sousa_almeida_2023_7566603, author = {Jo\u00e3o Lucas de Sousa Almeida and Leonardo Martins and Tar\u0131k Kaan Ko\u00e7}, title = {IBM/simulai: 0.99.13}, month = jan, year = 2023, publisher = {Zenodo}, version = {0.99.25}, doi = {10.5281/zenodo.7566603}, url = {https://doi.org/10.5281/zenodo.7566603} } Publications # Jo\u00e3o Lucas de Sousa Almeida, Pedro Roberto Barbosa Rocha, Allan Moreira de Carvalho and Alberto Costa Nogueira Jr. A coupled Variational Encoder-Decoder - DeepONet surrogate model for the Rayleigh-B\u00e9nard convection problem. In When Machine Learning meets Dynamical Systems: Theory and Applications, AAAI, 2023. Jo\u00e3o Lucas S. Almeida, Arthur C. Pires, Klaus F. V. Cid, and Alberto C. Nogueira Jr. Non-intrusive operator inference for chaotic systems. IEEE Transactions on Artificial Intelligence, pages 1--14, 2022. Pedro Roberto Barbosa Rocha, Marcos Sebasti\u00e3o de Paula Gomes, Allan Moreira de Carvalho, Jo\u00e3o Lucas de Sousa Almeida and Alberto Costa Nogueira Jr. Data-driven reduced-order model for atmospheric CO2 dispersion. In AAAI 2022 Fall Symposium: The Role of AI in Responding to Climate Challenges, 2022. Pedro Roberto Barbosa Rocha, Jo\u00e3o Lucas de Sousa Almeida, Marcos Sebasti\u00e3o de Paula Gomes, Alberto Costa Nogueira, Reduced-order modeling of the two-dimensional Rayleigh--B\u00e9nard convection flow through a non-intrusive operator inference, Engineering Applications of Artificial Intelligence, Volume 126, Part B, 2023, 106923, ISSN 0952-1976, https://doi.org/10.1016/j.engappai.2023.106923 . ( https://www.sciencedirect.com/science/article/pii/S0952197623011077 ) References # Jaeger, H., Haas, H. (2004). \\\"Harnessing Nonlinearity: Predicting Chaotic Systems and Saving Energy in Wireless Communication,\\\" Science , 304 (5667): 78--80. \\< https://doi.org/10.1126/science.1091277 >`_. Lu, L., Jin, P., Pang, G., Zhang, Z., Karniadakis, G. E. (2021). \\\"Learning nonlinear operators via DeepONet based on the universal approximation theorem of operators,\\\" Nature Machine Intelligence , 3 (1): 218--229. ISSN: 2522-5839. \\< https://doi.org/10.1038/s42256-021-00302-5 >`_. Eivazi, H., Le Clainche, S., Hoyas, S., Vinuesa, R. (2022) \\\"Towards extraction of orthogonal and parsimonious non-linear modes from turbulent flows\\\" Expert Systems with Applications , 202 . ISSN: 0957-4174. \\< https://doi.org/10.1016/j.eswa.2022.117038 >`_. Raissi, M., Perdikaris, P., Karniadakis, G. E. (2019). \\\"Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations,\\\" Journal of Computational Physics , 378 (1): 686-707. ISSN: 0021-9991. \\< https://doi.org/10.1016/j.jcp.2018.10.045 >`_. Lusch, B., Kutz, J. N., Brunton, S.L. (2018). \\\"Deep learning for universal linear embeddings of nonlinear dynamics,\\\" Nature Communications , 9 : 4950. ISSN: 2041-1723. \\< https://doi.org/10.1038/s41467-018-07210-0 >`_. McQuarrie, S., Huang, C. and Willcox, K. (2021). \\\"Data-driven reduced-order models via regularized operator inference for a single-injector combustion process,\\\" Journal of the Royal Society of New Zealand , 51 (2): 194-211. ISSN: 0303-6758. \\< https://doi.org/10.1080/03036758.2020.1863237 >`_.","title":"Welcome to SimulAI"},{"location":"#welcome-to-simulai","text":"An extensible Python package with data-driven pipelines for physics-informed machine learning. The SimulAI toolkit provides easy access to state-of-the-art models and algorithms for physics-informed machine learning. Currently, it includes the following methods described in the literature: Physics-Informed Neural Networks (PINNs) Deep Operator Networks (DeepONets) Variational Encoder-Decoders (VED) Operator Inference (OpInf) Koopman Autoencoders (experimental) Echo State Networks (experimental GPU support) Transformers U-Nets In addition to the methods above, many more techniques for model reduction and regularization are included in SimulAI. See documentation .","title":"Welcome to SimulAI"},{"location":"#installing","text":"Python version requirements: 3.9 \\<= python \\<= 3.11","title":"Installing"},{"location":"#using-pip","text":"For installing the most recent stable version from PyPI: pip install simulai-toolkit For installing from the latest commit sent to GitHub (just for testing and developing purposes): pip uninstall simulai_toolkit pip install -U git+https://github.com/IBM/simulai@$(git ls-remote git@github.com:IBM/simulai.git | head -1 | awk '{print $1;}')#egg=simulai_toolkit","title":"Using pip"},{"location":"#contributing-code-to-simulai","text":"If you are interested in directly contributing to this project, please see CONTRIBUTING .","title":"Contributing code to SimulAI"},{"location":"#using-mpi","text":"Some methods implemented on SimulAI support multiprocessing with MPI. In order to use it, you will need a valid MPI distribution, e.g. MPICH, OpenMPI. As an example, you can use conda to install MPICH as follows: conda install -c conda-forge mpich gcc","title":"Using MPI"},{"location":"#issues-with-macos","text":"If you have problems installing gcc using the command above, we recommend you to install it using Homebrew .","title":"Issues with macOS"},{"location":"#using-tensorboard","text":"Tensorboard is supported for monitoring neural network training tasks. For a tutorial about how to set it see this example .","title":"Using Tensorboard"},{"location":"#documentation","text":"Please, refer to the SimulAI API documentation before using the toolkit.","title":"Documentation"},{"location":"#examples","text":"Additionally, you can refer to examples in the respective folder .","title":"Examples"},{"location":"#license","text":"This software is licensed under Apache license 2.0. See LICENSE .","title":"License"},{"location":"#contributing-code-to-simulai_1","text":"If you are interested in directly contributing to this project, please see CONTRIBUTING .","title":"Contributing code to SimulAI"},{"location":"#how-to-cite-simulai-in-your-publications","text":"If you find SimulAI to be useful, please consider citing it in your published work: @misc{simulai, author = {IBM}, title = {SimulAI Toolkit}, subtitle = {A Python package with data-driven pipelines for physics-informed machine learning}, note = \"https://github.com/IBM/simulai\", doi = {10.5281/zenodo.7351516}, year = {2022}, } or, via Zenodo: @software{joao_lucas_de_sousa_almeida_2023_7566603, author = {Jo\u00e3o Lucas de Sousa Almeida and Leonardo Martins and Tar\u0131k Kaan Ko\u00e7}, title = {IBM/simulai: 0.99.13}, month = jan, year = 2023, publisher = {Zenodo}, version = {0.99.25}, doi = {10.5281/zenodo.7566603}, url = {https://doi.org/10.5281/zenodo.7566603} }","title":"How to cite SimulAI in your publications"},{"location":"#publications","text":"Jo\u00e3o Lucas de Sousa Almeida, Pedro Roberto Barbosa Rocha, Allan Moreira de Carvalho and Alberto Costa Nogueira Jr. A coupled Variational Encoder-Decoder - DeepONet surrogate model for the Rayleigh-B\u00e9nard convection problem. In When Machine Learning meets Dynamical Systems: Theory and Applications, AAAI, 2023. Jo\u00e3o Lucas S. Almeida, Arthur C. Pires, Klaus F. V. Cid, and Alberto C. Nogueira Jr. Non-intrusive operator inference for chaotic systems. IEEE Transactions on Artificial Intelligence, pages 1--14, 2022. Pedro Roberto Barbosa Rocha, Marcos Sebasti\u00e3o de Paula Gomes, Allan Moreira de Carvalho, Jo\u00e3o Lucas de Sousa Almeida and Alberto Costa Nogueira Jr. Data-driven reduced-order model for atmospheric CO2 dispersion. In AAAI 2022 Fall Symposium: The Role of AI in Responding to Climate Challenges, 2022. Pedro Roberto Barbosa Rocha, Jo\u00e3o Lucas de Sousa Almeida, Marcos Sebasti\u00e3o de Paula Gomes, Alberto Costa Nogueira, Reduced-order modeling of the two-dimensional Rayleigh--B\u00e9nard convection flow through a non-intrusive operator inference, Engineering Applications of Artificial Intelligence, Volume 126, Part B, 2023, 106923, ISSN 0952-1976, https://doi.org/10.1016/j.engappai.2023.106923 . ( https://www.sciencedirect.com/science/article/pii/S0952197623011077 )","title":"Publications"},{"location":"#references","text":"Jaeger, H., Haas, H. (2004). \\\"Harnessing Nonlinearity: Predicting Chaotic Systems and Saving Energy in Wireless Communication,\\\" Science , 304 (5667): 78--80. \\< https://doi.org/10.1126/science.1091277 >`_. Lu, L., Jin, P., Pang, G., Zhang, Z., Karniadakis, G. E. (2021). \\\"Learning nonlinear operators via DeepONet based on the universal approximation theorem of operators,\\\" Nature Machine Intelligence , 3 (1): 218--229. ISSN: 2522-5839. \\< https://doi.org/10.1038/s42256-021-00302-5 >`_. Eivazi, H., Le Clainche, S., Hoyas, S., Vinuesa, R. (2022) \\\"Towards extraction of orthogonal and parsimonious non-linear modes from turbulent flows\\\" Expert Systems with Applications , 202 . ISSN: 0957-4174. \\< https://doi.org/10.1016/j.eswa.2022.117038 >`_. Raissi, M., Perdikaris, P., Karniadakis, G. E. (2019). \\\"Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations,\\\" Journal of Computational Physics , 378 (1): 686-707. ISSN: 0021-9991. \\< https://doi.org/10.1016/j.jcp.2018.10.045 >`_. Lusch, B., Kutz, J. N., Brunton, S.L. (2018). \\\"Deep learning for universal linear embeddings of nonlinear dynamics,\\\" Nature Communications , 9 : 4950. ISSN: 2041-1723. \\< https://doi.org/10.1038/s41467-018-07210-0 >`_. McQuarrie, S., Huang, C. and Willcox, K. (2021). \\\"Data-driven reduced-order models via regularized operator inference for a single-injector combustion process,\\\" Journal of the Royal Society of New Zealand , 51 (2): 194-211. ISSN: 0303-6758. \\< https://doi.org/10.1080/03036758.2020.1863237 >`_.","title":"References"},{"location":"simulai_io/","text":"simulai.io # ByPassPreparer # Bases: DataPreparer ByPass class, it fills the DataPreparer blank, but does nothing. Source code in simulai/io.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 class ByPassPreparer ( DataPreparer ): \"\"\"ByPass class, it fills the DataPreparer blank, but does nothing.\"\"\" name = \"no_preparer\" def __init__ ( self , channels_last : bool = False ) -> None : super () . __init__ () self . channels_last = channels_last self . collapsible_shapes = None self . dtype = None def prepare_input_data ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Prepare input data. Args: data (np.ndarray): Returns: numpy.ndarray: Example:: >>> import numpy as np >>> data = np.random.rand(5, 3, 4, 2) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_input_data(data) >>> prepared_data.shape (5, 3, 4, 2) \"\"\" self . collapsible_shapes = data . shape [ 1 :] return data def prepare_output_data ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Prepare output data. Args: data (np.ndarray): Returns: numpy.ndarray: The output data in the original format Example:: >>> import numpy as np >>> data = np.random.rand(5, 3) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_output_data(data) >>> prepared_data.shape (5, 3) \"\"\" return data def prepare_input_structured_data ( self , data : np . recarray ) -> np . ndarray : \"\"\"Prepare structured input data by converting it to an ndarray. Args: data (np.recarray): Returns: np.ndarray: numpy ndarray version of the input data. Note: This function is used when the input data is in the form of a structured array and needs to be converted to a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('a', int), ('b', '|S1'), ('c', float)]) >>> preparer = ByPassPreparer() >>> preparer.prepare_input_structured_data(data) array([[1, 'a', 0.5], [2, 'b', 0.6]]) \"\"\" return data def prepare_output_structured_data ( self , data : np . ndarray ) -> np . recarray : \"\"\"Prepare structured output data by converting it to a recarray. Args: data (np.ndarray): Returns: np.recarray: numpy recarray version of the output data. Note: This function is used when the output data needs to be in the form of a structured array and is currently in the form of a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([[1, 'a', 0.5], [2, 'b', 0.6]]) >>> preparer = ByPassPreparer() >>> preparer.prepare_output_structured_data(data) rec.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('f0', '<i4'), ('f1', 'S1'), ('f2', '<f8')]) \"\"\" return data prepare_input_data ( data ) # Prepare input data. Parameters: Name Type Description Default data ndarray required Returns: Type Description ndarray numpy.ndarray: Example:: >>> import numpy as np >>> data = np.random.rand(5, 3, 4, 2) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_input_data(data) >>> prepared_data.shape (5, 3, 4, 2) Source code in simulai/io.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def prepare_input_data ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Prepare input data. Args: data (np.ndarray): Returns: numpy.ndarray: Example:: >>> import numpy as np >>> data = np.random.rand(5, 3, 4, 2) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_input_data(data) >>> prepared_data.shape (5, 3, 4, 2) \"\"\" self . collapsible_shapes = data . shape [ 1 :] return data prepare_input_structured_data ( data ) # Prepare structured input data by converting it to an ndarray. Parameters: Name Type Description Default data recarray required Returns: Type Description ndarray np.ndarray: numpy ndarray version of the input data. Note This function is used when the input data is in the form of a structured array and needs to be converted to a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('a', int), ('b', '|S1'), ('c', float)]) >>> preparer = ByPassPreparer() >>> preparer.prepare_input_structured_data(data) array([[1, 'a', 0.5], [2, 'b', 0.6]]) Source code in simulai/io.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def prepare_input_structured_data ( self , data : np . recarray ) -> np . ndarray : \"\"\"Prepare structured input data by converting it to an ndarray. Args: data (np.recarray): Returns: np.ndarray: numpy ndarray version of the input data. Note: This function is used when the input data is in the form of a structured array and needs to be converted to a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('a', int), ('b', '|S1'), ('c', float)]) >>> preparer = ByPassPreparer() >>> preparer.prepare_input_structured_data(data) array([[1, 'a', 0.5], [2, 'b', 0.6]]) \"\"\" return data prepare_output_data ( data ) # Prepare output data. Parameters: Name Type Description Default data ndarray required Returns: Type Description ndarray numpy.ndarray: The output data in the original format Example:: >>> import numpy as np >>> data = np.random.rand(5, 3) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_output_data(data) >>> prepared_data.shape (5, 3) Source code in simulai/io.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def prepare_output_data ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Prepare output data. Args: data (np.ndarray): Returns: numpy.ndarray: The output data in the original format Example:: >>> import numpy as np >>> data = np.random.rand(5, 3) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_output_data(data) >>> prepared_data.shape (5, 3) \"\"\" return data prepare_output_structured_data ( data ) # Prepare structured output data by converting it to a recarray. Parameters: Name Type Description Default data ndarray required Returns: Type Description recarray np.recarray: numpy recarray version of the output data. Note This function is used when the output data needs to be in the form of a structured array and is currently in the form of a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([[1, 'a', 0.5], [2, 'b', 0.6]]) >>> preparer = ByPassPreparer() >>> preparer.prepare_output_structured_data(data) rec.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('f0', '<i4'), ('f1', 'S1'), ('f2', '<f8')]) Source code in simulai/io.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def prepare_output_structured_data ( self , data : np . ndarray ) -> np . recarray : \"\"\"Prepare structured output data by converting it to a recarray. Args: data (np.ndarray): Returns: np.recarray: numpy recarray version of the output data. Note: This function is used when the output data needs to be in the form of a structured array and is currently in the form of a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([[1, 'a', 0.5], [2, 'b', 0.6]]) >>> preparer = ByPassPreparer() >>> preparer.prepare_output_structured_data(data) rec.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('f0', '<i4'), ('f1', 'S1'), ('f2', '<f8')]) \"\"\" return data Reshaper # Bases: DataPreparer Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm)) Source code in simulai/io.pyclass Reshaper ( DataPreparer ): \"\"\"Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm))\"\"\" name = \"reshaper\" def __init__ ( self , channels_last : bool = False ) -> None : super () . __init__ () self . channels_last = channels_last self . collapsible_shapes = None self . collapsed_shape = None self . dtype = None self . n_features = None def _set_shapes_from_data ( self , data : np . ndarray = None ) -> None : \"\"\" Args: data (np.ndarray, optional): The input data to reshape. (Default value = None) Example:: >>> reshaper = Reshaper() >>> reshaper._set_shapes_from_data(np.random.random((10,3,4,5))) >>> reshaper.collapsible_shapes (3, 4, 5) \"\"\" self . collapsible_shapes = data . shape [ 1 :] self . collapsed_shape = np . prod ( self . collapsible_shapes ) . astype ( int ) self . _is_recarray = data . dtype . names is not None if self . _is_recarray : self . n_features = len ( data . dtype . names ) * self . collapsed_shape else : self . n_features = self . collapsed_shape def _prepare_input_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\" Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: This function reshapes the input data to (n0, prod(n1, ..., nm)) shape. Example:: >>> reshaper = Reshaper() >>> data = np.random.random((10,3,4,5)) >>> reshaper.prepare_input_data(data) array([[0.527, 0.936, ... , 0.812], [0.947, 0.865, ... , 0.947], ..., [0.865, 0.947, ... , 0.865], [0.947, 0.865, ... , 0.947]]) \"\"\" assert len ( data . shape ) > 1 , \"Error! data must have at least two dimensions\" return data . reshape (( data . shape [ 0 ], self . n_features )) def prepare_input_data ( self , data : Union [ np . ndarray , np . recarray ]) -> np . ndarray : \"\"\"Prepare input data for reshaping. Args: data (Union[np.ndarray, np.recarray]): Returns: np.ndarray: Note: - If `data` is a structured numpy array, it will be passed to `_prepare_input_structured_data` function. - If `data` is a plain numpy array, it will be passed to `_prepare_input_data` function. Example:: >>> reshaper = Reshaper() >>> input_data = np.random.rand(2, 3, 4) >>> reshaper.prepare_input_data(input_data) array([[ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...]]) \"\"\" self . _set_shapes_from_data ( data ) if self . _is_recarray : return self . _prepare_input_structured_data ( data ) else : return self . _prepare_input_data ( data ) def _reshape_to_output ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Reshape the data to its original shape before reshaping. Args: data (np.ndarray): Returns: np.ndarray: Note: The original shape of the data is stored in `collapsible_shapes` attribute. Example:: >>> reshaper = Reshaper() >>> input_data = np.random.rand(2, 3, 4) >>> reshaper._set_shapes_from_data(input_data) >>> reshaped_data = reshaper._reshape_to_output(input_data.flatten()) >>> reshaped_data.shape (2, 3, 4) \"\"\" return data . reshape (( data . shape [ 0 ],) + self . collapsible_shapes ) def _prepare_output_data ( self , data : np . ndarray = None , single : bool = False ) -> np . ndarray : \"\"\"Prepare the input data to be in the shape and format expected by the model. Args: data (np.ndarray, optional): The input data to be prepared, by default None single (bool, optional): (Default value = False) Returns: np.ndarray: The prepared input data \"\"\" if self . _is_recarray : return self . _prepare_output_structured_data ( data ) else : return self . _reshape_to_output ( data ) def prepare_output_data ( self , data : np . ndarray , single : bool = False ) -> np . ndarray : \"\"\"Prepare the input data to be in the shape and format expected by the model. Args: data (np.ndarray): The input data to be prepared single (bool, optional): (Default value = False) Returns: np.ndarray: The prepared input data \"\"\" return self . _prepare_output_data ( data ) def _prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"Prepare the input structured data to be in the shape and format expected by the model. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: The prepared input structured data \"\"\" self . dtype = data . dtype self . _set_shapes_from_data ( data ) data_ = recfunctions . structured_to_unstructured ( data ) reshaped_data_ = self . _prepare_input_data ( data_ ) return reshaped_data_ def prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"Prepare the input structured data to be in the shape and format expected by the model. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: The prepared input structured data \"\"\" return self . _prepare_input_structured_data ( data ) def prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . recarray : \"\"\"Prepare the output data to be in the shape and format expected by the user. Args: data (np.ndarray, optional): (Default value = None) Returns: np.recarray: The prepared output structured data \"\"\" return self . _prepare_output_structured_data ( data ) def _prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . recarray : \"\"\"Prepare the output data to be in the shape and format expected by the user. Args: data (np.ndarray, optional): (Default value = None) Returns: np.recarray: The prepared output structured data \"\"\" data = data . reshape ( ( data . shape [ 0 ],) + self . collapsible_shapes + ( len ( self . dtype ),) ) output_data = recfunctions . unstructured_to_structured ( data , self . dtype ) output_data = self . _reshape_to_output ( output_data ) return output_data prepare_input_data ( data ) # Prepare input data for reshaping. Parameters: Name Type Description Default data Union [ ndarray , recarray ] required Returns: Type Description ndarray np.ndarray: Note If data is a structured numpy array, it will be passed to _prepare_input_structured_data function. If data is a plain numpy array, it will be passed to _prepare_input_data function. Example:: >>> reshaper = Reshaper() >>> input_data = np.random.rand(2, 3, 4) >>> reshaper.prepare_input_data(input_data) array([[ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...]]) Source code in simulai/io.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def prepare_input_data ( self , data : Union [ np . ndarray , np . recarray ]) -> np . ndarray : \"\"\"Prepare input data for reshaping. Args: data (Union[np.ndarray, np.recarray]): Returns: np.ndarray: Note: - If `data` is a structured numpy array, it will be passed to `_prepare_input_structured_data` function. - If `data` is a plain numpy array, it will be passed to `_prepare_input_data` function. Example:: >>> reshaper = Reshaper() >>> input_data = np.random.rand(2, 3, 4) >>> reshaper.prepare_input_data(input_data) array([[ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...]]) \"\"\" self . _set_shapes_from_data ( data ) if self . _is_recarray : return self . _prepare_input_structured_data ( data ) else : return self . _prepare_input_data ( data ) prepare_input_structured_data ( data = None ) # Prepare the input structured data to be in the shape and format expected by the model. Parameters: Name Type Description Default data recarray (Default value = None) None Returns: Type Description ndarray np.ndarray: The prepared input structured data Source code in simulai/io.py 297 298 299 300 301 302 303 304 305 306 307 def prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"Prepare the input structured data to be in the shape and format expected by the model. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: The prepared input structured data \"\"\" return self . _prepare_input_structured_data ( data ) prepare_output_data ( data , single = False ) # Prepare the input data to be in the shape and format expected by the model. Parameters: Name Type Description Default data ndarray The input data to be prepared required single bool (Default value = False) False Returns: Type Description ndarray np.ndarray: The prepared input data Source code in simulai/io.py 268 269 270 271 272 273 274 275 276 277 278 279 def prepare_output_data ( self , data : np . ndarray , single : bool = False ) -> np . ndarray : \"\"\"Prepare the input data to be in the shape and format expected by the model. Args: data (np.ndarray): The input data to be prepared single (bool, optional): (Default value = False) Returns: np.ndarray: The prepared input data \"\"\" return self . _prepare_output_data ( data ) prepare_output_structured_data ( data = None ) # Prepare the output data to be in the shape and format expected by the user. Parameters: Name Type Description Default data ndarray (Default value = None) None Returns: Type Description recarray np.recarray: The prepared output structured data Source code in simulai/io.py 309 310 311 312 313 314 315 316 317 318 319 def prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . recarray : \"\"\"Prepare the output data to be in the shape and format expected by the user. Args: data (np.ndarray, optional): (Default value = None) Returns: np.recarray: The prepared output structured data \"\"\" return self . _prepare_output_structured_data ( data ) ScalerReshaper # Bases: Reshaper ScalerReshaper is a class that inherits from the Reshaper class and performs additional scaling on the input data. Source code in simulai/io.pyclass ScalerReshaper ( Reshaper ): \"\"\"ScalerReshaper is a class that inherits from the Reshaper class and performs additional scaling on the input data.\"\"\" name = \"scalerreshaper\" def __init__ ( self , bias : float = 0.0 , scale : float = 1.0 , channels_last : bool = False ) -> None : \"\"\"Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm)) Args: bias (float, optional): (Default value = 0.0) scale (float, optional): (Default value = 1.0) channels_last (bool, optional): (Default value = False) \"\"\" super () . __init__ ( channels_last = channels_last ) self . bias = bias self . scale = scale def prepare_input_data ( self , data : Union [ np . ndarray , np . recarray ] = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Prepare the input data by subtracting the bias and scaling the data. Args: data (Union[np.ndarray, np.recarray], optional): The input data to be prepared (Default value = None) *args: **kwargs: Returns: np.ndarray: The prepared input data Note: If the input data is a structured array, the method 'prepare_input_structured_data' will be called instead. Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_input_data(np.array([1, 2, 3])) array([-4.5, -3.5, -2.5]) \"\"\" if data . dtype . names is None : return super ( ScalerReshaper , self ) . prepare_input_data ( ( data - self . bias ) / self . scale , * args , ** kwargs ) else : return self . prepare_input_structured_data ( data , * args , ** kwargs ) def prepare_output_data ( self , data : Union [ np . ndarray , np . recarray ] = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Prepare the output data by scaling it and adding the bias. Args: data (Union[np.ndarray, np.recarray], optional): The output data to be prepared (Default value = None) *args: **kwargs Returns: np.ndarray: The prepared output data Note: If the input data is a structured array, the method 'prepare_output_structured_data' will be called Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_output_data(np.array([1, 2, 3])) array([12., 14., 16.]) \"\"\" if not self . _is_recarray : return super ( ScalerReshaper , self ) . prepare_output_data ( data * self . scale + self . bias , * args , ** kwargs ) else : return self . prepare_output_structured_data ( data ) def _get_structured_bias_scale ( self , dtype : np . dtype = None ) -> Tuple [ dict , dict ]: \"\"\"Get the bias and scale values for each field of a structured array. Args: dtype (np.dtype, optional): (Default value = None) Returns: Tuple[dict, dict]: A tuple of two dictionaries, the first containing the bias values for each field and the second Note: If the bias and scale attributes are floats, they will be used for all fields. Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper._get_structured_bias_scale(np.dtype([('a', float), ('b', float)])) ({'a': 10, 'b': 10}, {'a': 2, 'b': 2}) \"\"\" bias = self . bias if isinstance ( self . bias , float ): bias = { n : self . bias for n in dtype . names } scale = self . scale if isinstance ( self . scale , float ): scale = { n : self . scale for n in dtype . names } return bias , scale def prepare_input_structured_data ( self , data : np . recarray = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Scale and reshape structured data (np.recarray) before passing it to the next layer. Args: data (np.recarray, optional): structured data to be transformed (Default value = None) *args (Additional arguments passed to the parent class): **kwargs Returns: np.ndarray: Note: The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[(\"a\", int), (\"b\", int), (\"c\", int)]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_input_structured_data(data) array([[-0.5, 0.33333333, 0.75 ], [ 1.5, 1.66666667, 2. ]]) \"\"\" bias , scale = self . _get_structured_bias_scale ( data . dtype ) data = data . copy () names = data . dtype . names for name in names : data [ name ] = ( data [ name ] - bias [ name ]) / scale [ name ] return super ( ScalerReshaper , self ) . prepare_input_structured_data ( data , * args , ** kwargs ) def prepare_output_structured_data ( self , data : np . ndarray = None , * args , ** kwargs ) -> np . recarray : \"\"\"Scale and reshape structured data (np.recarray) before passing it to the next layer. Args: data (np.ndarray, optional): structured data to be transformed (Default value = None) *args (Additional arguments passed to the parent class): **kwargs: Returns: np.recarray: Note: - The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([[-0.5, 0.33333333, 0.75 ], >>> [ 1.5, 1.66666667, 2. ]]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_output_structured_data(data) rec.array([(0., 2., 6.), (6., 8., 12.)], dtype=[('a', '<f8'), ('b', '<f8'), ('c', '<f8')]) \"\"\" bias , scale = self . _get_structured_bias_scale ( self . dtype ) data = super ( ScalerReshaper , self ) . prepare_output_structured_data ( data , * args , ** kwargs ) data = data . copy () for name in self . dtype . names : data [ name ] = data [ name ] * scale [ name ] + bias [ name ] return data __init__ ( bias = 0.0 , scale = 1.0 , channels_last = False ) # Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm)) Parameters: Name Type Description Default bias float (Default value = 0.0) 0.0 scale float (Default value = 1.0) 1.0 channels_last bool (Default value = False) False Source code in simulai/io.py 345 346 347 348 349 350 351 352 353 354 355 356 357 358 def __init__ ( self , bias : float = 0.0 , scale : float = 1.0 , channels_last : bool = False ) -> None : \"\"\"Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm)) Args: bias (float, optional): (Default value = 0.0) scale (float, optional): (Default value = 1.0) channels_last (bool, optional): (Default value = False) \"\"\" super () . __init__ ( channels_last = channels_last ) self . bias = bias self . scale = scale prepare_input_data ( data = None , * args , ** kwargs ) # Prepare the input data by subtracting the bias and scaling the data. Parameters: Name Type Description Default data Union [ ndarray , recarray ] The input data to be prepared (Default value = None) None *args () **kwargs {} Returns: Type Description ndarray np.ndarray: The prepared input data Note If the input data is a structured array, the method 'prepare_input_structured_data' will be called instead. Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_input_data(np.array([1, 2, 3])) array([-4.5, -3.5, -2.5]) Source code in simulai/io.py 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 def prepare_input_data ( self , data : Union [ np . ndarray , np . recarray ] = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Prepare the input data by subtracting the bias and scaling the data. Args: data (Union[np.ndarray, np.recarray], optional): The input data to be prepared (Default value = None) *args: **kwargs: Returns: np.ndarray: The prepared input data Note: If the input data is a structured array, the method 'prepare_input_structured_data' will be called instead. Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_input_data(np.array([1, 2, 3])) array([-4.5, -3.5, -2.5]) \"\"\" if data . dtype . names is None : return super ( ScalerReshaper , self ) . prepare_input_data ( ( data - self . bias ) / self . scale , * args , ** kwargs ) else : return self . prepare_input_structured_data ( data , * args , ** kwargs ) prepare_input_structured_data ( data = None , * args , ** kwargs ) # Scale and reshape structured data (np.recarray) before passing it to the next layer. Parameters: Name Type Description Default data recarray structured data to be transformed (Default value = None) None *args Additional arguments passed to the parent class () Returns: Type Description ndarray np.ndarray: Note The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[(\"a\", int), (\"b\", int), (\"c\", int)]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_input_structured_data(data) array([[-0.5, 0.33333333, 0.75 ], [ 1.5, 1.66666667, 2. ]]) Source code in simulai/io.py 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 def prepare_input_structured_data ( self , data : np . recarray = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Scale and reshape structured data (np.recarray) before passing it to the next layer. Args: data (np.recarray, optional): structured data to be transformed (Default value = None) *args (Additional arguments passed to the parent class): **kwargs Returns: np.ndarray: Note: The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[(\"a\", int), (\"b\", int), (\"c\", int)]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_input_structured_data(data) array([[-0.5, 0.33333333, 0.75 ], [ 1.5, 1.66666667, 2. ]]) \"\"\" bias , scale = self . _get_structured_bias_scale ( data . dtype ) data = data . copy () names = data . dtype . names for name in names : data [ name ] = ( data [ name ] - bias [ name ]) / scale [ name ] return super ( ScalerReshaper , self ) . prepare_input_structured_data ( data , * args , ** kwargs ) prepare_output_data ( data = None , * args , ** kwargs ) # Prepare the output data by scaling it and adding the bias. Parameters: Name Type Description Default data Union [ ndarray , recarray ] The output data to be prepared (Default value = None) None *args () Returns: Type Description ndarray np.ndarray: The prepared output data Note If the input data is a structured array, the method 'prepare_output_structured_data' will be called Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_output_data(np.array([1, 2, 3])) array([12., 14., 16.]) Source code in simulai/io.py 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 def prepare_output_data ( self , data : Union [ np . ndarray , np . recarray ] = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Prepare the output data by scaling it and adding the bias. Args: data (Union[np.ndarray, np.recarray], optional): The output data to be prepared (Default value = None) *args: **kwargs Returns: np.ndarray: The prepared output data Note: If the input data is a structured array, the method 'prepare_output_structured_data' will be called Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_output_data(np.array([1, 2, 3])) array([12., 14., 16.]) \"\"\" if not self . _is_recarray : return super ( ScalerReshaper , self ) . prepare_output_data ( data * self . scale + self . bias , * args , ** kwargs ) else : return self . prepare_output_structured_data ( data ) prepare_output_structured_data ( data = None , * args , ** kwargs ) # Scale and reshape structured data (np.recarray) before passing it to the next layer. Parameters: Name Type Description Default data ndarray structured data to be transformed (Default value = None) None *args Additional arguments passed to the parent class () **kwargs {} Returns: Type Description recarray np.recarray: Note The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([[-0.5, 0.33333333, 0.75 ], >>> [ 1.5, 1.66666667, 2. ]]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_output_structured_data(data) rec.array([(0., 2., 6.), (6., 8., 12.)], dtype=[('a', '<f8'), ('b', '<f8'), ('c', '<f8')]) Source code in simulai/io.py 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 def prepare_output_structured_data ( self , data : np . ndarray = None , * args , ** kwargs ) -> np . recarray : \"\"\"Scale and reshape structured data (np.recarray) before passing it to the next layer. Args: data (np.ndarray, optional): structured data to be transformed (Default value = None) *args (Additional arguments passed to the parent class): **kwargs: Returns: np.recarray: Note: - The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([[-0.5, 0.33333333, 0.75 ], >>> [ 1.5, 1.66666667, 2. ]]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_output_structured_data(data) rec.array([(0., 2., 6.), (6., 8., 12.)], dtype=[('a', '<f8'), ('b', '<f8'), ('c', '<f8')]) \"\"\" bias , scale = self . _get_structured_bias_scale ( self . dtype ) data = super ( ScalerReshaper , self ) . prepare_output_structured_data ( data , * args , ** kwargs ) data = data . copy () for name in self . dtype . names : data [ name ] = data [ name ] * scale [ name ] + bias [ name ] return data MapValid # Bases: Reshaper MapValid is a reshaper class that converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) where n_valids is the number of valid elements in the data array. This class is useful for datasets in which there are invalid data. Source code in simulai/io.pyclass MapValid ( Reshaper ): \"\"\"MapValid is a reshaper class that converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) where n_valids is the number of valid elements in the data array. This class is useful for datasets in which there are invalid data. \"\"\" name = \"map_valid\" def __init__ ( self , config : dict = None , mask = None , channels_last : bool = True ) -> None : \"\"\"Initialize the MapValid class with the configurations and mask passed as parameters. Args: config (dict, optional): configurations dictionary, by default None mask (int, np.NaN, np.inf, optional, optional): mask to select the invalid values, by default None channels_last (bool, optional): if set to True, move the channel dimension to the last, by default True \"\"\" super () . __init__ () self . default_dtype = \"float64\" if mask == 0 or isinstance ( mask , int ): self . replace_mask_with_large_number = False else : self . replace_mask_with_large_number = True self . return_the_same_mask = True for key , value in config . items (): setattr ( self , key , value ) # Default value for very large numbers self . large_number = 1e15 if not mask or self . replace_mask_with_large_number : self . mask = self . large_number else : self . mask = mask self . mask_ = mask for key , value in config . items (): setattr ( self , key , value ) self . valid_indices = None self . original_dimensions = None self . channels_last = channels_last def prepare_input_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"Internal input data preparer, executed for each label of the structured array Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: - MapValid converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) n_valids = dim([k in data[0, ...] if k != mask]) - WARNING: the invalid positions are expected to be static in relation to n0. Example:: >>> data = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) >>> prepare_input_data(data) array([[1, 2, 3], [5, 6, 7], [9, 10, 11]]) \"\"\" data = super ( MapValid , self ) . prepare_input_data ( data ) if self . mask == self . large_number : self . valid_indices_ = np . where ( data [ 0 , ... ] < self . mask ) elif not str ( self . mask ) . isnumeric () or isinstance ( self . mask , int ): self . valid_indices_ = np . where ( data [ 0 , ... ] != self . mask ) else : raise Exception ( \"The chosen mask {} does not fit in any supported case\" . format ( self . mask ) ) samples_dim = data . shape [ 0 ] valid_indices = ( slice ( 0 , samples_dim ),) + self . valid_indices_ return data [ valid_indices ] def prepare_output_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"Prepare output data for the MapValid operation. Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: - The reshaped data will have shape (n0, n_valids) where n0 is the number of samples and n_valids are the number of valid values in the data. - If the return_the_same_mask attribute is set to True, the mask used to select the invalid values will be returned. Otherwise, the reshaped data will be filled with NaN. Example:: >>> import numpy as np >>> reshaper = MapValid() >>> data = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) >>> reshaper.prepare_output_data(data) array([[[ 1., 2., 3.], [ 4., 5., 6.]], \"\"\" immutable_shape = data . shape [ 0 ] final_shape = ( immutable_shape , self . n_features , ) if self . return_the_same_mask : mask = self . mask_ else : mask = np . NaN # For practical purposes reshaped_data = np . full ( final_shape , mask ) if not reshaped_data . dtype . type == self . default_dtype : reshaped_data = reshaped_data . astype ( self . default_dtype ) samples_dim = data . shape [ 0 ] valid_indices = ( slice ( 0 , samples_dim ),) + self . valid_indices_ reshaped_data [ valid_indices ] = data reshaped_data = super ( MapValid , self ) . prepare_output_data ( reshaped_data ) return reshaped_data def prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"This function is used to prepare structured input data for further processing. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: Note: This function is a wrapper function that calls the 'prepare_input_data' function internally. Example:: >>> import numpy as np >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[('a', int), ('b', int), ('c', int)]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_input_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) \"\"\" return self . prepare_input_data ( data ) def prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"This function is used to prepare structured output data for further processing. Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: This function is a wrapper function that calls the 'prepare_output_data' function internally. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6]]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_output_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) \"\"\" return self . prepare_output_data ( data ) __init__ ( config = None , mask = None , channels_last = True ) # Initialize the MapValid class with the configurations and mask passed as parameters. Parameters: Name Type Description Default config dict configurations dictionary, by default None None mask ( int , NaN , inf , optional ) mask to select the invalid values, by default None None channels_last bool if set to True, move the channel dimension to the last, by default True True Source code in simulai/io.py 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 def __init__ ( self , config : dict = None , mask = None , channels_last : bool = True ) -> None : \"\"\"Initialize the MapValid class with the configurations and mask passed as parameters. Args: config (dict, optional): configurations dictionary, by default None mask (int, np.NaN, np.inf, optional, optional): mask to select the invalid values, by default None channels_last (bool, optional): if set to True, move the channel dimension to the last, by default True \"\"\" super () . __init__ () self . default_dtype = \"float64\" if mask == 0 or isinstance ( mask , int ): self . replace_mask_with_large_number = False else : self . replace_mask_with_large_number = True self . return_the_same_mask = True for key , value in config . items (): setattr ( self , key , value ) # Default value for very large numbers self . large_number = 1e15 if not mask or self . replace_mask_with_large_number : self . mask = self . large_number else : self . mask = mask self . mask_ = mask for key , value in config . items (): setattr ( self , key , value ) self . valid_indices = None self . original_dimensions = None self . channels_last = channels_last prepare_input_data ( data = None ) # Internal input data preparer, executed for each label of the structured array Parameters: Name Type Description Default data ndarray (Default value = None) None Returns: Type Description ndarray np.ndarray: Note MapValid converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) n_valids = dim([k in data[0, ...] if k != mask]) WARNING: the invalid positions are expected to be static in relation to n0. Example:: >>> data = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) >>> prepare_input_data(data) array([[1, 2, 3], [5, 6, 7], [9, 10, 11]]) Source code in simulai/io.py 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 def prepare_input_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"Internal input data preparer, executed for each label of the structured array Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: - MapValid converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) n_valids = dim([k in data[0, ...] if k != mask]) - WARNING: the invalid positions are expected to be static in relation to n0. Example:: >>> data = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) >>> prepare_input_data(data) array([[1, 2, 3], [5, 6, 7], [9, 10, 11]]) \"\"\" data = super ( MapValid , self ) . prepare_input_data ( data ) if self . mask == self . large_number : self . valid_indices_ = np . where ( data [ 0 , ... ] < self . mask ) elif not str ( self . mask ) . isnumeric () or isinstance ( self . mask , int ): self . valid_indices_ = np . where ( data [ 0 , ... ] != self . mask ) else : raise Exception ( \"The chosen mask {} does not fit in any supported case\" . format ( self . mask ) ) samples_dim = data . shape [ 0 ] valid_indices = ( slice ( 0 , samples_dim ),) + self . valid_indices_ return data [ valid_indices ] prepare_input_structured_data ( data = None ) # This function is used to prepare structured input data for further processing. Parameters: Name Type Description Default data recarray (Default value = None) None Returns: Type Description ndarray np.ndarray: Note This function is a wrapper function that calls the 'prepare_input_data' function internally. Example:: >>> import numpy as np >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[('a', int), ('b', int), ('c', int)]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_input_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) Source code in simulai/io.py 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 def prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"This function is used to prepare structured input data for further processing. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: Note: This function is a wrapper function that calls the 'prepare_input_data' function internally. Example:: >>> import numpy as np >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[('a', int), ('b', int), ('c', int)]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_input_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) \"\"\" return self . prepare_input_data ( data ) prepare_output_data ( data = None ) # Prepare output data for the MapValid operation. Parameters: Name Type Description Default data ndarray (Default value = None) None Returns: Type Description ndarray np.ndarray: Note The reshaped data will have shape (n0, n_valids) where n0 is the number of samples and n_valids are the number of valid values in the data. If the return_the_same_mask attribute is set to True, the mask used to select the invalid values will be returned. Otherwise, the reshaped data will be filled with NaN. Example:: >>> import numpy as np >>> reshaper = MapValid() >>> data = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) >>> reshaper.prepare_output_data(data) array([[[ 1., 2., 3.], [ 4., 5., 6.]], Source code in simulai/io.py 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 def prepare_output_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"Prepare output data for the MapValid operation. Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: - The reshaped data will have shape (n0, n_valids) where n0 is the number of samples and n_valids are the number of valid values in the data. - If the return_the_same_mask attribute is set to True, the mask used to select the invalid values will be returned. Otherwise, the reshaped data will be filled with NaN. Example:: >>> import numpy as np >>> reshaper = MapValid() >>> data = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) >>> reshaper.prepare_output_data(data) array([[[ 1., 2., 3.], [ 4., 5., 6.]], \"\"\" immutable_shape = data . shape [ 0 ] final_shape = ( immutable_shape , self . n_features , ) if self . return_the_same_mask : mask = self . mask_ else : mask = np . NaN # For practical purposes reshaped_data = np . full ( final_shape , mask ) if not reshaped_data . dtype . type == self . default_dtype : reshaped_data = reshaped_data . astype ( self . default_dtype ) samples_dim = data . shape [ 0 ] valid_indices = ( slice ( 0 , samples_dim ),) + self . valid_indices_ reshaped_data [ valid_indices ] = data reshaped_data = super ( MapValid , self ) . prepare_output_data ( reshaped_data ) return reshaped_data prepare_output_structured_data ( data = None ) # This function is used to prepare structured output data for further processing. Parameters: Name Type Description Default data ndarray (Default value = None) None Returns: Type Description ndarray np.ndarray: Note This function is a wrapper function that calls the 'prepare_output_data' function internally. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6]]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_output_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) Source code in simulai/io.py 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 def prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"This function is used to prepare structured output data for further processing. Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: This function is a wrapper function that calls the 'prepare_output_data' function internally. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6]]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_output_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) \"\"\" return self . prepare_output_data ( data ) Sampling # Bases: DataPreparer This class is used for sampling data from the input dataset. Source code in simulai/io.pyclass Sampling ( DataPreparer ): \"\"\"This class is used for sampling data from the input dataset.\"\"\" name = \"sampling\" def __init__ ( self , choices_fraction : float = 0.1 , shuffling : bool = False ) -> None : \"\"\"Initializes the Sampling class. Args: choices_fraction (float, optional): The fraction of the dataset to be sampled, by default 0.1 shuffling (bool, optional): Whether to shuffle the data before sampling, by default False \"\"\" super () . __init__ () self . choices_fraction = choices_fraction self . shuffling = shuffling self . global_indices = None self . sampled_indices = None @property def indices ( self ) -> list : \"\"\"Returns the indices of the data that have been sampled. Returns: list: The indices of the data that have been sampled. Raises: AssertionError: If the indices have not been generated yet. Note: The indices are generated by calling the 'prepare_input_data' or 'prepare_input_structured_data' functions. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> sampler = Sampling(choices_fraction=0.5, shuffling=True) >>> sampler.prepare_input_data(data) >>> sampler.indices [0, 1] \"\"\" assert self . sampled_indices is not None , ( \"The indices still were not generate.\" \"Run prepare_input_data or prepare_input_structured_data for getting them.\" ) return sorted ( self . sampled_indices . tolist ()) def prepare_input_data ( self , data : np . ndarray = None , data_interval : list = None ) -> np . ndarray : \"\"\"Prepare input data for sampling. Args: data (np.ndarray, optional): The input data. Default is None. data_interval (list, optional): The interval of data that should be selected. Default is None, Returns: numpy.ndarray: The sampled data. Note: The `data_interval` parameter must be a list of two integers, specifying the start and end of the interval. Example:: >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> data_interval = [3, 7] >>> input_data = sampler.prepare_input_data(data, data_interval) \"\"\" if data_interval is None : data_interval = [ 0 , data . shape [ 0 ]] n_samples = data_interval [ 1 ] - data_interval [ 0 ] self . global_indices = np . arange ( start = data_interval [ 0 ], stop = data_interval [ 1 ]) n_choices = int ( self . choices_fraction * n_samples ) self . sampled_indices = self . global_indices . copy () if self . shuffling : np . random . shuffle ( self . sampled_indices ) else : self . sampled_indices = self . sampled_indices self . sampled_indices = np . random . choice ( self . sampled_indices , n_choices ) return data [ self . sampled_indices ] def prepare_input_structured_data ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , ) -> np . recarray : \"\"\"Prepares structured data for further processing. Args: data (h5py.Dataset, optional): Structured array to be prepared, the default shape is (n_samples, 1, *other_dimensions) data_interval (list, optional): The interval of the data to be prepared, the default shape is [0, data.shape[0]] batch_size (int, optional): The size of the batches to be processed, defaults to None dump_path (str, optional): (Default value = None) Returns: np.recarray: Note: - The features dimensions of the input data should be 1 in NumPy structured arrays. - When using a h5py.Dataset as input, a dump_path must be provided Example:: >>> data = h5py.File(\"path/to/data.h5\", 'r')['data'] >>> data_interval = [0, data.shape[0]] >>> batch_size = 32 >>> dump_path = \"path/to/dump.h5\" >>> obj = PrepareInputStructuredData() >>> prepared_data = obj.prepare_input_structured_data(data, data_interval, batch_size, dump_path) \"\"\" if data_interval is None : data_interval = [ 0 , data . shape [ 0 ]] n_samples = data_interval [ 1 ] - data_interval [ 0 ] self . global_indices = np . arange ( start = data_interval [ 0 ], stop = data_interval [ 1 ]) n_sampled_preserved = int ( self . choices_fraction * n_samples ) self . sampled_indices = np . random . choice ( self . global_indices , n_sampled_preserved , replace = False ) if isinstance ( data , h5py . Dataset ): if isinstance ( batch_size , MemorySizeEval ): batch_size = batch_size ( max_batches = n_sampled_preserved , shape = data . shape [ 1 :] ) else : pass assert ( dump_path ), \"Using a h5py.Dataset as input data a dump_path must be provided.\" fp = h5py . File ( dump_path , \"w\" ) sampled_data = fp . create_dataset ( \"data\" , shape = ( n_sampled_preserved ,) + data . shape [ 1 :], dtype = data . dtype ) # Constructing the normalization using the reference data batches = indices_batchdomain_constructor ( indices = self . sampled_indices , batch_size = batch_size ) start_ix = 0 for batch_id , batch in enumerate ( batches ): print ( f \"Sampling batch { batch_id + 1 } / { len ( batches ) } batch_size= { len ( batch ) } \" ) finish_ix = start_ix + len ( batch ) sampled_data [ start_ix : finish_ix ] = data [ sorted ( batch )] start_ix = finish_ix if self . shuffling : random . shuffle ( sampled_data ) else : raise Exception ( \"Others cases are still not implemented.\" ) return sampled_data indices : list property # Returns the indices of the data that have been sampled. Returns: Name Type Description list list The indices of the data that have been sampled. Raises: Type Description AssertionError If the indices have not been generated yet. Note The indices are generated by calling the 'prepare_input_data' or 'prepare_input_structured_data' functions. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> sampler = Sampling(choices_fraction=0.5, shuffling=True) >>> sampler.prepare_input_data(data) >>> sampler.indices [0, 1] __init__ ( choices_fraction = 0.1 , shuffling = False ) # Initializes the Sampling class. Parameters: Name Type Description Default choices_fraction float The fraction of the dataset to be sampled, by default 0.1 0.1 shuffling bool Whether to shuffle the data before sampling, by default False False Source code in simulai/io.py 711 712 713 714 715 716 717 718 719 720 721 722 723 724 def __init__ ( self , choices_fraction : float = 0.1 , shuffling : bool = False ) -> None : \"\"\"Initializes the Sampling class. Args: choices_fraction (float, optional): The fraction of the dataset to be sampled, by default 0.1 shuffling (bool, optional): Whether to shuffle the data before sampling, by default False \"\"\" super () . __init__ () self . choices_fraction = choices_fraction self . shuffling = shuffling self . global_indices = None self . sampled_indices = None prepare_input_data ( data = None , data_interval = None ) # Prepare input data for sampling. Parameters: Name Type Description Default data ndarray The input data. Default is None. None data_interval list The interval of data that should be selected. Default is None, None Returns: Type Description ndarray numpy.ndarray: The sampled data. Note: The data_interval parameter must be a list of two integers, specifying the start and end of the interval. Example:: >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> data_interval = [3, 7] >>> input_data = sampler.prepare_input_data(data, data_interval) Source code in simulai/io.py 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 def prepare_input_data ( self , data : np . ndarray = None , data_interval : list = None ) -> np . ndarray : \"\"\"Prepare input data for sampling. Args: data (np.ndarray, optional): The input data. Default is None. data_interval (list, optional): The interval of data that should be selected. Default is None, Returns: numpy.ndarray: The sampled data. Note: The `data_interval` parameter must be a list of two integers, specifying the start and end of the interval. Example:: >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> data_interval = [3, 7] >>> input_data = sampler.prepare_input_data(data, data_interval) \"\"\" if data_interval is None : data_interval = [ 0 , data . shape [ 0 ]] n_samples = data_interval [ 1 ] - data_interval [ 0 ] self . global_indices = np . arange ( start = data_interval [ 0 ], stop = data_interval [ 1 ]) n_choices = int ( self . choices_fraction * n_samples ) self . sampled_indices = self . global_indices . copy () if self . shuffling : np . random . shuffle ( self . sampled_indices ) else : self . sampled_indices = self . sampled_indices self . sampled_indices = np . random . choice ( self . sampled_indices , n_choices ) return data [ self . sampled_indices ] prepare_input_structured_data ( data = None , data_interval = None , batch_size = None , dump_path = None ) # Prepares structured data for further processing. Parameters: Name Type Description Default data Dataset Structured array to be prepared, the default shape is (n_samples, 1, *other_dimensions) None data_interval list The interval of the data to be prepared, the default shape is [0, data.shape[0]] None batch_size int The size of the batches to be processed, defaults to None None dump_path str (Default value = None) None Returns: Type Description recarray np.recarray: Note The features dimensions of the input data should be 1 in NumPy structured arrays. When using a h5py.Dataset as input, a dump_path must be provided Example:: >>> data = h5py.File(\"path/to/data.h5\", 'r')['data'] >>> data_interval = [0, data.shape[0]] >>> batch_size = 32 >>> dump_path = \"path/to/dump.h5\" >>> obj = PrepareInputStructuredData() >>> prepared_data = obj.prepare_input_structured_data(data, data_interval, batch_size, dump_path) Source code in simulai/io.py 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 def prepare_input_structured_data ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , ) -> np . recarray : \"\"\"Prepares structured data for further processing. Args: data (h5py.Dataset, optional): Structured array to be prepared, the default shape is (n_samples, 1, *other_dimensions) data_interval (list, optional): The interval of the data to be prepared, the default shape is [0, data.shape[0]] batch_size (int, optional): The size of the batches to be processed, defaults to None dump_path (str, optional): (Default value = None) Returns: np.recarray: Note: - The features dimensions of the input data should be 1 in NumPy structured arrays. - When using a h5py.Dataset as input, a dump_path must be provided Example:: >>> data = h5py.File(\"path/to/data.h5\", 'r')['data'] >>> data_interval = [0, data.shape[0]] >>> batch_size = 32 >>> dump_path = \"path/to/dump.h5\" >>> obj = PrepareInputStructuredData() >>> prepared_data = obj.prepare_input_structured_data(data, data_interval, batch_size, dump_path) \"\"\" if data_interval is None : data_interval = [ 0 , data . shape [ 0 ]] n_samples = data_interval [ 1 ] - data_interval [ 0 ] self . global_indices = np . arange ( start = data_interval [ 0 ], stop = data_interval [ 1 ]) n_sampled_preserved = int ( self . choices_fraction * n_samples ) self . sampled_indices = np . random . choice ( self . global_indices , n_sampled_preserved , replace = False ) if isinstance ( data , h5py . Dataset ): if isinstance ( batch_size , MemorySizeEval ): batch_size = batch_size ( max_batches = n_sampled_preserved , shape = data . shape [ 1 :] ) else : pass assert ( dump_path ), \"Using a h5py.Dataset as input data a dump_path must be provided.\" fp = h5py . File ( dump_path , \"w\" ) sampled_data = fp . create_dataset ( \"data\" , shape = ( n_sampled_preserved ,) + data . shape [ 1 :], dtype = data . dtype ) # Constructing the normalization using the reference data batches = indices_batchdomain_constructor ( indices = self . sampled_indices , batch_size = batch_size ) start_ix = 0 for batch_id , batch in enumerate ( batches ): print ( f \"Sampling batch { batch_id + 1 } / { len ( batches ) } batch_size= { len ( batch ) } \" ) finish_ix = start_ix + len ( batch ) sampled_data [ start_ix : finish_ix ] = data [ sorted ( batch )] start_ix = finish_ix if self . shuffling : random . shuffle ( sampled_data ) else : raise Exception ( \"Others cases are still not implemented.\" ) return sampled_data MovingWindow # MovingWindow is applied over a time-series array (2D array), and it is used for creating the necessary augmented data used for LSTM networks, replicating the training windows for each sample in the dataset. See a graphical example: Example:: batch n ---------|--- history | horizon batch n+1 ---------|--- history | horizon ---- skip Example:: >>> import numpy as np >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> window = MovingWindow(history_size=3, horizon_size=1) >>> window.transform(data) array([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10]]) Source code in simulai/io.pyclass MovingWindow : r \"\"\"MovingWindow is applied over a time-series array (2D array), and it is used for creating the necessary augmented data used for LSTM networks, replicating the training windows for each sample in the dataset. See a graphical example: Example:: batch n ---------|--- history | horizon batch n+1 ---------|--- history | horizon ---- skip Example:: >>> import numpy as np >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> window = MovingWindow(history_size=3, horizon_size=1) >>> window.transform(data) array([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10]]) \"\"\" def __init__ ( self , history_size : int = None , skip_size : int = 1 , horizon_size : int = None , full_output : bool = True , ) -> None : r \"\"\"Initializes the MovingWindow class Args: history_size (int, optional): the size of the history window, by default None skip_size (int, optional): the number of steps to skip between windows, by default 1 horizon_size (int, optional): the size of the horizon window, by default None full_output (bool, optional): flag to use the full output or only the last item, by default True \"\"\" self . history_size = history_size self . skip_size = skip_size self . horizon_size = horizon_size self . full_output = full_output if self . full_output == True : self . process_batch = self . bypass else : self . process_batch = self . get_last_item # Verifying if history and horizon sizes was provided assert ( history_size ), f \"A value for history_size must be provided, not { history_size } \" assert ( horizon_size ), f \"A value for horizon_size must be provided, not { horizon_size } \" def transform ( self , time_series : np . ndarray ) -> np . ndarray : r \"\"\"Applies the moving window over the time_series array. Args: time_series (np.ndarray): Returns: np.ndarray: the transformed array with the windows. \"\"\" return np . ndarray ( time_series ) def bypass ( self , batch : np . ndarray ) -> np . ndarray : r \"\"\"Does nothing, returns the input batch. Args: batch (np.ndarray): Returns: np.ndarray: the input array \"\"\" return batch def get_last_item ( self , batch : np . ndarray ) -> np . ndarray : r \"\"\"Get the last item of a batch Args: batch (np.ndarray): Returns: np.ndarray: Note: - This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> mw.get_last_item(data) array([[7, 8, 9]]) \"\"\" return batch [ - 1 :] def __call__ ( self , input_data : np . ndarray = None , output_data : np . ndarray = None ) -> Tuple [ np . ndarray , np . ndarray ]: r \"\"\"Apply Moving Window over the input data Args: input_data (np.ndarray, optional): 2D array (time-series) to be used for constructing the history size (Default value = None) output_data (np.ndarray, optional): (Default value = None) Returns: Tuple of np.ndarray: The tuple contains two arrays with shapes (n_samples, n_history, n_features) and Note: - It is expected that the input_data and output_data have the same shape - This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) >>> mw = MovingWindow(history_size=2, horizon_size=2, skip_size=1) >>> input_data, output_data = mw(data, data) >>> input_data array([[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]]) >>> output_data array([[[ 7, 8, 9], [10, 11, 12]], [[10, 11, 12], [13, 14, 15]]]) \"\"\" # It is expected series_data to be a set of time-series with shape # (n_timesteps, n_variables) input_batches_list = list () output_batches_list = list () data_size = input_data . shape [ 0 ] assert input_data . shape [ 0 ] == output_data . shape [ 0 ] center = self . history_size # Loop for covering the entire time-series dataset constructing the # training windows while center + self . horizon_size <= data_size : input_batch = input_data [ center - self . history_size : center , :] output_batch = output_data [ center : center + self . horizon_size , :] input_batches_list . append ( input_batch ) output_batches_list . append ( self . process_batch ( batch = output_batch )) center += self . skip_size input_data = np . stack ( input_batches_list , 0 ) output_data = np . stack ( output_batches_list , 0 ) return input_data , output_data __call__ ( input_data = None , output_data = None ) # Apply Moving Window over the input data Parameters: Name Type Description Default input_data ndarray 2D array (time-series) to be used for constructing the history size (Default value = None) None output_data ndarray (Default value = None) None Returns: Type Description Tuple [ ndarray , ndarray ] Tuple of np.ndarray: The tuple contains two arrays with shapes (n_samples, n_history, n_features) and Note It is expected that the input_data and output_data have the same shape This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) >>> mw = MovingWindow(history_size=2, horizon_size=2, skip_size=1) >>> input_data, output_data = mw(data, data) >>> input_data array([[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]]) >>> output_data array([[[ 7, 8, 9], [10, 11, 12]], [[10, 11, 12], [13, 14, 15]]]) Source code in simulai/io.py 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 def __call__ ( self , input_data : np . ndarray = None , output_data : np . ndarray = None ) -> Tuple [ np . ndarray , np . ndarray ]: r \"\"\"Apply Moving Window over the input data Args: input_data (np.ndarray, optional): 2D array (time-series) to be used for constructing the history size (Default value = None) output_data (np.ndarray, optional): (Default value = None) Returns: Tuple of np.ndarray: The tuple contains two arrays with shapes (n_samples, n_history, n_features) and Note: - It is expected that the input_data and output_data have the same shape - This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) >>> mw = MovingWindow(history_size=2, horizon_size=2, skip_size=1) >>> input_data, output_data = mw(data, data) >>> input_data array([[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]]) >>> output_data array([[[ 7, 8, 9], [10, 11, 12]], [[10, 11, 12], [13, 14, 15]]]) \"\"\" # It is expected series_data to be a set of time-series with shape # (n_timesteps, n_variables) input_batches_list = list () output_batches_list = list () data_size = input_data . shape [ 0 ] assert input_data . shape [ 0 ] == output_data . shape [ 0 ] center = self . history_size # Loop for covering the entire time-series dataset constructing the # training windows while center + self . horizon_size <= data_size : input_batch = input_data [ center - self . history_size : center , :] output_batch = output_data [ center : center + self . horizon_size , :] input_batches_list . append ( input_batch ) output_batches_list . append ( self . process_batch ( batch = output_batch )) center += self . skip_size input_data = np . stack ( input_batches_list , 0 ) output_data = np . stack ( output_batches_list , 0 ) return input_data , output_data __init__ ( history_size = None , skip_size = 1 , horizon_size = None , full_output = True ) # Initializes the MovingWindow class Parameters: Name Type Description Default history_size int the size of the history window, by default None None skip_size int the number of steps to skip between windows, by default 1 1 horizon_size int the size of the horizon window, by default None None full_output bool flag to use the full output or only the last item, by default True True Source code in simulai/io.py 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 def __init__ ( self , history_size : int = None , skip_size : int = 1 , horizon_size : int = None , full_output : bool = True , ) -> None : r \"\"\"Initializes the MovingWindow class Args: history_size (int, optional): the size of the history window, by default None skip_size (int, optional): the number of steps to skip between windows, by default 1 horizon_size (int, optional): the size of the horizon window, by default None full_output (bool, optional): flag to use the full output or only the last item, by default True \"\"\" self . history_size = history_size self . skip_size = skip_size self . horizon_size = horizon_size self . full_output = full_output if self . full_output == True : self . process_batch = self . bypass else : self . process_batch = self . get_last_item # Verifying if history and horizon sizes was provided assert ( history_size ), f \"A value for history_size must be provided, not { history_size } \" assert ( horizon_size ), f \"A value for horizon_size must be provided, not { horizon_size } \" bypass ( batch ) # Does nothing, returns the input batch. Parameters: Name Type Description Default batch ndarray required Returns: Type Description ndarray np.ndarray: the input array Source code in simulai/io.py 955 956 957 958 959 960 961 962 963 964 965 def bypass ( self , batch : np . ndarray ) -> np . ndarray : r \"\"\"Does nothing, returns the input batch. Args: batch (np.ndarray): Returns: np.ndarray: the input array \"\"\" return batch get_last_item ( batch ) # Get the last item of a batch Parameters: Name Type Description Default batch ndarray required Returns: Type Description ndarray np.ndarray: Note This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> mw.get_last_item(data) array([[7, 8, 9]]) Source code in simulai/io.py 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 def get_last_item ( self , batch : np . ndarray ) -> np . ndarray : r \"\"\"Get the last item of a batch Args: batch (np.ndarray): Returns: np.ndarray: Note: - This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> mw.get_last_item(data) array([[7, 8, 9]]) \"\"\" return batch [ - 1 :] transform ( time_series ) # Applies the moving window over the time_series array. Parameters: Name Type Description Default time_series ndarray required Returns: Type Description ndarray np.ndarray: the transformed array with the windows. Source code in simulai/io.py 943 944 945 946 947 948 949 950 951 952 953 def transform ( self , time_series : np . ndarray ) -> np . ndarray : r \"\"\"Applies the moving window over the time_series array. Args: time_series (np.ndarray): Returns: np.ndarray: the transformed array with the windows. \"\"\" return np . ndarray ( time_series ) SlidingWindow # SlidingWindow is applied over a time-series array (2D array), and it is used for creating the necessary augmented data used for LSTM networks, replicating the training windows for each sample in the dataset. The difference between SlidingWindow and MovingWindow is that here there is no intersection between two sequential batches Attributes: Name Type Description history_size int The number of history samples to include in each window. skip_size int The number of samples to skip between each window. Note: - The difference between SlidingWindow and MovingWindow is that here there is no intersection between two sequential batches. See a graphical example: Example:: batch n ---------|--- history | horizon batch n+1 ---------|--- history | horizon Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]] Source code in simulai/io.py 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 class SlidingWindow : r \"\"\"SlidingWindow is applied over a time-series array (2D array), and it is used for creating the necessary augmented data used for LSTM networks, replicating the training windows for each sample in the dataset. The difference between SlidingWindow and MovingWindow is that here there is no intersection between two sequential batches Attributes: history_size : int The number of history samples to include in each window. skip_size : int The number of samples to skip between each window. Note: - The difference between SlidingWindow and MovingWindow is that here there is no intersection between two sequential batches. See a graphical example: Example:: batch n ---------|--- history | horizon batch n+1 ---------|--- history | horizon Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]] \"\"\" def __init__ ( self , history_size : int = None , skip_size : int = None ) -> None : r \"\"\"Initialize the SlidingWindow object. Args: history_size (int, optional): The number of history samples to include in each window. (Default value = None) skip_size (int, optional): The number of samples to skip between each window. (Default value = None) \"\"\" self . history_size = history_size self . skip_size = skip_size # Verifying if history and horizon sizes was provided assert ( history_size ), f \"A value for history_size must be provided, not { history_size } \" assert skip_size , f \"A value for horizon_size must be provided, not { skip_size } \" def apply ( self , time_series : List [ int ]) -> List [ List [ int ]]: r \"\"\"Applies the sliding window to the given time series. Args: time_series (List[int]): Returns: List[List[int]]: Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]] \"\"\" windowed_samples = [] for i in range ( 0 , len ( time_series ) - self . history_size - self . skip_size + 1 ): window = time_series [ i : i + self . history_size + self . skip_size ] windowed_samples . append ( window ) return windowed_samples def __call__ ( self , input_data : np . ndarray = None , output_data : np . ndarray = None ) -> Tuple [ np . ndarray , np . ndarray ]: r \"\"\"Applies a sliding window operation on the given time series and returns the windowed samples. Args: input_data (np.ndarray, optional): 2D array (time-series) to be used for constructing the history size (Default value = None) output_data (np.ndarray, optional): (Default value = None) Returns: Tuple[np.ndarray, np.ndarray]: tuple of np.ndarray with shapes (n_samples, n_history, n_features) and (n_samples, n_horizon, n_features) Note: - history_size and horizon_size should be positive integers - history_size should be less than the length of input_data - input_data and output_data should have the same number of rows Example:: >>> data = np.random.rand(10,3) >>> history_size = 3 >>> horizon_size = 2 >>> window = Window(history_size, horizon_size) >>> input_data, output_data = window(data) >>> input_data.shape (4, 3, 3) >>> output_data.shape (4, 2, 3) \"\"\" # It is expected series_data to be a set of time-series with shape # (n_timesteps, n_variables) input_batches_list = list () output_batches_list = list () data_size = input_data . shape [ 0 ] assert input_data . shape [ 0 ] == output_data . shape [ 0 ] center = self . history_size # Loop for covering the entire time-series dataset constructing the # training windows while center + self . skip_size <= data_size : input_batch = input_data [ center - self . history_size : center , :] output_batch = output_data [ center - self . history_size + self . skip_size : center + self . skip_size , : ] input_batches_list . append ( input_batch ) output_batches_list . append ( output_batch ) center += self . skip_size input_data = np . stack ( input_batches_list , 0 ) output_data = np . stack ( output_batches_list , 0 ) return input_data , output_data __call__ ( input_data = None , output_data = None ) # Applies a sliding window operation on the given time series and returns the windowed samples. Parameters: Name Type Description Default input_data ndarray 2D array (time-series) to be used for constructing the history size (Default value = None) None output_data ndarray (Default value = None) None Returns: Type Description Tuple [ ndarray , ndarray ] Tuple[np.ndarray, np.ndarray]: tuple of np.ndarray with shapes (n_samples, n_history, n_features) and (n_samples, n_horizon, n_features) Note history_size and horizon_size should be positive integers history_size should be less than the length of input_data input_data and output_data should have the same number of rows Example:: >>> data = np.random.rand(10,3) >>> history_size = 3 >>> horizon_size = 2 >>> window = Window(history_size, horizon_size) >>> input_data, output_data = window(data) >>> input_data.shape (4, 3, 3) >>> output_data.shape (4, 2, 3) Source code in simulai/io.py 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 def __call__ ( self , input_data : np . ndarray = None , output_data : np . ndarray = None ) -> Tuple [ np . ndarray , np . ndarray ]: r \"\"\"Applies a sliding window operation on the given time series and returns the windowed samples. Args: input_data (np.ndarray, optional): 2D array (time-series) to be used for constructing the history size (Default value = None) output_data (np.ndarray, optional): (Default value = None) Returns: Tuple[np.ndarray, np.ndarray]: tuple of np.ndarray with shapes (n_samples, n_history, n_features) and (n_samples, n_horizon, n_features) Note: - history_size and horizon_size should be positive integers - history_size should be less than the length of input_data - input_data and output_data should have the same number of rows Example:: >>> data = np.random.rand(10,3) >>> history_size = 3 >>> horizon_size = 2 >>> window = Window(history_size, horizon_size) >>> input_data, output_data = window(data) >>> input_data.shape (4, 3, 3) >>> output_data.shape (4, 2, 3) \"\"\" # It is expected series_data to be a set of time-series with shape # (n_timesteps, n_variables) input_batches_list = list () output_batches_list = list () data_size = input_data . shape [ 0 ] assert input_data . shape [ 0 ] == output_data . shape [ 0 ] center = self . history_size # Loop for covering the entire time-series dataset constructing the # training windows while center + self . skip_size <= data_size : input_batch = input_data [ center - self . history_size : center , :] output_batch = output_data [ center - self . history_size + self . skip_size : center + self . skip_size , : ] input_batches_list . append ( input_batch ) output_batches_list . append ( output_batch ) center += self . skip_size input_data = np . stack ( input_batches_list , 0 ) output_data = np . stack ( output_batches_list , 0 ) return input_data , output_data __init__ ( history_size = None , skip_size = None ) # Initialize the SlidingWindow object. Parameters: Name Type Description Default history_size int The number of history samples to include in each window. (Default value = None) None skip_size int The number of samples to skip between each window. (Default value = None) None Source code in simulai/io.py 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 def __init__ ( self , history_size : int = None , skip_size : int = None ) -> None : r \"\"\"Initialize the SlidingWindow object. Args: history_size (int, optional): The number of history samples to include in each window. (Default value = None) skip_size (int, optional): The number of samples to skip between each window. (Default value = None) \"\"\" self . history_size = history_size self . skip_size = skip_size # Verifying if history and horizon sizes was provided assert ( history_size ), f \"A value for history_size must be provided, not { history_size } \" assert skip_size , f \"A value for horizon_size must be provided, not { skip_size } \" apply ( time_series ) # Applies the sliding window to the given time series. Parameters: Name Type Description Default time_series List [ int ] required Returns: Type Description List [ List [ int ]] List[List[int]]: Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]] Source code in simulai/io.py 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 def apply ( self , time_series : List [ int ]) -> List [ List [ int ]]: r \"\"\"Applies the sliding window to the given time series. Args: time_series (List[int]): Returns: List[List[int]]: Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]] \"\"\" windowed_samples = [] for i in range ( 0 , len ( time_series ) - self . history_size - self . skip_size + 1 ): window = time_series [ i : i + self . history_size + self . skip_size ] windowed_samples . append ( window ) return windowed_samples IntersectingBatches # IntersectingBatches is a class that is applied over a time-series array (2D array) to create batches of input data for training or testing purposes. Source code in simulai/io.py 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 class IntersectingBatches : r \"\"\"IntersectingBatches is a class that is applied over a time-series array (2D array) to create batches of input data for training or testing purposes.\"\"\" def __init__ ( self , skip_size : int = 1 , batch_size : int = None , full : bool = True ) -> None : r \"\"\"Initializes the IntersectingBatches class Args: skip_size (int, optional): Number of samples to skip between two windows. (Default value = 1) batch_size (int, optional): Number of samples to use in each batch. (Default value = None) full (bool, optional): Whether to include the last batch or not, even if it's not full. (Default value = True) \"\"\" assert ( batch_size ), f \"A value for horizon_size must be provided, not { batch_size } \" self . skip_size = skip_size self . batch_size = batch_size self . full = full def get_indices ( self , dim : int = None ) -> np . ndarray : r \"\"\"It gets just the indices of the shifting Args: dim (int, optional): total dimension (Default value = None) Returns: np.ndarray: the shifted indices \"\"\" center = 0 indices = list () indices_m = list () # Loop for covering the entire time-series dataset constructing the # training windows while center + self . batch_size < dim : index = center + self . batch_size indices . append ( center ) indices_m . append ( index ) center += self . skip_size return np . array ( indices ), np . array ( indices_m ) def __call__ ( self , input_data : np . ndarray = None ) -> Union [ list , np . ndarray ]: r \"\"\"Applies the batching strategy to the input data. Args: input_data (np.ndarray, optional): (Default value = None) Returns: Union[list, np.ndarray]: A list of batches or a single batch if `full` attribute is set to False. Note: - If the `full` attribute is set to True, the last batch will be included even if it's not full. Example:: >>> input_data = np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) >>> batches = IntersectingBatches(skip_size=1, batch_size=2) >>> batches(input_data) [array([[1, 2, 3], [4, 5, 6]]), array([[4, 5, 6], [7, 8, 9]]), array([[ 7, 8, 9], [10, 11, 12]])] \"\"\" input_batches_list = list () data_size = input_data . shape [ 0 ] center = 0 # Loop for covering the entire time-series dataset constructing the # training windows while center + self . batch_size <= data_size : input_batch = input_data [ center : center + self . batch_size ] input_batches_list . append ( input_batch ) center += self . skip_size if self . full == True : return input_batches_list else : return np . vstack ([ item [ - 1 ] for item in input_batches_list ]) __call__ ( input_data = None ) # Applies the batching strategy to the input data. Parameters: Name Type Description Default input_data ndarray (Default value = None) None Returns: Type Description Union [ list , ndarray ] Union[list, np.ndarray]: A list of batches or a single batch if full attribute is set to False. Note: - If the full attribute is set to True, the last batch will be included even if it's not full. Example:: >>> input_data = np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) >>> batches = IntersectingBatches(skip_size=1, batch_size=2) >>> batches(input_data) [array([[1, 2, 3], [4, 5, 6]]), array([[4, 5, 6], [7, 8, 9]]), array([[ 7, 8, 9], [10, 11, 12]])] Source code in simulai/io.py 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 def __call__ ( self , input_data : np . ndarray = None ) -> Union [ list , np . ndarray ]: r \"\"\"Applies the batching strategy to the input data. Args: input_data (np.ndarray, optional): (Default value = None) Returns: Union[list, np.ndarray]: A list of batches or a single batch if `full` attribute is set to False. Note: - If the `full` attribute is set to True, the last batch will be included even if it's not full. Example:: >>> input_data = np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) >>> batches = IntersectingBatches(skip_size=1, batch_size=2) >>> batches(input_data) [array([[1, 2, 3], [4, 5, 6]]), array([[4, 5, 6], [7, 8, 9]]), array([[ 7, 8, 9], [10, 11, 12]])] \"\"\" input_batches_list = list () data_size = input_data . shape [ 0 ] center = 0 # Loop for covering the entire time-series dataset constructing the # training windows while center + self . batch_size <= data_size : input_batch = input_data [ center : center + self . batch_size ] input_batches_list . append ( input_batch ) center += self . skip_size if self . full == True : return input_batches_list else : return np . vstack ([ item [ - 1 ] for item in input_batches_list ]) __init__ ( skip_size = 1 , batch_size = None , full = True ) # Initializes the IntersectingBatches class Parameters: Name Type Description Default skip_size int Number of samples to skip between two windows. (Default value = 1) 1 batch_size int Number of samples to use in each batch. (Default value = None) None full bool Whether to include the last batch or not, even if it's not full. (Default value = True) True Source code in simulai/io.py 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 def __init__ ( self , skip_size : int = 1 , batch_size : int = None , full : bool = True ) -> None : r \"\"\"Initializes the IntersectingBatches class Args: skip_size (int, optional): Number of samples to skip between two windows. (Default value = 1) batch_size (int, optional): Number of samples to use in each batch. (Default value = None) full (bool, optional): Whether to include the last batch or not, even if it's not full. (Default value = True) \"\"\" assert ( batch_size ), f \"A value for horizon_size must be provided, not { batch_size } \" self . skip_size = skip_size self . batch_size = batch_size self . full = full get_indices ( dim = None ) # It gets just the indices of the shifting Parameters: Name Type Description Default dim int total dimension (Default value = None) None Returns: Type Description ndarray np.ndarray: the shifted indices Source code in simulai/io.py 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 def get_indices ( self , dim : int = None ) -> np . ndarray : r \"\"\"It gets just the indices of the shifting Args: dim (int, optional): total dimension (Default value = None) Returns: np.ndarray: the shifted indices \"\"\" center = 0 indices = list () indices_m = list () # Loop for covering the entire time-series dataset constructing the # training windows while center + self . batch_size < dim : index = center + self . batch_size indices . append ( center ) indices_m . append ( index ) center += self . skip_size return np . array ( indices ), np . array ( indices_m ) BatchwiseExtrapolation # BatchwiseExtraplation uses a time-series regression model and inputs as generated by MovingWindow to continuously extrapolate a dataset. Attributes: Name Type Description time_id int Examples:: >>> import numpy as np >>> from sklearn.linear_model import LinearRegression >>> model = LinearRegression() >>> op = lambda state: model.predict(state) >>> auxiliary_data = np.random.rand(100, 10) >>> batchwise_extrapolation = BatchwiseExtrapolation(op=op, auxiliary_data=auxiliary_data) >>> init_state = np.random.rand(1, 10, 20) >>> history_size = 3 >>> horizon_size = 2 >>> testing_data_size = 10 >>> extrapolation_dataset = batchwise_extrapolation(init_state, history_size, horizon_size, testing_data_size) >>> extrapolation_dataset.shape Source code in simulai/io.py 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 class BatchwiseExtrapolation : r \"\"\"BatchwiseExtraplation uses a time-series regression model and inputs as generated by MovingWindow to continuously extrapolate a dataset. Attributes: time_id : int Examples:: >>> import numpy as np >>> from sklearn.linear_model import LinearRegression >>> model = LinearRegression() >>> op = lambda state: model.predict(state) >>> auxiliary_data = np.random.rand(100, 10) >>> batchwise_extrapolation = BatchwiseExtrapolation(op=op, auxiliary_data=auxiliary_data) >>> init_state = np.random.rand(1, 10, 20) >>> history_size = 3 >>> horizon_size = 2 >>> testing_data_size = 10 >>> extrapolation_dataset = batchwise_extrapolation(init_state, history_size, horizon_size, testing_data_size) >>> extrapolation_dataset.shape \"\"\" def __init__ ( self , op : callable = None , auxiliary_data : np . ndarray = None ) -> None : self . op = op self . auxiliary_data = auxiliary_data self . time_id = 0 def _simple_extrapolation ( self , extrapolation_dataset : np . ndarray , history_size : int = 0 ) -> np . ndarray : r \"\"\"Given the current extrapolation dataset, use the last history_size number of rows to create the next state of the dataset. Args: extrapolation_dataset (np.ndarray): The current state of the extrapolation dataset. history_size (int, optional): (Default value = 0) Returns: np.ndarray: The next state of the extrapolation dataset. \"\"\" return extrapolation_dataset [ None , - history_size :, :] def _forcing_extrapolation ( self , extrapolation_dataset : np . ndarray , history_size : int = 0 ) -> np . ndarray : return np . hstack ( [ extrapolation_dataset [ - history_size :, :], self . auxiliary_data [ self . time_id - history_size : self . time_id , :], ] )[ None , :, :] def __call__ ( self , init_state : np . ndarray = None , history_size : int = None , horizon_size : int = None , testing_data_size : int = None , ) -> np . ndarray : r \"\"\"A function that performs the extrapolation of the time series. Args: init_state (np.ndarray, optional): initial state of the time series. It should have the shape (batch_size, history_size, n_series) (Default value = None) history_size (int, optional): the size of the history window used in the extrapolation. (Default value = None) horizon_size (int, optional): the size of the horizon window used in the extrapolation. (Default value = None) testing_data_size (int, optional): (Default value = None) Returns: np.ndarray: Note: The number of series in the initial state must be equal to the number of series in the auxiliary data, if it is provided. Example:: >>> model = BatchwiseExtrapolation() #Init state of the time series >>> init_state = np.random.random((1,20,3)) >>> history_size = 10 >>> horizon_size = 5 >>> testing_data_size = 50 #Calling the function >>> output = model(init_state, history_size, horizon_size, testing_data_size) >>> print(output.shape) #(50,3) \"\"\" if isinstance ( self . auxiliary_data , np . ndarray ): n_series = self . auxiliary_data . shape [ - 1 ] else : n_series = 0 current_state = init_state extrapolation_dataset = init_state [ 0 , :, n_series :] self . time_id = history_size if isinstance ( self . auxiliary_data , np . ndarray ): assert ( self . auxiliary_data . shape [ - 1 ] + n_series == init_state . shape [ - 1 ] ), \"Number of series in the initial state must be {} \" . format ( self . auxiliary_data . shape [ - 1 ] ) current_state_constructor = self . _forcing_extrapolation else : current_state_constructor = self . _simple_extrapolation while ( extrapolation_dataset . shape [ 0 ] - history_size + horizon_size <= testing_data_size ): extrapolation = self . op ( current_state ) extrapolation_dataset = np . concatenate ( [ extrapolation_dataset , extrapolation [ 0 ]], 0 ) current_state = current_state_constructor ( extrapolation_dataset , history_size = history_size ) log_str = \"Extrapolation {} \" . format ( self . time_id + 1 - history_size ) sys . stdout . write ( \" \\r \" + log_str ) sys . stdout . flush () self . time_id += horizon_size extrapolation_dataset = extrapolation_dataset [ history_size :, :] return extrapolation_dataset __call__ ( init_state = None , history_size = None , horizon_size = None , testing_data_size = None ) # A function that performs the extrapolation of the time series. Parameters: Name Type Description Default init_state ndarray initial state of the time series. It should have the shape (batch_size, history_size, n_series) (Default value = None) None history_size int the size of the history window used in the extrapolation. (Default value = None) None horizon_size int the size of the horizon window used in the extrapolation. (Default value = None) None testing_data_size int (Default value = None) None Returns: Type Description ndarray np.ndarray: Note The number of series in the initial state must be equal to the number of series in the auxiliary data, if it is provided. Example:: >>> model = BatchwiseExtrapolation() #Init state of the time series >>> init_state = np.random.random((1,20,3)) >>> history_size = 10 >>> horizon_size = 5 >>> testing_data_size = 50 #Calling the function >>> output = model(init_state, history_size, horizon_size, testing_data_size) >>> print(output.shape) #(50,3) Source code in simulai/io.py 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 def __call__ ( self , init_state : np . ndarray = None , history_size : int = None , horizon_size : int = None , testing_data_size : int = None , ) -> np . ndarray : r \"\"\"A function that performs the extrapolation of the time series. Args: init_state (np.ndarray, optional): initial state of the time series. It should have the shape (batch_size, history_size, n_series) (Default value = None) history_size (int, optional): the size of the history window used in the extrapolation. (Default value = None) horizon_size (int, optional): the size of the horizon window used in the extrapolation. (Default value = None) testing_data_size (int, optional): (Default value = None) Returns: np.ndarray: Note: The number of series in the initial state must be equal to the number of series in the auxiliary data, if it is provided. Example:: >>> model = BatchwiseExtrapolation() #Init state of the time series >>> init_state = np.random.random((1,20,3)) >>> history_size = 10 >>> horizon_size = 5 >>> testing_data_size = 50 #Calling the function >>> output = model(init_state, history_size, horizon_size, testing_data_size) >>> print(output.shape) #(50,3) \"\"\" if isinstance ( self . auxiliary_data , np . ndarray ): n_series = self . auxiliary_data . shape [ - 1 ] else : n_series = 0 current_state = init_state extrapolation_dataset = init_state [ 0 , :, n_series :] self . time_id = history_size if isinstance ( self . auxiliary_data , np . ndarray ): assert ( self . auxiliary_data . shape [ - 1 ] + n_series == init_state . shape [ - 1 ] ), \"Number of series in the initial state must be {} \" . format ( self . auxiliary_data . shape [ - 1 ] ) current_state_constructor = self . _forcing_extrapolation else : current_state_constructor = self . _simple_extrapolation while ( extrapolation_dataset . shape [ 0 ] - history_size + horizon_size <= testing_data_size ): extrapolation = self . op ( current_state ) extrapolation_dataset = np . concatenate ( [ extrapolation_dataset , extrapolation [ 0 ]], 0 ) current_state = current_state_constructor ( extrapolation_dataset , history_size = history_size ) log_str = \"Extrapolation {} \" . format ( self . time_id + 1 - history_size ) sys . stdout . write ( \" \\r \" + log_str ) sys . stdout . flush () self . time_id += horizon_size extrapolation_dataset = extrapolation_dataset [ history_size :, :] return extrapolation_dataset BatchCopy # A class for copying data in batches and applying a transformation function. Source code in simulai/io.py 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 class BatchCopy : r \"\"\"A class for copying data in batches and applying a transformation function.\"\"\" def __init__ ( self , channels_last : bool = False ) -> None : self . channels_last = channels_last def _single_copy ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , transformation : callable = lambda data : data , ) -> h5py . Dataset : r \"\"\"Copy data from a single h5py.Dataset to another h5py.Dataset in batches. Args: data (h5py.Dataset, optional): (Default value = None) data_interval (list, optional): The interval of the data to be copied. (Default value = None) batch_size (int, optional): The size of the batch to be copied. (Default value = None) dump_path (str, optional): The path where the new h5py.Dataset will be saved. (Default value = None) transformation (callable, optional): (Default value = lambda data: data) Returns: h5py.Dataset: The new h5py.Dataset after the copy process. Note: - Copy data from data_file.h5/data to data_copy.h5/data with a batch size of 1000: - The input must be an h5py.Dataset. Example:: >>> data = h5py.File(\"data_file.h5\", \"r\") >>> batch_copy = BatchCopy() >>> dset = batch_copy._single_copy(data=data[\"data\"], data_interval=[0, 100000], batch_size=1000, dump_path=\"data_copy.h5\") \"\"\" assert isinstance ( data , h5py . Dataset ), \"The input must be h5py.Dataset\" variables_list = data . dtype . names data_shape = ( data_interval [ 1 ] - data_interval [ 0 ],) + data . shape [ 1 :] data_file = h5py . File ( dump_path , \"w\" ) dtype = [( var , \"<f8\" ) for var in variables_list ] dset = data_file . create_dataset ( \"data\" , shape = data_shape , dtype = dtype ) if isinstance ( batch_size , MemorySizeEval ): n_samples = data_interval [ 1 ] - data_interval [ 0 ] batch_size = batch_size ( max_batches = n_samples , shape = data . shape [ 1 :]) else : pass # Constructing the normalization using the reference data batches = batchdomain_constructor ( data_interval , batch_size ) dset_batches = batchdomain_constructor ([ 0 , dset . shape [ 0 ]], batch_size ) variables_names = data . dtype . names n_variables = len ( data . dtype . names ) for batch_id , ( batch , d_batch ) in enumerate ( zip ( batches , dset_batches )): print ( f \"Copying batch { batch_id + 1 } / { len ( batches ) } batch_size= { batch [ 1 ] - batch [ 0 ] } \" ) # The variables dimension is the last one if self . channels_last : # TODO this is a restrictive way of doing it. It must be more flexible. # .transpose((0, 4, 2, 3, 1)) chunk_data = data [ slice ( * batch )] . view (( float , len ( data . dtype . names ))) # The variables dimension is the second one else : chunk_data = data [ slice ( * batch )] . view (( float , len ( data . dtype . names ))) chunk_data = np . core . records . fromarrays ( np . split ( chunk_data [ ... ], n_variables , axis =- 1 ), names = variables_names , formats = \",\" . join ( len ( variables_names ) * [ \"f8\" ]), ) if len ( chunk_data . shape ) > len ( dset . shape ): chunk_data = np . squeeze ( chunk_data , axis =- 1 ) else : pass dset [ slice ( * d_batch )] = transformation ( chunk_data [ ... ]) return dset def _multiple_copy ( self , data : list = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , transformation : callable = lambda data : data , ) -> h5py . Dataset : r \"\"\"Copy and concatenate multiple h5py.Dataset objects into a single h5py.Dataset object. Args: data (list, optional): A list of h5py.Dataset objects to be concatenated. (Default value = None) data_interval (list, optional): A list of two integers indicating the start and end index of the data to be concatenated. (Default value = None) batch_size (int, optional): The number of samples to be processed at a time. (Default value = None) dump_path (str, optional): The file path where the concatenated h5py.Dataset object will be saved. (Default value = None) transformation (callable, optional): (Default value = lambda data: data) Returns: h5py.Dataset: The concatenated h5py.Dataset object. \"\"\" assert all ( [ isinstance ( di , h5py . Dataset ) for di in data ] ), \"All inputs must be h5py.Dataset\" variables_list = sum ([ list ( di . dtype . names ) for di in data ], []) data_shape = ( data_interval [ 1 ] - data_interval [ 0 ],) + data [ 0 ] . shape [ 1 :] data_file = h5py . File ( dump_path , \"w\" ) dtype = [( var , \"<f8\" ) for var in variables_list ] dset = data_file . create_dataset ( \"data\" , shape = data_shape , dtype = dtype ) if isinstance ( batch_size , MemorySizeEval ): n_samples = data_interval [ 1 ] - data_interval [ 0 ] batch_size = batch_size ( max_batches = n_samples , shape = data . shape [ 1 :]) else : pass # Constructing the normalization using the reference data batches = batchdomain_constructor ( data_interval , batch_size ) dset_batches = batchdomain_constructor ([ 0 , dset . shape [ 0 ]], batch_size ) variables_names = sum ([ list ( di . dtype . names ) for di in data ], []) n_variables = sum ([ len ( di . dtype . names ) for di in data ]) for batch_id , ( batch , d_batch ) in enumerate ( zip ( batches , dset_batches )): print ( f \"Copying and concatenating the batches { batch_id + 1 } / { len ( batches ) } batch_size= { batch [ 1 ] - batch [ 0 ] } \" ) # The variables dimension is the last one if self . channels_last : # TODO this is a restrictive way of doing it. It must be more flexible. chunk_data = np . stack ( [ di [ slice ( * batch )] . view (( float , len ( di . dtype . names ))) . transpose (( 0 , 4 , 2 , 3 , 1 )) for di in data ], axis =- 1 , ) # The variables dimension is the second one else : chunk_data = np . stack ( [ di [ slice ( * batch )] . view (( float , len ( di . dtype . names ))) for di in data ], axis =- 1 , ) chunk_data = np . core . records . fromarrays ( np . split ( chunk_data [ ... ], n_variables , axis =- 1 ), names = variables_names , formats = \",\" . join ( len ( variables_names ) * [ \"f8\" ]), ) if len ( chunk_data . shape ) > len ( dset . shape ): chunk_data = np . squeeze ( chunk_data , axis =- 1 ) else : pass dset [ slice ( * d_batch )] = transformation ( chunk_data [ ... ]) return dset def copy ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , transformation : callable = lambda data : data , ) -> h5py . Dataset : r \"\"\"Copies the data from h5py.Dataset to a new h5py.Dataset file. It allows to apply a transformation function to the data. Args: data (h5py.Dataset, optional): input data to be copied (Default value = None) data_interval (list, optional): the range of the data to be copied (Default value = None) batch_size (int, optional): the size of the batches to be used to copy the data (Default value = None) dump_path (str, optional): the path of the file where the data will be copied (Default value = None) transformation (callable, optional): (Default value = lambda data: data) Returns: h5py.Dataset: The copied data Note: - If the data is a list of h5py.Dataset, it will call the `_multiple_copy` function. Example:: >>> data = h5py.File('data.h5', 'r') >>> data_interval = [0, 100] >>> batch_size = 1000 >>> dump_path = 'copied_data.h5' >>> transformation = lambda x: x*2 >>> copied_data = copy(data, data_interval, batch_size, dump_path, transformation) \"\"\" if isinstance ( data , list ): return self . _multiple_copy ( data = data , data_interval = data_interval , batch_size = batch_size , dump_path = dump_path , transformation = transformation , ) else : return self . _single_copy ( data = data , data_interval = data_interval , batch_size = batch_size , dump_path = dump_path , transformation = transformation , ) copy ( data = None , data_interval = None , batch_size = None , dump_path = None , transformation = lambda : data ) # Copies the data from h5py.Dataset to a new h5py.Dataset file. It allows to apply a transformation function to the data. Parameters: Name Type Description Default data Dataset input data to be copied (Default value = None) None data_interval list the range of the data to be copied (Default value = None) None batch_size int the size of the batches to be used to copy the data (Default value = None) None dump_path str the path of the file where the data will be copied (Default value = None) None transformation callable (Default value = lambda data: data) lambda : data Returns: Type Description Dataset h5py.Dataset: The copied data Note: - If the data is a list of h5py.Dataset, it will call the _multiple_copy function. Example:: >>> data = h5py.File('data.h5', 'r') >>> data_interval = [0, 100] >>> batch_size = 1000 >>> dump_path = 'copied_data.h5' >>> transformation = lambda x: x*2 >>> copied_data = copy(data, data_interval, batch_size, dump_path, transformation) Source code in simulai/io.py 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 def copy ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , transformation : callable = lambda data : data , ) -> h5py . Dataset : r \"\"\"Copies the data from h5py.Dataset to a new h5py.Dataset file. It allows to apply a transformation function to the data. Args: data (h5py.Dataset, optional): input data to be copied (Default value = None) data_interval (list, optional): the range of the data to be copied (Default value = None) batch_size (int, optional): the size of the batches to be used to copy the data (Default value = None) dump_path (str, optional): the path of the file where the data will be copied (Default value = None) transformation (callable, optional): (Default value = lambda data: data) Returns: h5py.Dataset: The copied data Note: - If the data is a list of h5py.Dataset, it will call the `_multiple_copy` function. Example:: >>> data = h5py.File('data.h5', 'r') >>> data_interval = [0, 100] >>> batch_size = 1000 >>> dump_path = 'copied_data.h5' >>> transformation = lambda x: x*2 >>> copied_data = copy(data, data_interval, batch_size, dump_path, transformation) \"\"\" if isinstance ( data , list ): return self . _multiple_copy ( data = data , data_interval = data_interval , batch_size = batch_size , dump_path = dump_path , transformation = transformation , ) else : return self . _single_copy ( data = data , data_interval = data_interval , batch_size = batch_size , dump_path = dump_path , transformation = transformation , ) MakeTensor # This class is used to make torch tensors from numpy arrays or dictionaries. Parameters: Name Type Description Default input_names List [ str ] list of input names. None output_names List [ str ] list of output names. None Note input_tensors will be a list of tensors in case of numpy array and dictionary inputs. The input_data should be numpy array with shape (batch_size, features_size) or dictionary with keys from input_names and values with shape (batch_size, features_size) if input_names and output_names are provided. The input_data will be converted to float32 dtype. The input_data will be put on the device specified by the device parameter, which defaults to 'cpu'. If input_data is None, it will raise an exception. Example:: # Creating a MakeTensor object with input and output names # Converting numpy array to torch tensor # Converting dictionary to torch tensors >>> mt = MakeTensor(input_names=[\"input_1\", \"input_2\"], output_names=[\"output\"]) >>> input_data = np.random.randn(10, 3) >>> input_tensors = mt(input_data) >>> input_data = {\"input_1\": np.random.randn(10, 3), \"input_2\": np.random.randn(10, 4)} >>> input_tensors = mt(input_data) Source code in simulai/io.py 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 class MakeTensor : r \"\"\"This class is used to make torch tensors from numpy arrays or dictionaries. Args: input_names (List[str]): list of input names. output_names (List[str]): list of output names. Note: - input_tensors will be a list of tensors in case of numpy array and dictionary inputs. - The input_data should be numpy array with shape (batch_size, features_size) or dictionary with keys from input_names and values with shape (batch_size, features_size) if input_names and output_names are provided. - The input_data will be converted to float32 dtype. - The input_data will be put on the device specified by the device parameter, which defaults to 'cpu'. - If input_data is None, it will raise an exception. Example:: # Creating a MakeTensor object with input and output names # Converting numpy array to torch tensor # Converting dictionary to torch tensors >>> mt = MakeTensor(input_names=[\"input_1\", \"input_2\"], output_names=[\"output\"]) >>> input_data = np.random.randn(10, 3) >>> input_tensors = mt(input_data) >>> input_data = {\"input_1\": np.random.randn(10, 3), \"input_2\": np.random.randn(10, 4)} >>> input_tensors = mt(input_data) \"\"\" def __init__ ( self , input_names = None , output_names = None ): self . input_names = input_names self . output_names = output_names def _make_tensor ( self , input_data : np . ndarray = None , device : str = \"cpu\" ) -> List [ torch . Tensor ]: r \"\"\"Convert input_data to a list of torch tensors. Args: input_data (np.ndarray, optional): (Default value = None) device (str, optional): (Default value = \"cpu\") Returns: List[torch.Tensor]: list of tensors. \"\"\" inputs_list = list ( torch . split ( input_data , 1 , dim =- 1 )) for vv , var in enumerate ( inputs_list ): var . requires_grad = True var = var . to ( device ) inputs_list [ vv ] = var # var = var[..., None] return inputs_list def _make_tensor_dict ( self , input_data : dict = None , device : str = \"cpu\" ) -> dict : r \"\"\"Convert input_data to a dictionary of torch tensors. Args: input_data (dict, optional): (Default value = None) device (str, optional): (Default value = \"cpu\") Returns: dict: dictionary of tensors. \"\"\" inputs_dict = dict () for key , item in input_data . items (): item . requires_grad = True item = item . to ( device ) inputs_dict [ key ] = item return inputs_dict def __call__ ( self , input_data : Union [ np . ndarray , torch . Tensor , Dict [ str , np . ndarray ]] = None , device : str = \"cpu\" , ) -> List [ torch . Tensor ]: r \"\"\"Make tensors from input_data. Args: input_data (Union[np.ndarray, torch.Tensor, Dict[str, np.ndarray]], optional): input data to be converted. (Default value = None) device (str, optional): (Default value = \"cpu\") Returns: Union[List[torch.Tensor], dict]: Raises: - Exception: \"\"\" if type ( input_data ) == np . ndarray : input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) inputs_list = self . _make_tensor ( input_data = input_data , device = device ) return inputs_list if type ( input_data ) == torch . Tensor : inputs_list = self . _make_tensor ( input_data = input_data , device = device ) return inputs_list elif type ( input_data ) == dict : inputs_list = self . _make_tensor_dict ( input_data = input_data , device = device ) return inputs_list else : raise Exception ( f \"The type { type ( input_data ) } for input_data is not supported.\" ) __call__ ( input_data = None , device = 'cpu' ) # Make tensors from input_data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor , Dict [ str , ndarray ]] input data to be converted. (Default value = None) None device str (Default value = \"cpu\") 'cpu' Returns: Type Description List [ Tensor ] Union[List[torch.Tensor], dict]: Raises: Type Description - Exception Source code in simulai/io.py 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 def __call__ ( self , input_data : Union [ np . ndarray , torch . Tensor , Dict [ str , np . ndarray ]] = None , device : str = \"cpu\" , ) -> List [ torch . Tensor ]: r \"\"\"Make tensors from input_data. Args: input_data (Union[np.ndarray, torch.Tensor, Dict[str, np.ndarray]], optional): input data to be converted. (Default value = None) device (str, optional): (Default value = \"cpu\") Returns: Union[List[torch.Tensor], dict]: Raises: - Exception: \"\"\" if type ( input_data ) == np . ndarray : input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) inputs_list = self . _make_tensor ( input_data = input_data , device = device ) return inputs_list if type ( input_data ) == torch . Tensor : inputs_list = self . _make_tensor ( input_data = input_data , device = device ) return inputs_list elif type ( input_data ) == dict : inputs_list = self . _make_tensor_dict ( input_data = input_data , device = device ) return inputs_list else : raise Exception ( f \"The type { type ( input_data ) } for input_data is not supported.\" ) GaussianNoise # Bases: Dataset GaussianNoise(stddev=0.01, input_data=None) A dataset that applies Gaussian noise to input data. Example:: >>> import numpy as np >>> input_data = np.random.rand(100,100) >>> dataset = GaussianNoise(stddev=0.05, input_data=input_data) >>> dataset.size() (100, 100) Source code in simulai/io.py 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 class GaussianNoise ( Dataset ): r \"\"\"GaussianNoise(stddev=0.01, input_data=None) A dataset that applies Gaussian noise to input data. Example:: >>> import numpy as np >>> input_data = np.random.rand(100,100) >>> dataset = GaussianNoise(stddev=0.05, input_data=input_data) >>> dataset.size() (100, 100) \"\"\" def __init__ ( self , stddev : float = 0.01 , input_data : Union [ np . ndarray , Tensor ] = None ): super ( Dataset , self ) . __init__ () self . stddev = stddev if isinstance ( input_data , np . ndarray ): input_data_ = torch . from_numpy ( input_data . astype ( \"float32\" )) else : input_data_ = input_data self . input_data = input_data_ self . data_shape = tuple ( self . input_data . shape ) def size ( self ): return self . data_shape def __call__ ( self ): return ( 1 + self . stddev * torch . randn ( * self . data_shape )) * self . input_data Tokenizer # Wrapper for multiple tokenization approaches Source code in simulai/io.py 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 class Tokenizer : \"\"\"Wrapper for multiple tokenization approaches\"\"\" def __init__ ( self , kind : str = \"time_indexer\" ): \"\"\" Args: kind (str): The kind of tokenization to be used. (Default value = \"time_indexer\") \"\"\" self . kind = kind # Tokenizer selection if self . kind == \"time_indexer\" : self . input_tokenizer = self . _make_time_input_sequence self . target_tokenizer = self . _make_time_target_sequence else : raise Exception ( f \"The tokenization option { self . kind } is not available.\" ) def generate_input_tokens ( self , input_data : Union [ np . ndarray , torch . Tensor ], ** kwargs ) -> torch . Tensor : \"\"\"Generating the input sequence of tokens.\"\"\" return self . input_tokenizer ( input_data , ** kwargs ) def generate_target_tokens ( self , target_data : Union [ np . ndarray , torch . Tensor ], ** kwargs ) -> torch . Tensor : \"\"\"Generating the target sequence of tokens.\"\"\" return self . target_tokenizer ( target_data , ** kwargs ) def _make_time_input_sequence ( self , src : Union [ np . ndarray , torch . Tensor ], num_step : int = None , step : float = None ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\"Simple tokenization based on repeating samples and time-indexing them. Args: src (Union[np.ndarray, torch.Tensor]): The dataset to be tokenized. num_step (int): number of timesteps for each batch. (Default value: None) step (float): Size of the timestep. (Default value: None) Returns: Union[np.ndarray, torch.Tensor]: The tokenized input dataset. \"\"\" dim = num_step src = np . repeat ( np . expand_dims ( src , axis = 1 ), dim , axis = 1 ) src_shape = src . shape src_shape_list = list ( src_shape ) src_shape_list [ - 1 ] += 1 src_final = np . zeros ( tuple ( src_shape_list )) src_final [:, :, : - 1 ] = src for i in range ( num_step ): src_final [:, i , - 1 ] += step * i return src_final [: - num_step + 1 ] def _make_time_target_sequence ( self , src : Union [ np . ndarray , torch . Tensor ], num_step : int = None ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\"Simple tokenization based on repeating samples and time-indexing them. Args: src (Union[np.ndarray, torch.Tensor]): The dataset to be tokenized. num_step (int): number of timesteps for each batch. (Default value: None) Returns: Union[np.ndarray, torch.Tensor]: The tokenized target dataset. \"\"\" moving_window = MovingWindow ( history_size = 1 , skip_size = 1 , horizon_size = num_step - 1 ) input_data , output_data = moving_window ( input_data = src , output_data = src ) return np . concatenate ([ input_data , output_data ], axis = 1 ) __init__ ( kind = 'time_indexer' ) # Parameters: Name Type Description Default kind str The kind of tokenization to be used. (Default value = \"time_indexer\") 'time_indexer' Source code in simulai/io.py 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 def __init__ ( self , kind : str = \"time_indexer\" ): \"\"\" Args: kind (str): The kind of tokenization to be used. (Default value = \"time_indexer\") \"\"\" self . kind = kind # Tokenizer selection if self . kind == \"time_indexer\" : self . input_tokenizer = self . _make_time_input_sequence self . target_tokenizer = self . _make_time_target_sequence else : raise Exception ( f \"The tokenization option { self . kind } is not available.\" ) generate_input_tokens ( input_data , ** kwargs ) # Generating the input sequence of tokens. Source code in simulai/io.py 1810 1811 1812 1813 1814 def generate_input_tokens ( self , input_data : Union [ np . ndarray , torch . Tensor ], ** kwargs ) -> torch . Tensor : \"\"\"Generating the input sequence of tokens.\"\"\" return self . input_tokenizer ( input_data , ** kwargs ) generate_target_tokens ( target_data , ** kwargs ) # Generating the target sequence of tokens. Source code in simulai/io.py 1816 1817 1818 1819 1820 def generate_target_tokens ( self , target_data : Union [ np . ndarray , torch . Tensor ], ** kwargs ) -> torch . Tensor : \"\"\"Generating the target sequence of tokens.\"\"\" return self . target_tokenizer ( target_data , ** kwargs )","title":"simulai.io"},{"location":"simulai_io/#simulaiio","text":"","title":"simulai.io"},{"location":"simulai_io/#bypasspreparer","text":"Bases: DataPreparer ByPass class, it fills the DataPreparer blank, but does nothing. Source code in simulai/io.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 class ByPassPreparer ( DataPreparer ): \"\"\"ByPass class, it fills the DataPreparer blank, but does nothing.\"\"\" name = \"no_preparer\" def __init__ ( self , channels_last : bool = False ) -> None : super () . __init__ () self . channels_last = channels_last self . collapsible_shapes = None self . dtype = None def prepare_input_data ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Prepare input data. Args: data (np.ndarray): Returns: numpy.ndarray: Example:: >>> import numpy as np >>> data = np.random.rand(5, 3, 4, 2) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_input_data(data) >>> prepared_data.shape (5, 3, 4, 2) \"\"\" self . collapsible_shapes = data . shape [ 1 :] return data def prepare_output_data ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Prepare output data. Args: data (np.ndarray): Returns: numpy.ndarray: The output data in the original format Example:: >>> import numpy as np >>> data = np.random.rand(5, 3) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_output_data(data) >>> prepared_data.shape (5, 3) \"\"\" return data def prepare_input_structured_data ( self , data : np . recarray ) -> np . ndarray : \"\"\"Prepare structured input data by converting it to an ndarray. Args: data (np.recarray): Returns: np.ndarray: numpy ndarray version of the input data. Note: This function is used when the input data is in the form of a structured array and needs to be converted to a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('a', int), ('b', '|S1'), ('c', float)]) >>> preparer = ByPassPreparer() >>> preparer.prepare_input_structured_data(data) array([[1, 'a', 0.5], [2, 'b', 0.6]]) \"\"\" return data def prepare_output_structured_data ( self , data : np . ndarray ) -> np . recarray : \"\"\"Prepare structured output data by converting it to a recarray. Args: data (np.ndarray): Returns: np.recarray: numpy recarray version of the output data. Note: This function is used when the output data needs to be in the form of a structured array and is currently in the form of a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([[1, 'a', 0.5], [2, 'b', 0.6]]) >>> preparer = ByPassPreparer() >>> preparer.prepare_output_structured_data(data) rec.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('f0', '<i4'), ('f1', 'S1'), ('f2', '<f8')]) \"\"\" return data","title":"ByPassPreparer"},{"location":"simulai_io/#simulai.io.ByPassPreparer.prepare_input_data","text":"Prepare input data. Parameters: Name Type Description Default data ndarray required Returns: Type Description ndarray numpy.ndarray: Example:: >>> import numpy as np >>> data = np.random.rand(5, 3, 4, 2) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_input_data(data) >>> prepared_data.shape (5, 3, 4, 2) Source code in simulai/io.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def prepare_input_data ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Prepare input data. Args: data (np.ndarray): Returns: numpy.ndarray: Example:: >>> import numpy as np >>> data = np.random.rand(5, 3, 4, 2) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_input_data(data) >>> prepared_data.shape (5, 3, 4, 2) \"\"\" self . collapsible_shapes = data . shape [ 1 :] return data","title":"prepare_input_data()"},{"location":"simulai_io/#simulai.io.ByPassPreparer.prepare_input_structured_data","text":"Prepare structured input data by converting it to an ndarray. Parameters: Name Type Description Default data recarray required Returns: Type Description ndarray np.ndarray: numpy ndarray version of the input data. Note This function is used when the input data is in the form of a structured array and needs to be converted to a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('a', int), ('b', '|S1'), ('c', float)]) >>> preparer = ByPassPreparer() >>> preparer.prepare_input_structured_data(data) array([[1, 'a', 0.5], [2, 'b', 0.6]]) Source code in simulai/io.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def prepare_input_structured_data ( self , data : np . recarray ) -> np . ndarray : \"\"\"Prepare structured input data by converting it to an ndarray. Args: data (np.recarray): Returns: np.ndarray: numpy ndarray version of the input data. Note: This function is used when the input data is in the form of a structured array and needs to be converted to a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('a', int), ('b', '|S1'), ('c', float)]) >>> preparer = ByPassPreparer() >>> preparer.prepare_input_structured_data(data) array([[1, 'a', 0.5], [2, 'b', 0.6]]) \"\"\" return data","title":"prepare_input_structured_data()"},{"location":"simulai_io/#simulai.io.ByPassPreparer.prepare_output_data","text":"Prepare output data. Parameters: Name Type Description Default data ndarray required Returns: Type Description ndarray numpy.ndarray: The output data in the original format Example:: >>> import numpy as np >>> data = np.random.rand(5, 3) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_output_data(data) >>> prepared_data.shape (5, 3) Source code in simulai/io.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def prepare_output_data ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Prepare output data. Args: data (np.ndarray): Returns: numpy.ndarray: The output data in the original format Example:: >>> import numpy as np >>> data = np.random.rand(5, 3) >>> preparer = ByPassPreparer() >>> prepared_data = preparer.prepare_output_data(data) >>> prepared_data.shape (5, 3) \"\"\" return data","title":"prepare_output_data()"},{"location":"simulai_io/#simulai.io.ByPassPreparer.prepare_output_structured_data","text":"Prepare structured output data by converting it to a recarray. Parameters: Name Type Description Default data ndarray required Returns: Type Description recarray np.recarray: numpy recarray version of the output data. Note This function is used when the output data needs to be in the form of a structured array and is currently in the form of a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([[1, 'a', 0.5], [2, 'b', 0.6]]) >>> preparer = ByPassPreparer() >>> preparer.prepare_output_structured_data(data) rec.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('f0', '<i4'), ('f1', 'S1'), ('f2', '<f8')]) Source code in simulai/io.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def prepare_output_structured_data ( self , data : np . ndarray ) -> np . recarray : \"\"\"Prepare structured output data by converting it to a recarray. Args: data (np.ndarray): Returns: np.recarray: numpy recarray version of the output data. Note: This function is used when the output data needs to be in the form of a structured array and is currently in the form of a regular numpy ndarray. Example:: >>> import numpy as np >>> data = np.array([[1, 'a', 0.5], [2, 'b', 0.6]]) >>> preparer = ByPassPreparer() >>> preparer.prepare_output_structured_data(data) rec.array([(1, 'a', 0.5), (2, 'b', 0.6)], dtype=[('f0', '<i4'), ('f1', 'S1'), ('f2', '<f8')]) \"\"\" return data","title":"prepare_output_structured_data()"},{"location":"simulai_io/#reshaper","text":"Bases: DataPreparer Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm)) Source code in simulai/io.py 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 class Reshaper ( DataPreparer ): \"\"\"Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm))\"\"\" name = \"reshaper\" def __init__ ( self , channels_last : bool = False ) -> None : super () . __init__ () self . channels_last = channels_last self . collapsible_shapes = None self . collapsed_shape = None self . dtype = None self . n_features = None def _set_shapes_from_data ( self , data : np . ndarray = None ) -> None : \"\"\" Args: data (np.ndarray, optional): The input data to reshape. (Default value = None) Example:: >>> reshaper = Reshaper() >>> reshaper._set_shapes_from_data(np.random.random((10,3,4,5))) >>> reshaper.collapsible_shapes (3, 4, 5) \"\"\" self . collapsible_shapes = data . shape [ 1 :] self . collapsed_shape = np . prod ( self . collapsible_shapes ) . astype ( int ) self . _is_recarray = data . dtype . names is not None if self . _is_recarray : self . n_features = len ( data . dtype . names ) * self . collapsed_shape else : self . n_features = self . collapsed_shape def _prepare_input_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\" Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: This function reshapes the input data to (n0, prod(n1, ..., nm)) shape. Example:: >>> reshaper = Reshaper() >>> data = np.random.random((10,3,4,5)) >>> reshaper.prepare_input_data(data) array([[0.527, 0.936, ... , 0.812], [0.947, 0.865, ... , 0.947], ..., [0.865, 0.947, ... , 0.865], [0.947, 0.865, ... , 0.947]]) \"\"\" assert len ( data . shape ) > 1 , \"Error! data must have at least two dimensions\" return data . reshape (( data . shape [ 0 ], self . n_features )) def prepare_input_data ( self , data : Union [ np . ndarray , np . recarray ]) -> np . ndarray : \"\"\"Prepare input data for reshaping. Args: data (Union[np.ndarray, np.recarray]): Returns: np.ndarray: Note: - If `data` is a structured numpy array, it will be passed to `_prepare_input_structured_data` function. - If `data` is a plain numpy array, it will be passed to `_prepare_input_data` function. Example:: >>> reshaper = Reshaper() >>> input_data = np.random.rand(2, 3, 4) >>> reshaper.prepare_input_data(input_data) array([[ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...]]) \"\"\" self . _set_shapes_from_data ( data ) if self . _is_recarray : return self . _prepare_input_structured_data ( data ) else : return self . _prepare_input_data ( data ) def _reshape_to_output ( self , data : np . ndarray ) -> np . ndarray : \"\"\"Reshape the data to its original shape before reshaping. Args: data (np.ndarray): Returns: np.ndarray: Note: The original shape of the data is stored in `collapsible_shapes` attribute. Example:: >>> reshaper = Reshaper() >>> input_data = np.random.rand(2, 3, 4) >>> reshaper._set_shapes_from_data(input_data) >>> reshaped_data = reshaper._reshape_to_output(input_data.flatten()) >>> reshaped_data.shape (2, 3, 4) \"\"\" return data . reshape (( data . shape [ 0 ],) + self . collapsible_shapes ) def _prepare_output_data ( self , data : np . ndarray = None , single : bool = False ) -> np . ndarray : \"\"\"Prepare the input data to be in the shape and format expected by the model. Args: data (np.ndarray, optional): The input data to be prepared, by default None single (bool, optional): (Default value = False) Returns: np.ndarray: The prepared input data \"\"\" if self . _is_recarray : return self . _prepare_output_structured_data ( data ) else : return self . _reshape_to_output ( data ) def prepare_output_data ( self , data : np . ndarray , single : bool = False ) -> np . ndarray : \"\"\"Prepare the input data to be in the shape and format expected by the model. Args: data (np.ndarray): The input data to be prepared single (bool, optional): (Default value = False) Returns: np.ndarray: The prepared input data \"\"\" return self . _prepare_output_data ( data ) def _prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"Prepare the input structured data to be in the shape and format expected by the model. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: The prepared input structured data \"\"\" self . dtype = data . dtype self . _set_shapes_from_data ( data ) data_ = recfunctions . structured_to_unstructured ( data ) reshaped_data_ = self . _prepare_input_data ( data_ ) return reshaped_data_ def prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"Prepare the input structured data to be in the shape and format expected by the model. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: The prepared input structured data \"\"\" return self . _prepare_input_structured_data ( data ) def prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . recarray : \"\"\"Prepare the output data to be in the shape and format expected by the user. Args: data (np.ndarray, optional): (Default value = None) Returns: np.recarray: The prepared output structured data \"\"\" return self . _prepare_output_structured_data ( data ) def _prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . recarray : \"\"\"Prepare the output data to be in the shape and format expected by the user. Args: data (np.ndarray, optional): (Default value = None) Returns: np.recarray: The prepared output structured data \"\"\" data = data . reshape ( ( data . shape [ 0 ],) + self . collapsible_shapes + ( len ( self . dtype ),) ) output_data = recfunctions . unstructured_to_structured ( data , self . dtype ) output_data = self . _reshape_to_output ( output_data ) return output_data","title":"Reshaper"},{"location":"simulai_io/#simulai.io.Reshaper.prepare_input_data","text":"Prepare input data for reshaping. Parameters: Name Type Description Default data Union [ ndarray , recarray ] required Returns: Type Description ndarray np.ndarray: Note If data is a structured numpy array, it will be passed to _prepare_input_structured_data function. If data is a plain numpy array, it will be passed to _prepare_input_data function. Example:: >>> reshaper = Reshaper() >>> input_data = np.random.rand(2, 3, 4) >>> reshaper.prepare_input_data(input_data) array([[ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...]]) Source code in simulai/io.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def prepare_input_data ( self , data : Union [ np . ndarray , np . recarray ]) -> np . ndarray : \"\"\"Prepare input data for reshaping. Args: data (Union[np.ndarray, np.recarray]): Returns: np.ndarray: Note: - If `data` is a structured numpy array, it will be passed to `_prepare_input_structured_data` function. - If `data` is a plain numpy array, it will be passed to `_prepare_input_data` function. Example:: >>> reshaper = Reshaper() >>> input_data = np.random.rand(2, 3, 4) >>> reshaper.prepare_input_data(input_data) array([[ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.948..., 0.276..., 0.967..., 0.564...], [ 0.276..., 0.948..., 0.564..., 0.967...], [ 0.276..., 0.948..., 0.564..., 0.967...]]) \"\"\" self . _set_shapes_from_data ( data ) if self . _is_recarray : return self . _prepare_input_structured_data ( data ) else : return self . _prepare_input_data ( data )","title":"prepare_input_data()"},{"location":"simulai_io/#simulai.io.Reshaper.prepare_input_structured_data","text":"Prepare the input structured data to be in the shape and format expected by the model. Parameters: Name Type Description Default data recarray (Default value = None) None Returns: Type Description ndarray np.ndarray: The prepared input structured data Source code in simulai/io.py 297 298 299 300 301 302 303 304 305 306 307 def prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"Prepare the input structured data to be in the shape and format expected by the model. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: The prepared input structured data \"\"\" return self . _prepare_input_structured_data ( data )","title":"prepare_input_structured_data()"},{"location":"simulai_io/#simulai.io.Reshaper.prepare_output_data","text":"Prepare the input data to be in the shape and format expected by the model. Parameters: Name Type Description Default data ndarray The input data to be prepared required single bool (Default value = False) False Returns: Type Description ndarray np.ndarray: The prepared input data Source code in simulai/io.py 268 269 270 271 272 273 274 275 276 277 278 279 def prepare_output_data ( self , data : np . ndarray , single : bool = False ) -> np . ndarray : \"\"\"Prepare the input data to be in the shape and format expected by the model. Args: data (np.ndarray): The input data to be prepared single (bool, optional): (Default value = False) Returns: np.ndarray: The prepared input data \"\"\" return self . _prepare_output_data ( data )","title":"prepare_output_data()"},{"location":"simulai_io/#simulai.io.Reshaper.prepare_output_structured_data","text":"Prepare the output data to be in the shape and format expected by the user. Parameters: Name Type Description Default data ndarray (Default value = None) None Returns: Type Description recarray np.recarray: The prepared output structured data Source code in simulai/io.py 309 310 311 312 313 314 315 316 317 318 319 def prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . recarray : \"\"\"Prepare the output data to be in the shape and format expected by the user. Args: data (np.ndarray, optional): (Default value = None) Returns: np.recarray: The prepared output structured data \"\"\" return self . _prepare_output_structured_data ( data )","title":"prepare_output_structured_data()"},{"location":"simulai_io/#scalerreshaper","text":"Bases: Reshaper ScalerReshaper is a class that inherits from the Reshaper class and performs additional scaling on the input data. Source code in simulai/io.pyclass ScalerReshaper ( Reshaper ): \"\"\"ScalerReshaper is a class that inherits from the Reshaper class and performs additional scaling on the input data.\"\"\" name = \"scalerreshaper\" def __init__ ( self , bias : float = 0.0 , scale : float = 1.0 , channels_last : bool = False ) -> None : \"\"\"Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm)) Args: bias (float, optional): (Default value = 0.0) scale (float, optional): (Default value = 1.0) channels_last (bool, optional): (Default value = False) \"\"\" super () . __init__ ( channels_last = channels_last ) self . bias = bias self . scale = scale def prepare_input_data ( self , data : Union [ np . ndarray , np . recarray ] = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Prepare the input data by subtracting the bias and scaling the data. Args: data (Union[np.ndarray, np.recarray], optional): The input data to be prepared (Default value = None) *args: **kwargs: Returns: np.ndarray: The prepared input data Note: If the input data is a structured array, the method 'prepare_input_structured_data' will be called instead. Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_input_data(np.array([1, 2, 3])) array([-4.5, -3.5, -2.5]) \"\"\" if data . dtype . names is None : return super ( ScalerReshaper , self ) . prepare_input_data ( ( data - self . bias ) / self . scale , * args , ** kwargs ) else : return self . prepare_input_structured_data ( data , * args , ** kwargs ) def prepare_output_data ( self , data : Union [ np . ndarray , np . recarray ] = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Prepare the output data by scaling it and adding the bias. Args: data (Union[np.ndarray, np.recarray], optional): The output data to be prepared (Default value = None) *args: **kwargs Returns: np.ndarray: The prepared output data Note: If the input data is a structured array, the method 'prepare_output_structured_data' will be called Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_output_data(np.array([1, 2, 3])) array([12., 14., 16.]) \"\"\" if not self . _is_recarray : return super ( ScalerReshaper , self ) . prepare_output_data ( data * self . scale + self . bias , * args , ** kwargs ) else : return self . prepare_output_structured_data ( data ) def _get_structured_bias_scale ( self , dtype : np . dtype = None ) -> Tuple [ dict , dict ]: \"\"\"Get the bias and scale values for each field of a structured array. Args: dtype (np.dtype, optional): (Default value = None) Returns: Tuple[dict, dict]: A tuple of two dictionaries, the first containing the bias values for each field and the second Note: If the bias and scale attributes are floats, they will be used for all fields. Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper._get_structured_bias_scale(np.dtype([('a', float), ('b', float)])) ({'a': 10, 'b': 10}, {'a': 2, 'b': 2}) \"\"\" bias = self . bias if isinstance ( self . bias , float ): bias = { n : self . bias for n in dtype . names } scale = self . scale if isinstance ( self . scale , float ): scale = { n : self . scale for n in dtype . names } return bias , scale def prepare_input_structured_data ( self , data : np . recarray = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Scale and reshape structured data (np.recarray) before passing it to the next layer. Args: data (np.recarray, optional): structured data to be transformed (Default value = None) *args (Additional arguments passed to the parent class): **kwargs Returns: np.ndarray: Note: The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[(\"a\", int), (\"b\", int), (\"c\", int)]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_input_structured_data(data) array([[-0.5, 0.33333333, 0.75 ], [ 1.5, 1.66666667, 2. ]]) \"\"\" bias , scale = self . _get_structured_bias_scale ( data . dtype ) data = data . copy () names = data . dtype . names for name in names : data [ name ] = ( data [ name ] - bias [ name ]) / scale [ name ] return super ( ScalerReshaper , self ) . prepare_input_structured_data ( data , * args , ** kwargs ) def prepare_output_structured_data ( self , data : np . ndarray = None , * args , ** kwargs ) -> np . recarray : \"\"\"Scale and reshape structured data (np.recarray) before passing it to the next layer. Args: data (np.ndarray, optional): structured data to be transformed (Default value = None) *args (Additional arguments passed to the parent class): **kwargs: Returns: np.recarray: Note: - The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([[-0.5, 0.33333333, 0.75 ], >>> [ 1.5, 1.66666667, 2. ]]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_output_structured_data(data) rec.array([(0., 2., 6.), (6., 8., 12.)], dtype=[('a', '<f8'), ('b', '<f8'), ('c', '<f8')]) \"\"\" bias , scale = self . _get_structured_bias_scale ( self . dtype ) data = super ( ScalerReshaper , self ) . prepare_output_structured_data ( data , * args , ** kwargs ) data = data . copy () for name in self . dtype . names : data [ name ] = data [ name ] * scale [ name ] + bias [ name ] return data","title":"ScalerReshaper"},{"location":"simulai_io/#simulai.io.ScalerReshaper.__init__","text":"Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm)) Parameters: Name Type Description Default bias float (Default value = 0.0) 0.0 scale float (Default value = 1.0) 1.0 channels_last bool (Default value = False) False Source code in simulai/io.py 345 346 347 348 349 350 351 352 353 354 355 356 357 358 def __init__ ( self , bias : float = 0.0 , scale : float = 1.0 , channels_last : bool = False ) -> None : \"\"\"Reshaper converts n-dimensional arrays to two-dimensional ones, performing a simple reshaping operation F: (n0, n1, ..., nm) -> (n0, prod(n1, ..., nm)) Args: bias (float, optional): (Default value = 0.0) scale (float, optional): (Default value = 1.0) channels_last (bool, optional): (Default value = False) \"\"\" super () . __init__ ( channels_last = channels_last ) self . bias = bias self . scale = scale","title":"__init__()"},{"location":"simulai_io/#simulai.io.ScalerReshaper.prepare_input_data","text":"Prepare the input data by subtracting the bias and scaling the data. Parameters: Name Type Description Default data Union [ ndarray , recarray ] The input data to be prepared (Default value = None) None *args () **kwargs {} Returns: Type Description ndarray np.ndarray: The prepared input data Note If the input data is a structured array, the method 'prepare_input_structured_data' will be called instead. Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_input_data(np.array([1, 2, 3])) array([-4.5, -3.5, -2.5]) Source code in simulai/io.py 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 def prepare_input_data ( self , data : Union [ np . ndarray , np . recarray ] = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Prepare the input data by subtracting the bias and scaling the data. Args: data (Union[np.ndarray, np.recarray], optional): The input data to be prepared (Default value = None) *args: **kwargs: Returns: np.ndarray: The prepared input data Note: If the input data is a structured array, the method 'prepare_input_structured_data' will be called instead. Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_input_data(np.array([1, 2, 3])) array([-4.5, -3.5, -2.5]) \"\"\" if data . dtype . names is None : return super ( ScalerReshaper , self ) . prepare_input_data ( ( data - self . bias ) / self . scale , * args , ** kwargs ) else : return self . prepare_input_structured_data ( data , * args , ** kwargs )","title":"prepare_input_data()"},{"location":"simulai_io/#simulai.io.ScalerReshaper.prepare_input_structured_data","text":"Scale and reshape structured data (np.recarray) before passing it to the next layer. Parameters: Name Type Description Default data recarray structured data to be transformed (Default value = None) None *args Additional arguments passed to the parent class () Returns: Type Description ndarray np.ndarray: Note The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[(\"a\", int), (\"b\", int), (\"c\", int)]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_input_structured_data(data) array([[-0.5, 0.33333333, 0.75 ], [ 1.5, 1.66666667, 2. ]]) Source code in simulai/io.py 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 def prepare_input_structured_data ( self , data : np . recarray = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Scale and reshape structured data (np.recarray) before passing it to the next layer. Args: data (np.recarray, optional): structured data to be transformed (Default value = None) *args (Additional arguments passed to the parent class): **kwargs Returns: np.ndarray: Note: The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[(\"a\", int), (\"b\", int), (\"c\", int)]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_input_structured_data(data) array([[-0.5, 0.33333333, 0.75 ], [ 1.5, 1.66666667, 2. ]]) \"\"\" bias , scale = self . _get_structured_bias_scale ( data . dtype ) data = data . copy () names = data . dtype . names for name in names : data [ name ] = ( data [ name ] - bias [ name ]) / scale [ name ] return super ( ScalerReshaper , self ) . prepare_input_structured_data ( data , * args , ** kwargs )","title":"prepare_input_structured_data()"},{"location":"simulai_io/#simulai.io.ScalerReshaper.prepare_output_data","text":"Prepare the output data by scaling it and adding the bias. Parameters: Name Type Description Default data Union [ ndarray , recarray ] The output data to be prepared (Default value = None) None *args () Returns: Type Description ndarray np.ndarray: The prepared output data Note If the input data is a structured array, the method 'prepare_output_structured_data' will be called Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_output_data(np.array([1, 2, 3])) array([12., 14., 16.]) Source code in simulai/io.py 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 def prepare_output_data ( self , data : Union [ np . ndarray , np . recarray ] = None , * args , ** kwargs ) -> np . ndarray : \"\"\"Prepare the output data by scaling it and adding the bias. Args: data (Union[np.ndarray, np.recarray], optional): The output data to be prepared (Default value = None) *args: **kwargs Returns: np.ndarray: The prepared output data Note: If the input data is a structured array, the method 'prepare_output_structured_data' will be called Example:: >>> reshaper = ScalerReshaper(bias=10, scale=2) >>> reshaper.prepare_output_data(np.array([1, 2, 3])) array([12., 14., 16.]) \"\"\" if not self . _is_recarray : return super ( ScalerReshaper , self ) . prepare_output_data ( data * self . scale + self . bias , * args , ** kwargs ) else : return self . prepare_output_structured_data ( data )","title":"prepare_output_data()"},{"location":"simulai_io/#simulai.io.ScalerReshaper.prepare_output_structured_data","text":"Scale and reshape structured data (np.recarray) before passing it to the next layer. Parameters: Name Type Description Default data ndarray structured data to be transformed (Default value = None) None *args Additional arguments passed to the parent class () **kwargs {} Returns: Type Description recarray np.recarray: Note The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([[-0.5, 0.33333333, 0.75 ], >>> [ 1.5, 1.66666667, 2. ]]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_output_structured_data(data) rec.array([(0., 2., 6.), (6., 8., 12.)], dtype=[('a', '<f8'), ('b', '<f8'), ('c', '<f8')]) Source code in simulai/io.py 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 def prepare_output_structured_data ( self , data : np . ndarray = None , * args , ** kwargs ) -> np . recarray : \"\"\"Scale and reshape structured data (np.recarray) before passing it to the next layer. Args: data (np.ndarray, optional): structured data to be transformed (Default value = None) *args (Additional arguments passed to the parent class): **kwargs: Returns: np.recarray: Note: - The bias and scale parameters are expected to be provided in the form of dictionaries, where keys are field names and values are the corresponding bias and scale values for those fields. Example:: >>> data = np.array([[-0.5, 0.33333333, 0.75 ], >>> [ 1.5, 1.66666667, 2. ]]) >>> reshaper = ScalerReshaper(bias={'a': 1, 'b': 2, 'c': 3}, scale={'a': 2, 'b': 3, 'c': 4}) >>> reshaper.prepare_output_structured_data(data) rec.array([(0., 2., 6.), (6., 8., 12.)], dtype=[('a', '<f8'), ('b', '<f8'), ('c', '<f8')]) \"\"\" bias , scale = self . _get_structured_bias_scale ( self . dtype ) data = super ( ScalerReshaper , self ) . prepare_output_structured_data ( data , * args , ** kwargs ) data = data . copy () for name in self . dtype . names : data [ name ] = data [ name ] * scale [ name ] + bias [ name ] return data","title":"prepare_output_structured_data()"},{"location":"simulai_io/#mapvalid","text":"Bases: Reshaper MapValid is a reshaper class that converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) where n_valids is the number of valid elements in the data array. This class is useful for datasets in which there are invalid data. Source code in simulai/io.pyclass MapValid ( Reshaper ): \"\"\"MapValid is a reshaper class that converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) where n_valids is the number of valid elements in the data array. This class is useful for datasets in which there are invalid data. \"\"\" name = \"map_valid\" def __init__ ( self , config : dict = None , mask = None , channels_last : bool = True ) -> None : \"\"\"Initialize the MapValid class with the configurations and mask passed as parameters. Args: config (dict, optional): configurations dictionary, by default None mask (int, np.NaN, np.inf, optional, optional): mask to select the invalid values, by default None channels_last (bool, optional): if set to True, move the channel dimension to the last, by default True \"\"\" super () . __init__ () self . default_dtype = \"float64\" if mask == 0 or isinstance ( mask , int ): self . replace_mask_with_large_number = False else : self . replace_mask_with_large_number = True self . return_the_same_mask = True for key , value in config . items (): setattr ( self , key , value ) # Default value for very large numbers self . large_number = 1e15 if not mask or self . replace_mask_with_large_number : self . mask = self . large_number else : self . mask = mask self . mask_ = mask for key , value in config . items (): setattr ( self , key , value ) self . valid_indices = None self . original_dimensions = None self . channels_last = channels_last def prepare_input_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"Internal input data preparer, executed for each label of the structured array Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: - MapValid converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) n_valids = dim([k in data[0, ...] if k != mask]) - WARNING: the invalid positions are expected to be static in relation to n0. Example:: >>> data = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) >>> prepare_input_data(data) array([[1, 2, 3], [5, 6, 7], [9, 10, 11]]) \"\"\" data = super ( MapValid , self ) . prepare_input_data ( data ) if self . mask == self . large_number : self . valid_indices_ = np . where ( data [ 0 , ... ] < self . mask ) elif not str ( self . mask ) . isnumeric () or isinstance ( self . mask , int ): self . valid_indices_ = np . where ( data [ 0 , ... ] != self . mask ) else : raise Exception ( \"The chosen mask {} does not fit in any supported case\" . format ( self . mask ) ) samples_dim = data . shape [ 0 ] valid_indices = ( slice ( 0 , samples_dim ),) + self . valid_indices_ return data [ valid_indices ] def prepare_output_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"Prepare output data for the MapValid operation. Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: - The reshaped data will have shape (n0, n_valids) where n0 is the number of samples and n_valids are the number of valid values in the data. - If the return_the_same_mask attribute is set to True, the mask used to select the invalid values will be returned. Otherwise, the reshaped data will be filled with NaN. Example:: >>> import numpy as np >>> reshaper = MapValid() >>> data = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) >>> reshaper.prepare_output_data(data) array([[[ 1., 2., 3.], [ 4., 5., 6.]], \"\"\" immutable_shape = data . shape [ 0 ] final_shape = ( immutable_shape , self . n_features , ) if self . return_the_same_mask : mask = self . mask_ else : mask = np . NaN # For practical purposes reshaped_data = np . full ( final_shape , mask ) if not reshaped_data . dtype . type == self . default_dtype : reshaped_data = reshaped_data . astype ( self . default_dtype ) samples_dim = data . shape [ 0 ] valid_indices = ( slice ( 0 , samples_dim ),) + self . valid_indices_ reshaped_data [ valid_indices ] = data reshaped_data = super ( MapValid , self ) . prepare_output_data ( reshaped_data ) return reshaped_data def prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"This function is used to prepare structured input data for further processing. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: Note: This function is a wrapper function that calls the 'prepare_input_data' function internally. Example:: >>> import numpy as np >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[('a', int), ('b', int), ('c', int)]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_input_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) \"\"\" return self . prepare_input_data ( data ) def prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"This function is used to prepare structured output data for further processing. Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: This function is a wrapper function that calls the 'prepare_output_data' function internally. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6]]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_output_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) \"\"\" return self . prepare_output_data ( data )","title":"MapValid"},{"location":"simulai_io/#simulai.io.MapValid.__init__","text":"Initialize the MapValid class with the configurations and mask passed as parameters. Parameters: Name Type Description Default config dict configurations dictionary, by default None None mask ( int , NaN , inf , optional ) mask to select the invalid values, by default None None channels_last bool if set to True, move the channel dimension to the last, by default True True Source code in simulai/io.py 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 def __init__ ( self , config : dict = None , mask = None , channels_last : bool = True ) -> None : \"\"\"Initialize the MapValid class with the configurations and mask passed as parameters. Args: config (dict, optional): configurations dictionary, by default None mask (int, np.NaN, np.inf, optional, optional): mask to select the invalid values, by default None channels_last (bool, optional): if set to True, move the channel dimension to the last, by default True \"\"\" super () . __init__ () self . default_dtype = \"float64\" if mask == 0 or isinstance ( mask , int ): self . replace_mask_with_large_number = False else : self . replace_mask_with_large_number = True self . return_the_same_mask = True for key , value in config . items (): setattr ( self , key , value ) # Default value for very large numbers self . large_number = 1e15 if not mask or self . replace_mask_with_large_number : self . mask = self . large_number else : self . mask = mask self . mask_ = mask for key , value in config . items (): setattr ( self , key , value ) self . valid_indices = None self . original_dimensions = None self . channels_last = channels_last","title":"__init__()"},{"location":"simulai_io/#simulai.io.MapValid.prepare_input_data","text":"Internal input data preparer, executed for each label of the structured array Parameters: Name Type Description Default data ndarray (Default value = None) None Returns: Type Description ndarray np.ndarray: Note MapValid converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) n_valids = dim([k in data[0, ...] if k != mask]) WARNING: the invalid positions are expected to be static in relation to n0. Example:: >>> data = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) >>> prepare_input_data(data) array([[1, 2, 3], [5, 6, 7], [9, 10, 11]]) Source code in simulai/io.py 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 def prepare_input_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"Internal input data preparer, executed for each label of the structured array Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: - MapValid converts n-dimensional arrays to two-dimensional ones performing a valid values mapping operation F: F: data.shape = (n0, n1, ..., nm) -> data'.shape = (n0, n_valids) n_valids = dim([k in data[0, ...] if k != mask]) - WARNING: the invalid positions are expected to be static in relation to n0. Example:: >>> data = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) >>> prepare_input_data(data) array([[1, 2, 3], [5, 6, 7], [9, 10, 11]]) \"\"\" data = super ( MapValid , self ) . prepare_input_data ( data ) if self . mask == self . large_number : self . valid_indices_ = np . where ( data [ 0 , ... ] < self . mask ) elif not str ( self . mask ) . isnumeric () or isinstance ( self . mask , int ): self . valid_indices_ = np . where ( data [ 0 , ... ] != self . mask ) else : raise Exception ( \"The chosen mask {} does not fit in any supported case\" . format ( self . mask ) ) samples_dim = data . shape [ 0 ] valid_indices = ( slice ( 0 , samples_dim ),) + self . valid_indices_ return data [ valid_indices ]","title":"prepare_input_data()"},{"location":"simulai_io/#simulai.io.MapValid.prepare_input_structured_data","text":"This function is used to prepare structured input data for further processing. Parameters: Name Type Description Default data recarray (Default value = None) None Returns: Type Description ndarray np.ndarray: Note This function is a wrapper function that calls the 'prepare_input_data' function internally. Example:: >>> import numpy as np >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[('a', int), ('b', int), ('c', int)]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_input_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) Source code in simulai/io.py 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 def prepare_input_structured_data ( self , data : np . recarray = None ) -> np . ndarray : \"\"\"This function is used to prepare structured input data for further processing. Args: data (np.recarray, optional): (Default value = None) Returns: np.ndarray: Note: This function is a wrapper function that calls the 'prepare_input_data' function internally. Example:: >>> import numpy as np >>> data = np.array([(1, 2, 3), (4, 5, 6)], dtype=[('a', int), ('b', int), ('c', int)]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_input_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) \"\"\" return self . prepare_input_data ( data )","title":"prepare_input_structured_data()"},{"location":"simulai_io/#simulai.io.MapValid.prepare_output_data","text":"Prepare output data for the MapValid operation. Parameters: Name Type Description Default data ndarray (Default value = None) None Returns: Type Description ndarray np.ndarray: Note The reshaped data will have shape (n0, n_valids) where n0 is the number of samples and n_valids are the number of valid values in the data. If the return_the_same_mask attribute is set to True, the mask used to select the invalid values will be returned. Otherwise, the reshaped data will be filled with NaN. Example:: >>> import numpy as np >>> reshaper = MapValid() >>> data = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) >>> reshaper.prepare_output_data(data) array([[[ 1., 2., 3.], [ 4., 5., 6.]], Source code in simulai/io.py 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 def prepare_output_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"Prepare output data for the MapValid operation. Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: - The reshaped data will have shape (n0, n_valids) where n0 is the number of samples and n_valids are the number of valid values in the data. - If the return_the_same_mask attribute is set to True, the mask used to select the invalid values will be returned. Otherwise, the reshaped data will be filled with NaN. Example:: >>> import numpy as np >>> reshaper = MapValid() >>> data = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) >>> reshaper.prepare_output_data(data) array([[[ 1., 2., 3.], [ 4., 5., 6.]], \"\"\" immutable_shape = data . shape [ 0 ] final_shape = ( immutable_shape , self . n_features , ) if self . return_the_same_mask : mask = self . mask_ else : mask = np . NaN # For practical purposes reshaped_data = np . full ( final_shape , mask ) if not reshaped_data . dtype . type == self . default_dtype : reshaped_data = reshaped_data . astype ( self . default_dtype ) samples_dim = data . shape [ 0 ] valid_indices = ( slice ( 0 , samples_dim ),) + self . valid_indices_ reshaped_data [ valid_indices ] = data reshaped_data = super ( MapValid , self ) . prepare_output_data ( reshaped_data ) return reshaped_data","title":"prepare_output_data()"},{"location":"simulai_io/#simulai.io.MapValid.prepare_output_structured_data","text":"This function is used to prepare structured output data for further processing. Parameters: Name Type Description Default data ndarray (Default value = None) None Returns: Type Description ndarray np.ndarray: Note This function is a wrapper function that calls the 'prepare_output_data' function internally. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6]]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_output_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) Source code in simulai/io.py 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 def prepare_output_structured_data ( self , data : np . ndarray = None ) -> np . ndarray : \"\"\"This function is used to prepare structured output data for further processing. Args: data (np.ndarray, optional): (Default value = None) Returns: np.ndarray: Note: This function is a wrapper function that calls the 'prepare_output_data' function internally. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6]]) >>> model = MapValid() >>> prepared_data = MapValid.prepare_output_structured_data(data) >>> prepared_data array([[1, 2, 3], [4, 5, 6]]) \"\"\" return self . prepare_output_data ( data )","title":"prepare_output_structured_data()"},{"location":"simulai_io/#sampling","text":"Bases: DataPreparer This class is used for sampling data from the input dataset. Source code in simulai/io.pyclass Sampling ( DataPreparer ): \"\"\"This class is used for sampling data from the input dataset.\"\"\" name = \"sampling\" def __init__ ( self , choices_fraction : float = 0.1 , shuffling : bool = False ) -> None : \"\"\"Initializes the Sampling class. Args: choices_fraction (float, optional): The fraction of the dataset to be sampled, by default 0.1 shuffling (bool, optional): Whether to shuffle the data before sampling, by default False \"\"\" super () . __init__ () self . choices_fraction = choices_fraction self . shuffling = shuffling self . global_indices = None self . sampled_indices = None @property def indices ( self ) -> list : \"\"\"Returns the indices of the data that have been sampled. Returns: list: The indices of the data that have been sampled. Raises: AssertionError: If the indices have not been generated yet. Note: The indices are generated by calling the 'prepare_input_data' or 'prepare_input_structured_data' functions. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> sampler = Sampling(choices_fraction=0.5, shuffling=True) >>> sampler.prepare_input_data(data) >>> sampler.indices [0, 1] \"\"\" assert self . sampled_indices is not None , ( \"The indices still were not generate.\" \"Run prepare_input_data or prepare_input_structured_data for getting them.\" ) return sorted ( self . sampled_indices . tolist ()) def prepare_input_data ( self , data : np . ndarray = None , data_interval : list = None ) -> np . ndarray : \"\"\"Prepare input data for sampling. Args: data (np.ndarray, optional): The input data. Default is None. data_interval (list, optional): The interval of data that should be selected. Default is None, Returns: numpy.ndarray: The sampled data. Note: The `data_interval` parameter must be a list of two integers, specifying the start and end of the interval. Example:: >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> data_interval = [3, 7] >>> input_data = sampler.prepare_input_data(data, data_interval) \"\"\" if data_interval is None : data_interval = [ 0 , data . shape [ 0 ]] n_samples = data_interval [ 1 ] - data_interval [ 0 ] self . global_indices = np . arange ( start = data_interval [ 0 ], stop = data_interval [ 1 ]) n_choices = int ( self . choices_fraction * n_samples ) self . sampled_indices = self . global_indices . copy () if self . shuffling : np . random . shuffle ( self . sampled_indices ) else : self . sampled_indices = self . sampled_indices self . sampled_indices = np . random . choice ( self . sampled_indices , n_choices ) return data [ self . sampled_indices ] def prepare_input_structured_data ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , ) -> np . recarray : \"\"\"Prepares structured data for further processing. Args: data (h5py.Dataset, optional): Structured array to be prepared, the default shape is (n_samples, 1, *other_dimensions) data_interval (list, optional): The interval of the data to be prepared, the default shape is [0, data.shape[0]] batch_size (int, optional): The size of the batches to be processed, defaults to None dump_path (str, optional): (Default value = None) Returns: np.recarray: Note: - The features dimensions of the input data should be 1 in NumPy structured arrays. - When using a h5py.Dataset as input, a dump_path must be provided Example:: >>> data = h5py.File(\"path/to/data.h5\", 'r')['data'] >>> data_interval = [0, data.shape[0]] >>> batch_size = 32 >>> dump_path = \"path/to/dump.h5\" >>> obj = PrepareInputStructuredData() >>> prepared_data = obj.prepare_input_structured_data(data, data_interval, batch_size, dump_path) \"\"\" if data_interval is None : data_interval = [ 0 , data . shape [ 0 ]] n_samples = data_interval [ 1 ] - data_interval [ 0 ] self . global_indices = np . arange ( start = data_interval [ 0 ], stop = data_interval [ 1 ]) n_sampled_preserved = int ( self . choices_fraction * n_samples ) self . sampled_indices = np . random . choice ( self . global_indices , n_sampled_preserved , replace = False ) if isinstance ( data , h5py . Dataset ): if isinstance ( batch_size , MemorySizeEval ): batch_size = batch_size ( max_batches = n_sampled_preserved , shape = data . shape [ 1 :] ) else : pass assert ( dump_path ), \"Using a h5py.Dataset as input data a dump_path must be provided.\" fp = h5py . File ( dump_path , \"w\" ) sampled_data = fp . create_dataset ( \"data\" , shape = ( n_sampled_preserved ,) + data . shape [ 1 :], dtype = data . dtype ) # Constructing the normalization using the reference data batches = indices_batchdomain_constructor ( indices = self . sampled_indices , batch_size = batch_size ) start_ix = 0 for batch_id , batch in enumerate ( batches ): print ( f \"Sampling batch { batch_id + 1 } / { len ( batches ) } batch_size= { len ( batch ) } \" ) finish_ix = start_ix + len ( batch ) sampled_data [ start_ix : finish_ix ] = data [ sorted ( batch )] start_ix = finish_ix if self . shuffling : random . shuffle ( sampled_data ) else : raise Exception ( \"Others cases are still not implemented.\" ) return sampled_data","title":"Sampling"},{"location":"simulai_io/#simulai.io.Sampling.indices","text":"Returns the indices of the data that have been sampled. Returns: Name Type Description list list The indices of the data that have been sampled. Raises: Type Description AssertionError If the indices have not been generated yet. Note The indices are generated by calling the 'prepare_input_data' or 'prepare_input_structured_data' functions. Example:: >>> import numpy as np >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> sampler = Sampling(choices_fraction=0.5, shuffling=True) >>> sampler.prepare_input_data(data) >>> sampler.indices [0, 1]","title":"indices"},{"location":"simulai_io/#simulai.io.Sampling.__init__","text":"Initializes the Sampling class. Parameters: Name Type Description Default choices_fraction float The fraction of the dataset to be sampled, by default 0.1 0.1 shuffling bool Whether to shuffle the data before sampling, by default False False Source code in simulai/io.py 711 712 713 714 715 716 717 718 719 720 721 722 723 724 def __init__ ( self , choices_fraction : float = 0.1 , shuffling : bool = False ) -> None : \"\"\"Initializes the Sampling class. Args: choices_fraction (float, optional): The fraction of the dataset to be sampled, by default 0.1 shuffling (bool, optional): Whether to shuffle the data before sampling, by default False \"\"\" super () . __init__ () self . choices_fraction = choices_fraction self . shuffling = shuffling self . global_indices = None self . sampled_indices = None","title":"__init__()"},{"location":"simulai_io/#simulai.io.Sampling.prepare_input_data","text":"Prepare input data for sampling. Parameters: Name Type Description Default data ndarray The input data. Default is None. None data_interval list The interval of data that should be selected. Default is None, None Returns: Type Description ndarray numpy.ndarray: The sampled data. Note: The data_interval parameter must be a list of two integers, specifying the start and end of the interval. Example:: >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> data_interval = [3, 7] >>> input_data = sampler.prepare_input_data(data, data_interval) Source code in simulai/io.py 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 def prepare_input_data ( self , data : np . ndarray = None , data_interval : list = None ) -> np . ndarray : \"\"\"Prepare input data for sampling. Args: data (np.ndarray, optional): The input data. Default is None. data_interval (list, optional): The interval of data that should be selected. Default is None, Returns: numpy.ndarray: The sampled data. Note: The `data_interval` parameter must be a list of two integers, specifying the start and end of the interval. Example:: >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> data_interval = [3, 7] >>> input_data = sampler.prepare_input_data(data, data_interval) \"\"\" if data_interval is None : data_interval = [ 0 , data . shape [ 0 ]] n_samples = data_interval [ 1 ] - data_interval [ 0 ] self . global_indices = np . arange ( start = data_interval [ 0 ], stop = data_interval [ 1 ]) n_choices = int ( self . choices_fraction * n_samples ) self . sampled_indices = self . global_indices . copy () if self . shuffling : np . random . shuffle ( self . sampled_indices ) else : self . sampled_indices = self . sampled_indices self . sampled_indices = np . random . choice ( self . sampled_indices , n_choices ) return data [ self . sampled_indices ]","title":"prepare_input_data()"},{"location":"simulai_io/#simulai.io.Sampling.prepare_input_structured_data","text":"Prepares structured data for further processing. Parameters: Name Type Description Default data Dataset Structured array to be prepared, the default shape is (n_samples, 1, *other_dimensions) None data_interval list The interval of the data to be prepared, the default shape is [0, data.shape[0]] None batch_size int The size of the batches to be processed, defaults to None None dump_path str (Default value = None) None Returns: Type Description recarray np.recarray: Note The features dimensions of the input data should be 1 in NumPy structured arrays. When using a h5py.Dataset as input, a dump_path must be provided Example:: >>> data = h5py.File(\"path/to/data.h5\", 'r')['data'] >>> data_interval = [0, data.shape[0]] >>> batch_size = 32 >>> dump_path = \"path/to/dump.h5\" >>> obj = PrepareInputStructuredData() >>> prepared_data = obj.prepare_input_structured_data(data, data_interval, batch_size, dump_path) Source code in simulai/io.py 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 def prepare_input_structured_data ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , ) -> np . recarray : \"\"\"Prepares structured data for further processing. Args: data (h5py.Dataset, optional): Structured array to be prepared, the default shape is (n_samples, 1, *other_dimensions) data_interval (list, optional): The interval of the data to be prepared, the default shape is [0, data.shape[0]] batch_size (int, optional): The size of the batches to be processed, defaults to None dump_path (str, optional): (Default value = None) Returns: np.recarray: Note: - The features dimensions of the input data should be 1 in NumPy structured arrays. - When using a h5py.Dataset as input, a dump_path must be provided Example:: >>> data = h5py.File(\"path/to/data.h5\", 'r')['data'] >>> data_interval = [0, data.shape[0]] >>> batch_size = 32 >>> dump_path = \"path/to/dump.h5\" >>> obj = PrepareInputStructuredData() >>> prepared_data = obj.prepare_input_structured_data(data, data_interval, batch_size, dump_path) \"\"\" if data_interval is None : data_interval = [ 0 , data . shape [ 0 ]] n_samples = data_interval [ 1 ] - data_interval [ 0 ] self . global_indices = np . arange ( start = data_interval [ 0 ], stop = data_interval [ 1 ]) n_sampled_preserved = int ( self . choices_fraction * n_samples ) self . sampled_indices = np . random . choice ( self . global_indices , n_sampled_preserved , replace = False ) if isinstance ( data , h5py . Dataset ): if isinstance ( batch_size , MemorySizeEval ): batch_size = batch_size ( max_batches = n_sampled_preserved , shape = data . shape [ 1 :] ) else : pass assert ( dump_path ), \"Using a h5py.Dataset as input data a dump_path must be provided.\" fp = h5py . File ( dump_path , \"w\" ) sampled_data = fp . create_dataset ( \"data\" , shape = ( n_sampled_preserved ,) + data . shape [ 1 :], dtype = data . dtype ) # Constructing the normalization using the reference data batches = indices_batchdomain_constructor ( indices = self . sampled_indices , batch_size = batch_size ) start_ix = 0 for batch_id , batch in enumerate ( batches ): print ( f \"Sampling batch { batch_id + 1 } / { len ( batches ) } batch_size= { len ( batch ) } \" ) finish_ix = start_ix + len ( batch ) sampled_data [ start_ix : finish_ix ] = data [ sorted ( batch )] start_ix = finish_ix if self . shuffling : random . shuffle ( sampled_data ) else : raise Exception ( \"Others cases are still not implemented.\" ) return sampled_data","title":"prepare_input_structured_data()"},{"location":"simulai_io/#movingwindow","text":"MovingWindow is applied over a time-series array (2D array), and it is used for creating the necessary augmented data used for LSTM networks, replicating the training windows for each sample in the dataset. See a graphical example: Example:: batch n ---------|--- history | horizon batch n+1 ---------|--- history | horizon ---- skip Example:: >>> import numpy as np >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> window = MovingWindow(history_size=3, horizon_size=1) >>> window.transform(data) array([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10]]) Source code in simulai/io.pyclass MovingWindow : r \"\"\"MovingWindow is applied over a time-series array (2D array), and it is used for creating the necessary augmented data used for LSTM networks, replicating the training windows for each sample in the dataset. See a graphical example: Example:: batch n ---------|--- history | horizon batch n+1 ---------|--- history | horizon ---- skip Example:: >>> import numpy as np >>> data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> window = MovingWindow(history_size=3, horizon_size=1) >>> window.transform(data) array([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10]]) \"\"\" def __init__ ( self , history_size : int = None , skip_size : int = 1 , horizon_size : int = None , full_output : bool = True , ) -> None : r \"\"\"Initializes the MovingWindow class Args: history_size (int, optional): the size of the history window, by default None skip_size (int, optional): the number of steps to skip between windows, by default 1 horizon_size (int, optional): the size of the horizon window, by default None full_output (bool, optional): flag to use the full output or only the last item, by default True \"\"\" self . history_size = history_size self . skip_size = skip_size self . horizon_size = horizon_size self . full_output = full_output if self . full_output == True : self . process_batch = self . bypass else : self . process_batch = self . get_last_item # Verifying if history and horizon sizes was provided assert ( history_size ), f \"A value for history_size must be provided, not { history_size } \" assert ( horizon_size ), f \"A value for horizon_size must be provided, not { horizon_size } \" def transform ( self , time_series : np . ndarray ) -> np . ndarray : r \"\"\"Applies the moving window over the time_series array. Args: time_series (np.ndarray): Returns: np.ndarray: the transformed array with the windows. \"\"\" return np . ndarray ( time_series ) def bypass ( self , batch : np . ndarray ) -> np . ndarray : r \"\"\"Does nothing, returns the input batch. Args: batch (np.ndarray): Returns: np.ndarray: the input array \"\"\" return batch def get_last_item ( self , batch : np . ndarray ) -> np . ndarray : r \"\"\"Get the last item of a batch Args: batch (np.ndarray): Returns: np.ndarray: Note: - This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> mw.get_last_item(data) array([[7, 8, 9]]) \"\"\" return batch [ - 1 :] def __call__ ( self , input_data : np . ndarray = None , output_data : np . ndarray = None ) -> Tuple [ np . ndarray , np . ndarray ]: r \"\"\"Apply Moving Window over the input data Args: input_data (np.ndarray, optional): 2D array (time-series) to be used for constructing the history size (Default value = None) output_data (np.ndarray, optional): (Default value = None) Returns: Tuple of np.ndarray: The tuple contains two arrays with shapes (n_samples, n_history, n_features) and Note: - It is expected that the input_data and output_data have the same shape - This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) >>> mw = MovingWindow(history_size=2, horizon_size=2, skip_size=1) >>> input_data, output_data = mw(data, data) >>> input_data array([[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]]) >>> output_data array([[[ 7, 8, 9], [10, 11, 12]], [[10, 11, 12], [13, 14, 15]]]) \"\"\" # It is expected series_data to be a set of time-series with shape # (n_timesteps, n_variables) input_batches_list = list () output_batches_list = list () data_size = input_data . shape [ 0 ] assert input_data . shape [ 0 ] == output_data . shape [ 0 ] center = self . history_size # Loop for covering the entire time-series dataset constructing the # training windows while center + self . horizon_size <= data_size : input_batch = input_data [ center - self . history_size : center , :] output_batch = output_data [ center : center + self . horizon_size , :] input_batches_list . append ( input_batch ) output_batches_list . append ( self . process_batch ( batch = output_batch )) center += self . skip_size input_data = np . stack ( input_batches_list , 0 ) output_data = np . stack ( output_batches_list , 0 ) return input_data , output_data","title":"MovingWindow"},{"location":"simulai_io/#simulai.io.MovingWindow.__call__","text":"Apply Moving Window over the input data Parameters: Name Type Description Default input_data ndarray 2D array (time-series) to be used for constructing the history size (Default value = None) None output_data ndarray (Default value = None) None Returns: Type Description Tuple [ ndarray , ndarray ] Tuple of np.ndarray: The tuple contains two arrays with shapes (n_samples, n_history, n_features) and Note It is expected that the input_data and output_data have the same shape This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) >>> mw = MovingWindow(history_size=2, horizon_size=2, skip_size=1) >>> input_data, output_data = mw(data, data) >>> input_data array([[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]]) >>> output_data array([[[ 7, 8, 9], [10, 11, 12]], [[10, 11, 12], [13, 14, 15]]]) Source code in simulai/io.py 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 def __call__ ( self , input_data : np . ndarray = None , output_data : np . ndarray = None ) -> Tuple [ np . ndarray , np . ndarray ]: r \"\"\"Apply Moving Window over the input data Args: input_data (np.ndarray, optional): 2D array (time-series) to be used for constructing the history size (Default value = None) output_data (np.ndarray, optional): (Default value = None) Returns: Tuple of np.ndarray: The tuple contains two arrays with shapes (n_samples, n_history, n_features) and Note: - It is expected that the input_data and output_data have the same shape - This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) >>> mw = MovingWindow(history_size=2, horizon_size=2, skip_size=1) >>> input_data, output_data = mw(data, data) >>> input_data array([[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]]) >>> output_data array([[[ 7, 8, 9], [10, 11, 12]], [[10, 11, 12], [13, 14, 15]]]) \"\"\" # It is expected series_data to be a set of time-series with shape # (n_timesteps, n_variables) input_batches_list = list () output_batches_list = list () data_size = input_data . shape [ 0 ] assert input_data . shape [ 0 ] == output_data . shape [ 0 ] center = self . history_size # Loop for covering the entire time-series dataset constructing the # training windows while center + self . horizon_size <= data_size : input_batch = input_data [ center - self . history_size : center , :] output_batch = output_data [ center : center + self . horizon_size , :] input_batches_list . append ( input_batch ) output_batches_list . append ( self . process_batch ( batch = output_batch )) center += self . skip_size input_data = np . stack ( input_batches_list , 0 ) output_data = np . stack ( output_batches_list , 0 ) return input_data , output_data","title":"__call__()"},{"location":"simulai_io/#simulai.io.MovingWindow.__init__","text":"Initializes the MovingWindow class Parameters: Name Type Description Default history_size int the size of the history window, by default None None skip_size int the number of steps to skip between windows, by default 1 1 horizon_size int the size of the horizon window, by default None None full_output bool flag to use the full output or only the last item, by default True True Source code in simulai/io.py 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 def __init__ ( self , history_size : int = None , skip_size : int = 1 , horizon_size : int = None , full_output : bool = True , ) -> None : r \"\"\"Initializes the MovingWindow class Args: history_size (int, optional): the size of the history window, by default None skip_size (int, optional): the number of steps to skip between windows, by default 1 horizon_size (int, optional): the size of the horizon window, by default None full_output (bool, optional): flag to use the full output or only the last item, by default True \"\"\" self . history_size = history_size self . skip_size = skip_size self . horizon_size = horizon_size self . full_output = full_output if self . full_output == True : self . process_batch = self . bypass else : self . process_batch = self . get_last_item # Verifying if history and horizon sizes was provided assert ( history_size ), f \"A value for history_size must be provided, not { history_size } \" assert ( horizon_size ), f \"A value for horizon_size must be provided, not { horizon_size } \"","title":"__init__()"},{"location":"simulai_io/#simulai.io.MovingWindow.bypass","text":"Does nothing, returns the input batch. Parameters: Name Type Description Default batch ndarray required Returns: Type Description ndarray np.ndarray: the input array Source code in simulai/io.py 955 956 957 958 959 960 961 962 963 964 965 def bypass ( self , batch : np . ndarray ) -> np . ndarray : r \"\"\"Does nothing, returns the input batch. Args: batch (np.ndarray): Returns: np.ndarray: the input array \"\"\" return batch","title":"bypass()"},{"location":"simulai_io/#simulai.io.MovingWindow.get_last_item","text":"Get the last item of a batch Parameters: Name Type Description Default batch ndarray required Returns: Type Description ndarray np.ndarray: Note This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> mw.get_last_item(data) array([[7, 8, 9]]) Source code in simulai/io.py 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 def get_last_item ( self , batch : np . ndarray ) -> np . ndarray : r \"\"\"Get the last item of a batch Args: batch (np.ndarray): Returns: np.ndarray: Note: - This method is used internally by the MovingWindow class Example:: >>> data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> mw.get_last_item(data) array([[7, 8, 9]]) \"\"\" return batch [ - 1 :]","title":"get_last_item()"},{"location":"simulai_io/#simulai.io.MovingWindow.transform","text":"Applies the moving window over the time_series array. Parameters: Name Type Description Default time_series ndarray required Returns: Type Description ndarray np.ndarray: the transformed array with the windows. Source code in simulai/io.py 943 944 945 946 947 948 949 950 951 952 953 def transform ( self , time_series : np . ndarray ) -> np . ndarray : r \"\"\"Applies the moving window over the time_series array. Args: time_series (np.ndarray): Returns: np.ndarray: the transformed array with the windows. \"\"\" return np . ndarray ( time_series )","title":"transform()"},{"location":"simulai_io/#slidingwindow","text":"SlidingWindow is applied over a time-series array (2D array), and it is used for creating the necessary augmented data used for LSTM networks, replicating the training windows for each sample in the dataset. The difference between SlidingWindow and MovingWindow is that here there is no intersection between two sequential batches Attributes: Name Type Description history_size int The number of history samples to include in each window. skip_size int The number of samples to skip between each window. Note: - The difference between SlidingWindow and MovingWindow is that here there is no intersection between two sequential batches. See a graphical example: Example:: batch n ---------|--- history | horizon batch n+1 ---------|--- history | horizon Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]] Source code in simulai/io.py 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 class SlidingWindow : r \"\"\"SlidingWindow is applied over a time-series array (2D array), and it is used for creating the necessary augmented data used for LSTM networks, replicating the training windows for each sample in the dataset. The difference between SlidingWindow and MovingWindow is that here there is no intersection between two sequential batches Attributes: history_size : int The number of history samples to include in each window. skip_size : int The number of samples to skip between each window. Note: - The difference between SlidingWindow and MovingWindow is that here there is no intersection between two sequential batches. See a graphical example: Example:: batch n ---------|--- history | horizon batch n+1 ---------|--- history | horizon Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]] \"\"\" def __init__ ( self , history_size : int = None , skip_size : int = None ) -> None : r \"\"\"Initialize the SlidingWindow object. Args: history_size (int, optional): The number of history samples to include in each window. (Default value = None) skip_size (int, optional): The number of samples to skip between each window. (Default value = None) \"\"\" self . history_size = history_size self . skip_size = skip_size # Verifying if history and horizon sizes was provided assert ( history_size ), f \"A value for history_size must be provided, not { history_size } \" assert skip_size , f \"A value for horizon_size must be provided, not { skip_size } \" def apply ( self , time_series : List [ int ]) -> List [ List [ int ]]: r \"\"\"Applies the sliding window to the given time series. Args: time_series (List[int]): Returns: List[List[int]]: Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]] \"\"\" windowed_samples = [] for i in range ( 0 , len ( time_series ) - self . history_size - self . skip_size + 1 ): window = time_series [ i : i + self . history_size + self . skip_size ] windowed_samples . append ( window ) return windowed_samples def __call__ ( self , input_data : np . ndarray = None , output_data : np . ndarray = None ) -> Tuple [ np . ndarray , np . ndarray ]: r \"\"\"Applies a sliding window operation on the given time series and returns the windowed samples. Args: input_data (np.ndarray, optional): 2D array (time-series) to be used for constructing the history size (Default value = None) output_data (np.ndarray, optional): (Default value = None) Returns: Tuple[np.ndarray, np.ndarray]: tuple of np.ndarray with shapes (n_samples, n_history, n_features) and (n_samples, n_horizon, n_features) Note: - history_size and horizon_size should be positive integers - history_size should be less than the length of input_data - input_data and output_data should have the same number of rows Example:: >>> data = np.random.rand(10,3) >>> history_size = 3 >>> horizon_size = 2 >>> window = Window(history_size, horizon_size) >>> input_data, output_data = window(data) >>> input_data.shape (4, 3, 3) >>> output_data.shape (4, 2, 3) \"\"\" # It is expected series_data to be a set of time-series with shape # (n_timesteps, n_variables) input_batches_list = list () output_batches_list = list () data_size = input_data . shape [ 0 ] assert input_data . shape [ 0 ] == output_data . shape [ 0 ] center = self . history_size # Loop for covering the entire time-series dataset constructing the # training windows while center + self . skip_size <= data_size : input_batch = input_data [ center - self . history_size : center , :] output_batch = output_data [ center - self . history_size + self . skip_size : center + self . skip_size , : ] input_batches_list . append ( input_batch ) output_batches_list . append ( output_batch ) center += self . skip_size input_data = np . stack ( input_batches_list , 0 ) output_data = np . stack ( output_batches_list , 0 ) return input_data , output_data","title":"SlidingWindow"},{"location":"simulai_io/#simulai.io.SlidingWindow.__call__","text":"Applies a sliding window operation on the given time series and returns the windowed samples. Parameters: Name Type Description Default input_data ndarray 2D array (time-series) to be used for constructing the history size (Default value = None) None output_data ndarray (Default value = None) None Returns: Type Description Tuple [ ndarray , ndarray ] Tuple[np.ndarray, np.ndarray]: tuple of np.ndarray with shapes (n_samples, n_history, n_features) and (n_samples, n_horizon, n_features) Note history_size and horizon_size should be positive integers history_size should be less than the length of input_data input_data and output_data should have the same number of rows Example:: >>> data = np.random.rand(10,3) >>> history_size = 3 >>> horizon_size = 2 >>> window = Window(history_size, horizon_size) >>> input_data, output_data = window(data) >>> input_data.shape (4, 3, 3) >>> output_data.shape (4, 2, 3) Source code in simulai/io.py 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 def __call__ ( self , input_data : np . ndarray = None , output_data : np . ndarray = None ) -> Tuple [ np . ndarray , np . ndarray ]: r \"\"\"Applies a sliding window operation on the given time series and returns the windowed samples. Args: input_data (np.ndarray, optional): 2D array (time-series) to be used for constructing the history size (Default value = None) output_data (np.ndarray, optional): (Default value = None) Returns: Tuple[np.ndarray, np.ndarray]: tuple of np.ndarray with shapes (n_samples, n_history, n_features) and (n_samples, n_horizon, n_features) Note: - history_size and horizon_size should be positive integers - history_size should be less than the length of input_data - input_data and output_data should have the same number of rows Example:: >>> data = np.random.rand(10,3) >>> history_size = 3 >>> horizon_size = 2 >>> window = Window(history_size, horizon_size) >>> input_data, output_data = window(data) >>> input_data.shape (4, 3, 3) >>> output_data.shape (4, 2, 3) \"\"\" # It is expected series_data to be a set of time-series with shape # (n_timesteps, n_variables) input_batches_list = list () output_batches_list = list () data_size = input_data . shape [ 0 ] assert input_data . shape [ 0 ] == output_data . shape [ 0 ] center = self . history_size # Loop for covering the entire time-series dataset constructing the # training windows while center + self . skip_size <= data_size : input_batch = input_data [ center - self . history_size : center , :] output_batch = output_data [ center - self . history_size + self . skip_size : center + self . skip_size , : ] input_batches_list . append ( input_batch ) output_batches_list . append ( output_batch ) center += self . skip_size input_data = np . stack ( input_batches_list , 0 ) output_data = np . stack ( output_batches_list , 0 ) return input_data , output_data","title":"__call__()"},{"location":"simulai_io/#simulai.io.SlidingWindow.__init__","text":"Initialize the SlidingWindow object. Parameters: Name Type Description Default history_size int The number of history samples to include in each window. (Default value = None) None skip_size int The number of samples to skip between each window. (Default value = None) None Source code in simulai/io.py 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 def __init__ ( self , history_size : int = None , skip_size : int = None ) -> None : r \"\"\"Initialize the SlidingWindow object. Args: history_size (int, optional): The number of history samples to include in each window. (Default value = None) skip_size (int, optional): The number of samples to skip between each window. (Default value = None) \"\"\" self . history_size = history_size self . skip_size = skip_size # Verifying if history and horizon sizes was provided assert ( history_size ), f \"A value for history_size must be provided, not { history_size } \" assert skip_size , f \"A value for horizon_size must be provided, not { skip_size } \"","title":"__init__()"},{"location":"simulai_io/#simulai.io.SlidingWindow.apply","text":"Applies the sliding window to the given time series. Parameters: Name Type Description Default time_series List [ int ] required Returns: Type Description List [ List [ int ]] List[List[int]]: Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]] Source code in simulai/io.py 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 def apply ( self , time_series : List [ int ]) -> List [ List [ int ]]: r \"\"\"Applies the sliding window to the given time series. Args: time_series (List[int]): Returns: List[List[int]]: Example:: >>> window = SlidingWindow(history_size=3, skip_size=1) >>> time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> windows = window.apply(time_series) >>> windows [[[1, 2, 3], [4, 5, 6]], [[4, 5, 6], [7, 8, 9]], [[7, 8, 9], [10, 11, 12]]] \"\"\" windowed_samples = [] for i in range ( 0 , len ( time_series ) - self . history_size - self . skip_size + 1 ): window = time_series [ i : i + self . history_size + self . skip_size ] windowed_samples . append ( window ) return windowed_samples","title":"apply()"},{"location":"simulai_io/#intersectingbatches","text":"IntersectingBatches is a class that is applied over a time-series array (2D array) to create batches of input data for training or testing purposes. Source code in simulai/io.py 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 class IntersectingBatches : r \"\"\"IntersectingBatches is a class that is applied over a time-series array (2D array) to create batches of input data for training or testing purposes.\"\"\" def __init__ ( self , skip_size : int = 1 , batch_size : int = None , full : bool = True ) -> None : r \"\"\"Initializes the IntersectingBatches class Args: skip_size (int, optional): Number of samples to skip between two windows. (Default value = 1) batch_size (int, optional): Number of samples to use in each batch. (Default value = None) full (bool, optional): Whether to include the last batch or not, even if it's not full. (Default value = True) \"\"\" assert ( batch_size ), f \"A value for horizon_size must be provided, not { batch_size } \" self . skip_size = skip_size self . batch_size = batch_size self . full = full def get_indices ( self , dim : int = None ) -> np . ndarray : r \"\"\"It gets just the indices of the shifting Args: dim (int, optional): total dimension (Default value = None) Returns: np.ndarray: the shifted indices \"\"\" center = 0 indices = list () indices_m = list () # Loop for covering the entire time-series dataset constructing the # training windows while center + self . batch_size < dim : index = center + self . batch_size indices . append ( center ) indices_m . append ( index ) center += self . skip_size return np . array ( indices ), np . array ( indices_m ) def __call__ ( self , input_data : np . ndarray = None ) -> Union [ list , np . ndarray ]: r \"\"\"Applies the batching strategy to the input data. Args: input_data (np.ndarray, optional): (Default value = None) Returns: Union[list, np.ndarray]: A list of batches or a single batch if `full` attribute is set to False. Note: - If the `full` attribute is set to True, the last batch will be included even if it's not full. Example:: >>> input_data = np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) >>> batches = IntersectingBatches(skip_size=1, batch_size=2) >>> batches(input_data) [array([[1, 2, 3], [4, 5, 6]]), array([[4, 5, 6], [7, 8, 9]]), array([[ 7, 8, 9], [10, 11, 12]])] \"\"\" input_batches_list = list () data_size = input_data . shape [ 0 ] center = 0 # Loop for covering the entire time-series dataset constructing the # training windows while center + self . batch_size <= data_size : input_batch = input_data [ center : center + self . batch_size ] input_batches_list . append ( input_batch ) center += self . skip_size if self . full == True : return input_batches_list else : return np . vstack ([ item [ - 1 ] for item in input_batches_list ])","title":"IntersectingBatches"},{"location":"simulai_io/#simulai.io.IntersectingBatches.__call__","text":"Applies the batching strategy to the input data. Parameters: Name Type Description Default input_data ndarray (Default value = None) None Returns: Type Description Union [ list , ndarray ] Union[list, np.ndarray]: A list of batches or a single batch if full attribute is set to False. Note: - If the full attribute is set to True, the last batch will be included even if it's not full. Example:: >>> input_data = np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) >>> batches = IntersectingBatches(skip_size=1, batch_size=2) >>> batches(input_data) [array([[1, 2, 3], [4, 5, 6]]), array([[4, 5, 6], [7, 8, 9]]), array([[ 7, 8, 9], [10, 11, 12]])] Source code in simulai/io.py 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 def __call__ ( self , input_data : np . ndarray = None ) -> Union [ list , np . ndarray ]: r \"\"\"Applies the batching strategy to the input data. Args: input_data (np.ndarray, optional): (Default value = None) Returns: Union[list, np.ndarray]: A list of batches or a single batch if `full` attribute is set to False. Note: - If the `full` attribute is set to True, the last batch will be included even if it's not full. Example:: >>> input_data = np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) >>> batches = IntersectingBatches(skip_size=1, batch_size=2) >>> batches(input_data) [array([[1, 2, 3], [4, 5, 6]]), array([[4, 5, 6], [7, 8, 9]]), array([[ 7, 8, 9], [10, 11, 12]])] \"\"\" input_batches_list = list () data_size = input_data . shape [ 0 ] center = 0 # Loop for covering the entire time-series dataset constructing the # training windows while center + self . batch_size <= data_size : input_batch = input_data [ center : center + self . batch_size ] input_batches_list . append ( input_batch ) center += self . skip_size if self . full == True : return input_batches_list else : return np . vstack ([ item [ - 1 ] for item in input_batches_list ])","title":"__call__()"},{"location":"simulai_io/#simulai.io.IntersectingBatches.__init__","text":"Initializes the IntersectingBatches class Parameters: Name Type Description Default skip_size int Number of samples to skip between two windows. (Default value = 1) 1 batch_size int Number of samples to use in each batch. (Default value = None) None full bool Whether to include the last batch or not, even if it's not full. (Default value = True) True Source code in simulai/io.py 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 def __init__ ( self , skip_size : int = 1 , batch_size : int = None , full : bool = True ) -> None : r \"\"\"Initializes the IntersectingBatches class Args: skip_size (int, optional): Number of samples to skip between two windows. (Default value = 1) batch_size (int, optional): Number of samples to use in each batch. (Default value = None) full (bool, optional): Whether to include the last batch or not, even if it's not full. (Default value = True) \"\"\" assert ( batch_size ), f \"A value for horizon_size must be provided, not { batch_size } \" self . skip_size = skip_size self . batch_size = batch_size self . full = full","title":"__init__()"},{"location":"simulai_io/#simulai.io.IntersectingBatches.get_indices","text":"It gets just the indices of the shifting Parameters: Name Type Description Default dim int total dimension (Default value = None) None Returns: Type Description ndarray np.ndarray: the shifted indices Source code in simulai/io.py 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 def get_indices ( self , dim : int = None ) -> np . ndarray : r \"\"\"It gets just the indices of the shifting Args: dim (int, optional): total dimension (Default value = None) Returns: np.ndarray: the shifted indices \"\"\" center = 0 indices = list () indices_m = list () # Loop for covering the entire time-series dataset constructing the # training windows while center + self . batch_size < dim : index = center + self . batch_size indices . append ( center ) indices_m . append ( index ) center += self . skip_size return np . array ( indices ), np . array ( indices_m )","title":"get_indices()"},{"location":"simulai_io/#batchwiseextrapolation","text":"BatchwiseExtraplation uses a time-series regression model and inputs as generated by MovingWindow to continuously extrapolate a dataset. Attributes: Name Type Description time_id int Examples:: >>> import numpy as np >>> from sklearn.linear_model import LinearRegression >>> model = LinearRegression() >>> op = lambda state: model.predict(state) >>> auxiliary_data = np.random.rand(100, 10) >>> batchwise_extrapolation = BatchwiseExtrapolation(op=op, auxiliary_data=auxiliary_data) >>> init_state = np.random.rand(1, 10, 20) >>> history_size = 3 >>> horizon_size = 2 >>> testing_data_size = 10 >>> extrapolation_dataset = batchwise_extrapolation(init_state, history_size, horizon_size, testing_data_size) >>> extrapolation_dataset.shape Source code in simulai/io.py 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 class BatchwiseExtrapolation : r \"\"\"BatchwiseExtraplation uses a time-series regression model and inputs as generated by MovingWindow to continuously extrapolate a dataset. Attributes: time_id : int Examples:: >>> import numpy as np >>> from sklearn.linear_model import LinearRegression >>> model = LinearRegression() >>> op = lambda state: model.predict(state) >>> auxiliary_data = np.random.rand(100, 10) >>> batchwise_extrapolation = BatchwiseExtrapolation(op=op, auxiliary_data=auxiliary_data) >>> init_state = np.random.rand(1, 10, 20) >>> history_size = 3 >>> horizon_size = 2 >>> testing_data_size = 10 >>> extrapolation_dataset = batchwise_extrapolation(init_state, history_size, horizon_size, testing_data_size) >>> extrapolation_dataset.shape \"\"\" def __init__ ( self , op : callable = None , auxiliary_data : np . ndarray = None ) -> None : self . op = op self . auxiliary_data = auxiliary_data self . time_id = 0 def _simple_extrapolation ( self , extrapolation_dataset : np . ndarray , history_size : int = 0 ) -> np . ndarray : r \"\"\"Given the current extrapolation dataset, use the last history_size number of rows to create the next state of the dataset. Args: extrapolation_dataset (np.ndarray): The current state of the extrapolation dataset. history_size (int, optional): (Default value = 0) Returns: np.ndarray: The next state of the extrapolation dataset. \"\"\" return extrapolation_dataset [ None , - history_size :, :] def _forcing_extrapolation ( self , extrapolation_dataset : np . ndarray , history_size : int = 0 ) -> np . ndarray : return np . hstack ( [ extrapolation_dataset [ - history_size :, :], self . auxiliary_data [ self . time_id - history_size : self . time_id , :], ] )[ None , :, :] def __call__ ( self , init_state : np . ndarray = None , history_size : int = None , horizon_size : int = None , testing_data_size : int = None , ) -> np . ndarray : r \"\"\"A function that performs the extrapolation of the time series. Args: init_state (np.ndarray, optional): initial state of the time series. It should have the shape (batch_size, history_size, n_series) (Default value = None) history_size (int, optional): the size of the history window used in the extrapolation. (Default value = None) horizon_size (int, optional): the size of the horizon window used in the extrapolation. (Default value = None) testing_data_size (int, optional): (Default value = None) Returns: np.ndarray: Note: The number of series in the initial state must be equal to the number of series in the auxiliary data, if it is provided. Example:: >>> model = BatchwiseExtrapolation() #Init state of the time series >>> init_state = np.random.random((1,20,3)) >>> history_size = 10 >>> horizon_size = 5 >>> testing_data_size = 50 #Calling the function >>> output = model(init_state, history_size, horizon_size, testing_data_size) >>> print(output.shape) #(50,3) \"\"\" if isinstance ( self . auxiliary_data , np . ndarray ): n_series = self . auxiliary_data . shape [ - 1 ] else : n_series = 0 current_state = init_state extrapolation_dataset = init_state [ 0 , :, n_series :] self . time_id = history_size if isinstance ( self . auxiliary_data , np . ndarray ): assert ( self . auxiliary_data . shape [ - 1 ] + n_series == init_state . shape [ - 1 ] ), \"Number of series in the initial state must be {} \" . format ( self . auxiliary_data . shape [ - 1 ] ) current_state_constructor = self . _forcing_extrapolation else : current_state_constructor = self . _simple_extrapolation while ( extrapolation_dataset . shape [ 0 ] - history_size + horizon_size <= testing_data_size ): extrapolation = self . op ( current_state ) extrapolation_dataset = np . concatenate ( [ extrapolation_dataset , extrapolation [ 0 ]], 0 ) current_state = current_state_constructor ( extrapolation_dataset , history_size = history_size ) log_str = \"Extrapolation {} \" . format ( self . time_id + 1 - history_size ) sys . stdout . write ( \" \\r \" + log_str ) sys . stdout . flush () self . time_id += horizon_size extrapolation_dataset = extrapolation_dataset [ history_size :, :] return extrapolation_dataset","title":"BatchwiseExtrapolation"},{"location":"simulai_io/#simulai.io.BatchwiseExtrapolation.__call__","text":"A function that performs the extrapolation of the time series. Parameters: Name Type Description Default init_state ndarray initial state of the time series. It should have the shape (batch_size, history_size, n_series) (Default value = None) None history_size int the size of the history window used in the extrapolation. (Default value = None) None horizon_size int the size of the horizon window used in the extrapolation. (Default value = None) None testing_data_size int (Default value = None) None Returns: Type Description ndarray np.ndarray: Note The number of series in the initial state must be equal to the number of series in the auxiliary data, if it is provided. Example:: >>> model = BatchwiseExtrapolation() #Init state of the time series >>> init_state = np.random.random((1,20,3)) >>> history_size = 10 >>> horizon_size = 5 >>> testing_data_size = 50 #Calling the function >>> output = model(init_state, history_size, horizon_size, testing_data_size) >>> print(output.shape) #(50,3) Source code in simulai/io.py 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 def __call__ ( self , init_state : np . ndarray = None , history_size : int = None , horizon_size : int = None , testing_data_size : int = None , ) -> np . ndarray : r \"\"\"A function that performs the extrapolation of the time series. Args: init_state (np.ndarray, optional): initial state of the time series. It should have the shape (batch_size, history_size, n_series) (Default value = None) history_size (int, optional): the size of the history window used in the extrapolation. (Default value = None) horizon_size (int, optional): the size of the horizon window used in the extrapolation. (Default value = None) testing_data_size (int, optional): (Default value = None) Returns: np.ndarray: Note: The number of series in the initial state must be equal to the number of series in the auxiliary data, if it is provided. Example:: >>> model = BatchwiseExtrapolation() #Init state of the time series >>> init_state = np.random.random((1,20,3)) >>> history_size = 10 >>> horizon_size = 5 >>> testing_data_size = 50 #Calling the function >>> output = model(init_state, history_size, horizon_size, testing_data_size) >>> print(output.shape) #(50,3) \"\"\" if isinstance ( self . auxiliary_data , np . ndarray ): n_series = self . auxiliary_data . shape [ - 1 ] else : n_series = 0 current_state = init_state extrapolation_dataset = init_state [ 0 , :, n_series :] self . time_id = history_size if isinstance ( self . auxiliary_data , np . ndarray ): assert ( self . auxiliary_data . shape [ - 1 ] + n_series == init_state . shape [ - 1 ] ), \"Number of series in the initial state must be {} \" . format ( self . auxiliary_data . shape [ - 1 ] ) current_state_constructor = self . _forcing_extrapolation else : current_state_constructor = self . _simple_extrapolation while ( extrapolation_dataset . shape [ 0 ] - history_size + horizon_size <= testing_data_size ): extrapolation = self . op ( current_state ) extrapolation_dataset = np . concatenate ( [ extrapolation_dataset , extrapolation [ 0 ]], 0 ) current_state = current_state_constructor ( extrapolation_dataset , history_size = history_size ) log_str = \"Extrapolation {} \" . format ( self . time_id + 1 - history_size ) sys . stdout . write ( \" \\r \" + log_str ) sys . stdout . flush () self . time_id += horizon_size extrapolation_dataset = extrapolation_dataset [ history_size :, :] return extrapolation_dataset","title":"__call__()"},{"location":"simulai_io/#batchcopy","text":"A class for copying data in batches and applying a transformation function. Source code in simulai/io.py 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 class BatchCopy : r \"\"\"A class for copying data in batches and applying a transformation function.\"\"\" def __init__ ( self , channels_last : bool = False ) -> None : self . channels_last = channels_last def _single_copy ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , transformation : callable = lambda data : data , ) -> h5py . Dataset : r \"\"\"Copy data from a single h5py.Dataset to another h5py.Dataset in batches. Args: data (h5py.Dataset, optional): (Default value = None) data_interval (list, optional): The interval of the data to be copied. (Default value = None) batch_size (int, optional): The size of the batch to be copied. (Default value = None) dump_path (str, optional): The path where the new h5py.Dataset will be saved. (Default value = None) transformation (callable, optional): (Default value = lambda data: data) Returns: h5py.Dataset: The new h5py.Dataset after the copy process. Note: - Copy data from data_file.h5/data to data_copy.h5/data with a batch size of 1000: - The input must be an h5py.Dataset. Example:: >>> data = h5py.File(\"data_file.h5\", \"r\") >>> batch_copy = BatchCopy() >>> dset = batch_copy._single_copy(data=data[\"data\"], data_interval=[0, 100000], batch_size=1000, dump_path=\"data_copy.h5\") \"\"\" assert isinstance ( data , h5py . Dataset ), \"The input must be h5py.Dataset\" variables_list = data . dtype . names data_shape = ( data_interval [ 1 ] - data_interval [ 0 ],) + data . shape [ 1 :] data_file = h5py . File ( dump_path , \"w\" ) dtype = [( var , \"<f8\" ) for var in variables_list ] dset = data_file . create_dataset ( \"data\" , shape = data_shape , dtype = dtype ) if isinstance ( batch_size , MemorySizeEval ): n_samples = data_interval [ 1 ] - data_interval [ 0 ] batch_size = batch_size ( max_batches = n_samples , shape = data . shape [ 1 :]) else : pass # Constructing the normalization using the reference data batches = batchdomain_constructor ( data_interval , batch_size ) dset_batches = batchdomain_constructor ([ 0 , dset . shape [ 0 ]], batch_size ) variables_names = data . dtype . names n_variables = len ( data . dtype . names ) for batch_id , ( batch , d_batch ) in enumerate ( zip ( batches , dset_batches )): print ( f \"Copying batch { batch_id + 1 } / { len ( batches ) } batch_size= { batch [ 1 ] - batch [ 0 ] } \" ) # The variables dimension is the last one if self . channels_last : # TODO this is a restrictive way of doing it. It must be more flexible. # .transpose((0, 4, 2, 3, 1)) chunk_data = data [ slice ( * batch )] . view (( float , len ( data . dtype . names ))) # The variables dimension is the second one else : chunk_data = data [ slice ( * batch )] . view (( float , len ( data . dtype . names ))) chunk_data = np . core . records . fromarrays ( np . split ( chunk_data [ ... ], n_variables , axis =- 1 ), names = variables_names , formats = \",\" . join ( len ( variables_names ) * [ \"f8\" ]), ) if len ( chunk_data . shape ) > len ( dset . shape ): chunk_data = np . squeeze ( chunk_data , axis =- 1 ) else : pass dset [ slice ( * d_batch )] = transformation ( chunk_data [ ... ]) return dset def _multiple_copy ( self , data : list = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , transformation : callable = lambda data : data , ) -> h5py . Dataset : r \"\"\"Copy and concatenate multiple h5py.Dataset objects into a single h5py.Dataset object. Args: data (list, optional): A list of h5py.Dataset objects to be concatenated. (Default value = None) data_interval (list, optional): A list of two integers indicating the start and end index of the data to be concatenated. (Default value = None) batch_size (int, optional): The number of samples to be processed at a time. (Default value = None) dump_path (str, optional): The file path where the concatenated h5py.Dataset object will be saved. (Default value = None) transformation (callable, optional): (Default value = lambda data: data) Returns: h5py.Dataset: The concatenated h5py.Dataset object. \"\"\" assert all ( [ isinstance ( di , h5py . Dataset ) for di in data ] ), \"All inputs must be h5py.Dataset\" variables_list = sum ([ list ( di . dtype . names ) for di in data ], []) data_shape = ( data_interval [ 1 ] - data_interval [ 0 ],) + data [ 0 ] . shape [ 1 :] data_file = h5py . File ( dump_path , \"w\" ) dtype = [( var , \"<f8\" ) for var in variables_list ] dset = data_file . create_dataset ( \"data\" , shape = data_shape , dtype = dtype ) if isinstance ( batch_size , MemorySizeEval ): n_samples = data_interval [ 1 ] - data_interval [ 0 ] batch_size = batch_size ( max_batches = n_samples , shape = data . shape [ 1 :]) else : pass # Constructing the normalization using the reference data batches = batchdomain_constructor ( data_interval , batch_size ) dset_batches = batchdomain_constructor ([ 0 , dset . shape [ 0 ]], batch_size ) variables_names = sum ([ list ( di . dtype . names ) for di in data ], []) n_variables = sum ([ len ( di . dtype . names ) for di in data ]) for batch_id , ( batch , d_batch ) in enumerate ( zip ( batches , dset_batches )): print ( f \"Copying and concatenating the batches { batch_id + 1 } / { len ( batches ) } batch_size= { batch [ 1 ] - batch [ 0 ] } \" ) # The variables dimension is the last one if self . channels_last : # TODO this is a restrictive way of doing it. It must be more flexible. chunk_data = np . stack ( [ di [ slice ( * batch )] . view (( float , len ( di . dtype . names ))) . transpose (( 0 , 4 , 2 , 3 , 1 )) for di in data ], axis =- 1 , ) # The variables dimension is the second one else : chunk_data = np . stack ( [ di [ slice ( * batch )] . view (( float , len ( di . dtype . names ))) for di in data ], axis =- 1 , ) chunk_data = np . core . records . fromarrays ( np . split ( chunk_data [ ... ], n_variables , axis =- 1 ), names = variables_names , formats = \",\" . join ( len ( variables_names ) * [ \"f8\" ]), ) if len ( chunk_data . shape ) > len ( dset . shape ): chunk_data = np . squeeze ( chunk_data , axis =- 1 ) else : pass dset [ slice ( * d_batch )] = transformation ( chunk_data [ ... ]) return dset def copy ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , transformation : callable = lambda data : data , ) -> h5py . Dataset : r \"\"\"Copies the data from h5py.Dataset to a new h5py.Dataset file. It allows to apply a transformation function to the data. Args: data (h5py.Dataset, optional): input data to be copied (Default value = None) data_interval (list, optional): the range of the data to be copied (Default value = None) batch_size (int, optional): the size of the batches to be used to copy the data (Default value = None) dump_path (str, optional): the path of the file where the data will be copied (Default value = None) transformation (callable, optional): (Default value = lambda data: data) Returns: h5py.Dataset: The copied data Note: - If the data is a list of h5py.Dataset, it will call the `_multiple_copy` function. Example:: >>> data = h5py.File('data.h5', 'r') >>> data_interval = [0, 100] >>> batch_size = 1000 >>> dump_path = 'copied_data.h5' >>> transformation = lambda x: x*2 >>> copied_data = copy(data, data_interval, batch_size, dump_path, transformation) \"\"\" if isinstance ( data , list ): return self . _multiple_copy ( data = data , data_interval = data_interval , batch_size = batch_size , dump_path = dump_path , transformation = transformation , ) else : return self . _single_copy ( data = data , data_interval = data_interval , batch_size = batch_size , dump_path = dump_path , transformation = transformation , )","title":"BatchCopy"},{"location":"simulai_io/#simulai.io.BatchCopy.copy","text":"Copies the data from h5py.Dataset to a new h5py.Dataset file. It allows to apply a transformation function to the data. Parameters: Name Type Description Default data Dataset input data to be copied (Default value = None) None data_interval list the range of the data to be copied (Default value = None) None batch_size int the size of the batches to be used to copy the data (Default value = None) None dump_path str the path of the file where the data will be copied (Default value = None) None transformation callable (Default value = lambda data: data) lambda : data Returns: Type Description Dataset h5py.Dataset: The copied data Note: - If the data is a list of h5py.Dataset, it will call the _multiple_copy function. Example:: >>> data = h5py.File('data.h5', 'r') >>> data_interval = [0, 100] >>> batch_size = 1000 >>> dump_path = 'copied_data.h5' >>> transformation = lambda x: x*2 >>> copied_data = copy(data, data_interval, batch_size, dump_path, transformation) Source code in simulai/io.py 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 def copy ( self , data : h5py . Dataset = None , data_interval : list = None , batch_size : int = None , dump_path : str = None , transformation : callable = lambda data : data , ) -> h5py . Dataset : r \"\"\"Copies the data from h5py.Dataset to a new h5py.Dataset file. It allows to apply a transformation function to the data. Args: data (h5py.Dataset, optional): input data to be copied (Default value = None) data_interval (list, optional): the range of the data to be copied (Default value = None) batch_size (int, optional): the size of the batches to be used to copy the data (Default value = None) dump_path (str, optional): the path of the file where the data will be copied (Default value = None) transformation (callable, optional): (Default value = lambda data: data) Returns: h5py.Dataset: The copied data Note: - If the data is a list of h5py.Dataset, it will call the `_multiple_copy` function. Example:: >>> data = h5py.File('data.h5', 'r') >>> data_interval = [0, 100] >>> batch_size = 1000 >>> dump_path = 'copied_data.h5' >>> transformation = lambda x: x*2 >>> copied_data = copy(data, data_interval, batch_size, dump_path, transformation) \"\"\" if isinstance ( data , list ): return self . _multiple_copy ( data = data , data_interval = data_interval , batch_size = batch_size , dump_path = dump_path , transformation = transformation , ) else : return self . _single_copy ( data = data , data_interval = data_interval , batch_size = batch_size , dump_path = dump_path , transformation = transformation , )","title":"copy()"},{"location":"simulai_io/#maketensor","text":"This class is used to make torch tensors from numpy arrays or dictionaries. Parameters: Name Type Description Default input_names List [ str ] list of input names. None output_names List [ str ] list of output names. None Note input_tensors will be a list of tensors in case of numpy array and dictionary inputs. The input_data should be numpy array with shape (batch_size, features_size) or dictionary with keys from input_names and values with shape (batch_size, features_size) if input_names and output_names are provided. The input_data will be converted to float32 dtype. The input_data will be put on the device specified by the device parameter, which defaults to 'cpu'. If input_data is None, it will raise an exception. Example:: # Creating a MakeTensor object with input and output names # Converting numpy array to torch tensor # Converting dictionary to torch tensors >>> mt = MakeTensor(input_names=[\"input_1\", \"input_2\"], output_names=[\"output\"]) >>> input_data = np.random.randn(10, 3) >>> input_tensors = mt(input_data) >>> input_data = {\"input_1\": np.random.randn(10, 3), \"input_2\": np.random.randn(10, 4)} >>> input_tensors = mt(input_data) Source code in simulai/io.py 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 class MakeTensor : r \"\"\"This class is used to make torch tensors from numpy arrays or dictionaries. Args: input_names (List[str]): list of input names. output_names (List[str]): list of output names. Note: - input_tensors will be a list of tensors in case of numpy array and dictionary inputs. - The input_data should be numpy array with shape (batch_size, features_size) or dictionary with keys from input_names and values with shape (batch_size, features_size) if input_names and output_names are provided. - The input_data will be converted to float32 dtype. - The input_data will be put on the device specified by the device parameter, which defaults to 'cpu'. - If input_data is None, it will raise an exception. Example:: # Creating a MakeTensor object with input and output names # Converting numpy array to torch tensor # Converting dictionary to torch tensors >>> mt = MakeTensor(input_names=[\"input_1\", \"input_2\"], output_names=[\"output\"]) >>> input_data = np.random.randn(10, 3) >>> input_tensors = mt(input_data) >>> input_data = {\"input_1\": np.random.randn(10, 3), \"input_2\": np.random.randn(10, 4)} >>> input_tensors = mt(input_data) \"\"\" def __init__ ( self , input_names = None , output_names = None ): self . input_names = input_names self . output_names = output_names def _make_tensor ( self , input_data : np . ndarray = None , device : str = \"cpu\" ) -> List [ torch . Tensor ]: r \"\"\"Convert input_data to a list of torch tensors. Args: input_data (np.ndarray, optional): (Default value = None) device (str, optional): (Default value = \"cpu\") Returns: List[torch.Tensor]: list of tensors. \"\"\" inputs_list = list ( torch . split ( input_data , 1 , dim =- 1 )) for vv , var in enumerate ( inputs_list ): var . requires_grad = True var = var . to ( device ) inputs_list [ vv ] = var # var = var[..., None] return inputs_list def _make_tensor_dict ( self , input_data : dict = None , device : str = \"cpu\" ) -> dict : r \"\"\"Convert input_data to a dictionary of torch tensors. Args: input_data (dict, optional): (Default value = None) device (str, optional): (Default value = \"cpu\") Returns: dict: dictionary of tensors. \"\"\" inputs_dict = dict () for key , item in input_data . items (): item . requires_grad = True item = item . to ( device ) inputs_dict [ key ] = item return inputs_dict def __call__ ( self , input_data : Union [ np . ndarray , torch . Tensor , Dict [ str , np . ndarray ]] = None , device : str = \"cpu\" , ) -> List [ torch . Tensor ]: r \"\"\"Make tensors from input_data. Args: input_data (Union[np.ndarray, torch.Tensor, Dict[str, np.ndarray]], optional): input data to be converted. (Default value = None) device (str, optional): (Default value = \"cpu\") Returns: Union[List[torch.Tensor], dict]: Raises: - Exception: \"\"\" if type ( input_data ) == np . ndarray : input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) inputs_list = self . _make_tensor ( input_data = input_data , device = device ) return inputs_list if type ( input_data ) == torch . Tensor : inputs_list = self . _make_tensor ( input_data = input_data , device = device ) return inputs_list elif type ( input_data ) == dict : inputs_list = self . _make_tensor_dict ( input_data = input_data , device = device ) return inputs_list else : raise Exception ( f \"The type { type ( input_data ) } for input_data is not supported.\" )","title":"MakeTensor"},{"location":"simulai_io/#simulai.io.MakeTensor.__call__","text":"Make tensors from input_data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor , Dict [ str , ndarray ]] input data to be converted. (Default value = None) None device str (Default value = \"cpu\") 'cpu' Returns: Type Description List [ Tensor ] Union[List[torch.Tensor], dict]: Raises: Type Description - Exception Source code in simulai/io.py 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 def __call__ ( self , input_data : Union [ np . ndarray , torch . Tensor , Dict [ str , np . ndarray ]] = None , device : str = \"cpu\" , ) -> List [ torch . Tensor ]: r \"\"\"Make tensors from input_data. Args: input_data (Union[np.ndarray, torch.Tensor, Dict[str, np.ndarray]], optional): input data to be converted. (Default value = None) device (str, optional): (Default value = \"cpu\") Returns: Union[List[torch.Tensor], dict]: Raises: - Exception: \"\"\" if type ( input_data ) == np . ndarray : input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) inputs_list = self . _make_tensor ( input_data = input_data , device = device ) return inputs_list if type ( input_data ) == torch . Tensor : inputs_list = self . _make_tensor ( input_data = input_data , device = device ) return inputs_list elif type ( input_data ) == dict : inputs_list = self . _make_tensor_dict ( input_data = input_data , device = device ) return inputs_list else : raise Exception ( f \"The type { type ( input_data ) } for input_data is not supported.\" )","title":"__call__()"},{"location":"simulai_io/#gaussiannoise","text":"Bases: Dataset GaussianNoise(stddev=0.01, input_data=None) A dataset that applies Gaussian noise to input data. Example:: >>> import numpy as np >>> input_data = np.random.rand(100,100) >>> dataset = GaussianNoise(stddev=0.05, input_data=input_data) >>> dataset.size() (100, 100) Source code in simulai/io.py 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 class GaussianNoise ( Dataset ): r \"\"\"GaussianNoise(stddev=0.01, input_data=None) A dataset that applies Gaussian noise to input data. Example:: >>> import numpy as np >>> input_data = np.random.rand(100,100) >>> dataset = GaussianNoise(stddev=0.05, input_data=input_data) >>> dataset.size() (100, 100) \"\"\" def __init__ ( self , stddev : float = 0.01 , input_data : Union [ np . ndarray , Tensor ] = None ): super ( Dataset , self ) . __init__ () self . stddev = stddev if isinstance ( input_data , np . ndarray ): input_data_ = torch . from_numpy ( input_data . astype ( \"float32\" )) else : input_data_ = input_data self . input_data = input_data_ self . data_shape = tuple ( self . input_data . shape ) def size ( self ): return self . data_shape def __call__ ( self ): return ( 1 + self . stddev * torch . randn ( * self . data_shape )) * self . input_data","title":"GaussianNoise"},{"location":"simulai_io/#tokenizer","text":"Wrapper for multiple tokenization approaches Source code in simulai/io.py 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 class Tokenizer : \"\"\"Wrapper for multiple tokenization approaches\"\"\" def __init__ ( self , kind : str = \"time_indexer\" ): \"\"\" Args: kind (str): The kind of tokenization to be used. (Default value = \"time_indexer\") \"\"\" self . kind = kind # Tokenizer selection if self . kind == \"time_indexer\" : self . input_tokenizer = self . _make_time_input_sequence self . target_tokenizer = self . _make_time_target_sequence else : raise Exception ( f \"The tokenization option { self . kind } is not available.\" ) def generate_input_tokens ( self , input_data : Union [ np . ndarray , torch . Tensor ], ** kwargs ) -> torch . Tensor : \"\"\"Generating the input sequence of tokens.\"\"\" return self . input_tokenizer ( input_data , ** kwargs ) def generate_target_tokens ( self , target_data : Union [ np . ndarray , torch . Tensor ], ** kwargs ) -> torch . Tensor : \"\"\"Generating the target sequence of tokens.\"\"\" return self . target_tokenizer ( target_data , ** kwargs ) def _make_time_input_sequence ( self , src : Union [ np . ndarray , torch . Tensor ], num_step : int = None , step : float = None ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\"Simple tokenization based on repeating samples and time-indexing them. Args: src (Union[np.ndarray, torch.Tensor]): The dataset to be tokenized. num_step (int): number of timesteps for each batch. (Default value: None) step (float): Size of the timestep. (Default value: None) Returns: Union[np.ndarray, torch.Tensor]: The tokenized input dataset. \"\"\" dim = num_step src = np . repeat ( np . expand_dims ( src , axis = 1 ), dim , axis = 1 ) src_shape = src . shape src_shape_list = list ( src_shape ) src_shape_list [ - 1 ] += 1 src_final = np . zeros ( tuple ( src_shape_list )) src_final [:, :, : - 1 ] = src for i in range ( num_step ): src_final [:, i , - 1 ] += step * i return src_final [: - num_step + 1 ] def _make_time_target_sequence ( self , src : Union [ np . ndarray , torch . Tensor ], num_step : int = None ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\"Simple tokenization based on repeating samples and time-indexing them. Args: src (Union[np.ndarray, torch.Tensor]): The dataset to be tokenized. num_step (int): number of timesteps for each batch. (Default value: None) Returns: Union[np.ndarray, torch.Tensor]: The tokenized target dataset. \"\"\" moving_window = MovingWindow ( history_size = 1 , skip_size = 1 , horizon_size = num_step - 1 ) input_data , output_data = moving_window ( input_data = src , output_data = src ) return np . concatenate ([ input_data , output_data ], axis = 1 )","title":"Tokenizer"},{"location":"simulai_io/#simulai.io.Tokenizer.__init__","text":"Parameters: Name Type Description Default kind str The kind of tokenization to be used. (Default value = \"time_indexer\") 'time_indexer' Source code in simulai/io.py 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 def __init__ ( self , kind : str = \"time_indexer\" ): \"\"\" Args: kind (str): The kind of tokenization to be used. (Default value = \"time_indexer\") \"\"\" self . kind = kind # Tokenizer selection if self . kind == \"time_indexer\" : self . input_tokenizer = self . _make_time_input_sequence self . target_tokenizer = self . _make_time_target_sequence else : raise Exception ( f \"The tokenization option { self . kind } is not available.\" )","title":"__init__()"},{"location":"simulai_io/#simulai.io.Tokenizer.generate_input_tokens","text":"Generating the input sequence of tokens. Source code in simulai/io.py 1810 1811 1812 1813 1814 def generate_input_tokens ( self , input_data : Union [ np . ndarray , torch . Tensor ], ** kwargs ) -> torch . Tensor : \"\"\"Generating the input sequence of tokens.\"\"\" return self . input_tokenizer ( input_data , ** kwargs )","title":"generate_input_tokens()"},{"location":"simulai_io/#simulai.io.Tokenizer.generate_target_tokens","text":"Generating the target sequence of tokens. Source code in simulai/io.py 1816 1817 1818 1819 1820 def generate_target_tokens ( self , target_data : Union [ np . ndarray , torch . Tensor ], ** kwargs ) -> torch . Tensor : \"\"\"Generating the target sequence of tokens.\"\"\" return self . target_tokenizer ( target_data , ** kwargs )","title":"generate_target_tokens()"},{"location":"simulai_models/","text":"simulai.models # Transformer # Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_transformer.py 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 class Transformer ( NetworkTemplate ): def __init__ ( self , num_heads_encoder : int = 1 , num_heads_decoder : int = 1 , embed_dim_encoder : int = Union [ int , Tuple ], embed_dim_decoder : int = Union [ int , Tuple ], encoder_activation : Union [ str , torch . nn . Module ] = \"relu\" , decoder_activation : Union [ str , torch . nn . Module ] = \"relu\" , encoder_mlp_layer_config : dict = None , decoder_mlp_layer_config : dict = None , number_of_encoders : int = 1 , number_of_decoders : int = 1 , ) -> None : r \"\"\"A classical encoder-decoder transformer: Graphical example: Example:: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Args: num_heads_encoder (int, optional): The number of heads for the self-attention layer of the encoder. (Default value = 1) num_heads_decoder (int, optional): The number of heads for the self-attention layer of the decoder. (Default value = 1) embed_dim_encoder (int, optional): The dimension of the embedding for the encoder. (Default value = Union[int, Tuple]) embed_dim_decoder (int, optional): The dimension of the embedding for the decoder. (Default value = Union[int, Tuple]) encoder_activation (Union[str, torch.nn.Module], optional): The activation to be used in all the encoder layers. (Default value = 'relu') decoder_activation (Union[str, torch.nn.Module], optional): The activation to be used in all the decoder layers. (Default value = 'relu') encoder_mlp_layer_config (dict, optional): A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) decoder_mlp_layer_config (dict, optional): A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) number_of_encoders (int, optional): The number of encoders to be used. (Default value = 1) number_of_decoders (int, optional): The number of decoders to be used. (Default value = 1) \"\"\" super ( Transformer , self ) . __init__ () self . num_heads_encoder = num_heads_encoder self . num_heads_decoder = num_heads_decoder self . embed_dim_encoder = embed_dim_encoder self . embed_dim_decoder = embed_dim_decoder self . encoder_mlp_layer_dict = encoder_mlp_layer_config self . decoder_mlp_layer_dict = decoder_mlp_layer_config self . number_of_encoders = number_of_encoders self . number_of_decoders = number_of_encoders self . encoder_activation = encoder_activation self . decoder_activation = decoder_activation self . encoder_mlp_layers_list = list () self . decoder_mlp_layers_list = list () # Creating independent copies for the MLP layers which will be used # by the multiple encoders/decoders. for e in range ( self . number_of_encoders ): self . encoder_mlp_layers_list . append ( DenseNetwork ( ** self . encoder_mlp_layer_dict ) ) for d in range ( self . number_of_decoders ): self . decoder_mlp_layers_list . append ( DenseNetwork ( ** self . decoder_mlp_layer_dict ) ) # Defining the encoder architecture self . EncoderStage = torch . nn . Sequential ( * [ BasicEncoder ( num_heads = self . num_heads_encoder , activation = self . encoder_activation , mlp_layer = self . encoder_mlp_layers_list [ e ], embed_dim = self . embed_dim_encoder , ) for e in range ( self . number_of_encoders ) ] ) # Defining the decoder architecture self . DecoderStage = torch . nn . ModuleList ( [ BasicDecoder ( num_heads = self . num_heads_decoder , activation = self . decoder_activation , mlp_layer = self . decoder_mlp_layers_list [ d ], embed_dim = self . embed_dim_decoder , ) for d in range ( self . number_of_decoders ) ] ) self . weights = list () for e , encoder_e in enumerate ( self . EncoderStage ): self . weights += encoder_e . weights self . add_module ( f \"encoder_ { e } \" , encoder_e ) for d , decoder_d in enumerate ( self . DecoderStage ): self . weights += decoder_d . weights self . add_module ( f \"decoder_ { d } \" , decoder_d ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input dataset. (Default value = None) Returns: torch.Tensor: The transformer output. \"\"\" encoder_output = self . EncoderStage ( input_data ) current_input = input_data for decoder in self . DecoderStage : output = decoder ( input_data = current_input , encoder_output = encoder_output ) current_input = output return output def summary ( self ): \"\"\"It prints a general view of the architecture.\"\"\" print ( self ) __init__ ( num_heads_encoder = 1 , num_heads_decoder = 1 , embed_dim_encoder = Union [ int , Tuple ], embed_dim_decoder = Union [ int , Tuple ], encoder_activation = 'relu' , decoder_activation = 'relu' , encoder_mlp_layer_config = None , decoder_mlp_layer_config = None , number_of_encoders = 1 , number_of_decoders = 1 ) # A classical encoder-decoder transformer: Graphical example: Example:: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Parameters: Name Type Description Default num_heads_encoder int The number of heads for the self-attention layer of the encoder. (Default value = 1) 1 num_heads_decoder int The number of heads for the self-attention layer of the decoder. (Default value = 1) 1 embed_dim_encoder int The dimension of the embedding for the encoder. (Default value = Union[int, Tuple]) Union [ int , Tuple ] embed_dim_decoder int The dimension of the embedding for the decoder. (Default value = Union[int, Tuple]) Union [ int , Tuple ] encoder_activation Union [ str , Module ] The activation to be used in all the encoder layers. (Default value = 'relu') 'relu' decoder_activation Union [ str , Module ] The activation to be used in all the decoder layers. (Default value = 'relu') 'relu' encoder_mlp_layer_config dict A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) None decoder_mlp_layer_config dict A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) None number_of_encoders int The number of encoders to be used. (Default value = 1) 1 number_of_decoders int The number of decoders to be used. (Default value = 1) 1 Source code in simulai/models/_pytorch_models/_transformer.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 def __init__ ( self , num_heads_encoder : int = 1 , num_heads_decoder : int = 1 , embed_dim_encoder : int = Union [ int , Tuple ], embed_dim_decoder : int = Union [ int , Tuple ], encoder_activation : Union [ str , torch . nn . Module ] = \"relu\" , decoder_activation : Union [ str , torch . nn . Module ] = \"relu\" , encoder_mlp_layer_config : dict = None , decoder_mlp_layer_config : dict = None , number_of_encoders : int = 1 , number_of_decoders : int = 1 , ) -> None : r \"\"\"A classical encoder-decoder transformer: Graphical example: Example:: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Args: num_heads_encoder (int, optional): The number of heads for the self-attention layer of the encoder. (Default value = 1) num_heads_decoder (int, optional): The number of heads for the self-attention layer of the decoder. (Default value = 1) embed_dim_encoder (int, optional): The dimension of the embedding for the encoder. (Default value = Union[int, Tuple]) embed_dim_decoder (int, optional): The dimension of the embedding for the decoder. (Default value = Union[int, Tuple]) encoder_activation (Union[str, torch.nn.Module], optional): The activation to be used in all the encoder layers. (Default value = 'relu') decoder_activation (Union[str, torch.nn.Module], optional): The activation to be used in all the decoder layers. (Default value = 'relu') encoder_mlp_layer_config (dict, optional): A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) decoder_mlp_layer_config (dict, optional): A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) number_of_encoders (int, optional): The number of encoders to be used. (Default value = 1) number_of_decoders (int, optional): The number of decoders to be used. (Default value = 1) \"\"\" super ( Transformer , self ) . __init__ () self . num_heads_encoder = num_heads_encoder self . num_heads_decoder = num_heads_decoder self . embed_dim_encoder = embed_dim_encoder self . embed_dim_decoder = embed_dim_decoder self . encoder_mlp_layer_dict = encoder_mlp_layer_config self . decoder_mlp_layer_dict = decoder_mlp_layer_config self . number_of_encoders = number_of_encoders self . number_of_decoders = number_of_encoders self . encoder_activation = encoder_activation self . decoder_activation = decoder_activation self . encoder_mlp_layers_list = list () self . decoder_mlp_layers_list = list () # Creating independent copies for the MLP layers which will be used # by the multiple encoders/decoders. for e in range ( self . number_of_encoders ): self . encoder_mlp_layers_list . append ( DenseNetwork ( ** self . encoder_mlp_layer_dict ) ) for d in range ( self . number_of_decoders ): self . decoder_mlp_layers_list . append ( DenseNetwork ( ** self . decoder_mlp_layer_dict ) ) # Defining the encoder architecture self . EncoderStage = torch . nn . Sequential ( * [ BasicEncoder ( num_heads = self . num_heads_encoder , activation = self . encoder_activation , mlp_layer = self . encoder_mlp_layers_list [ e ], embed_dim = self . embed_dim_encoder , ) for e in range ( self . number_of_encoders ) ] ) # Defining the decoder architecture self . DecoderStage = torch . nn . ModuleList ( [ BasicDecoder ( num_heads = self . num_heads_decoder , activation = self . decoder_activation , mlp_layer = self . decoder_mlp_layers_list [ d ], embed_dim = self . embed_dim_decoder , ) for d in range ( self . number_of_decoders ) ] ) self . weights = list () for e , encoder_e in enumerate ( self . EncoderStage ): self . weights += encoder_e . weights self . add_module ( f \"encoder_ { e } \" , encoder_e ) for d , decoder_d in enumerate ( self . DecoderStage ): self . weights += decoder_d . weights self . add_module ( f \"decoder_ { d } \" , decoder_d ) forward ( input_data = None ) # Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] The input dataset. (Default value = None) None Returns: Type Description Tensor torch.Tensor: The transformer output. Source code in simulai/models/_pytorch_models/_transformer.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input dataset. (Default value = None) Returns: torch.Tensor: The transformer output. \"\"\" encoder_output = self . EncoderStage ( input_data ) current_input = input_data for decoder in self . DecoderStage : output = decoder ( input_data = current_input , encoder_output = encoder_output ) current_input = output return output summary () # It prints a general view of the architecture. Source code in simulai/models/_pytorch_models/_transformer.py 296 297 298 299 def summary ( self ): \"\"\"It prints a general view of the architecture.\"\"\" print ( self ) U-Net # Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_unet.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 class UNet ( NetworkTemplate ): def __init__ ( self , layers_config : Dict = None , intermediary_outputs_indices : List [ int ] = None , intermediary_inputs_indices : List [ int ] = None , encoder_extra_args : Dict = dict (), decoder_extra_args : Dict = dict (), ) -> None : \"\"\"U-Net. Args: layers_config (Dict, optional): A dictionary containing the complete configuration for the U-Net encoder and decoder. (Default value = None) intermediary_outputs_indices (List[int], optional): A list of indices for indicating the encoder outputs. (Default value = None) intermediary_inputs_indices (List[int], optional): A list of indices for indicating the decoder inputs. (Default value = None) encoder_extra_args (Dict, optional): A dictionary containing extra arguments for the encoder. (Default value = dict()) decoder_extra_args (Dict, optional): A dictionary containing extra arguments for the decoder. (Default value = dict()) \"\"\" super ( UNet , self ) . __init__ () self . layers_config = layers_config self . intermediary_outputs_indices = intermediary_outputs_indices self . intermediary_inputs_indices = intermediary_inputs_indices self . layers_config_encoder = self . layers_config [ \"encoder\" ] self . layers_config_decoder = self . layers_config [ \"decoder\" ] self . encoder_activations = self . layers_config [ \"encoder_activations\" ] self . decoder_activations = self . layers_config [ \"decoder_activations\" ] self . encoder_horizontal_outputs = dict () # Configuring the encoder encoder_type = self . layers_config_encoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . encoder = CNNUnetEncoder ( layers = self . layers_config_encoder [ \"architecture\" ], activations = self . encoder_activations , intermediary_outputs_indices = self . intermediary_outputs_indices , case = \"2d\" , name = \"encoder\" , ** encoder_extra_args , ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) # Configuring the decoder decoder_type = self . layers_config_decoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . decoder = CNNUnetDecoder ( layers = self . layers_config_decoder [ \"architecture\" ], activations = self . decoder_activations , intermediary_inputs_indices = self . intermediary_inputs_indices , case = \"2d\" , name = \"decoder\" , ** decoder_extra_args , ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"The U-Net forward method. Args: input_data (Union[torch.Tensor, np.ndarray], optional): A dataset to be inputted in the CNN U-Net encoder. (Default value = None) Returns: torch.Tensor: The U-Net output. \"\"\" encoder_main_output , encoder_intermediary_outputs = self . encoder ( input_data = input_data ) output = self . decoder ( input_data = encoder_main_output , intermediary_encoder_outputs = encoder_intermediary_outputs , ) return output def summary ( self ): \"\"\"It shows a general view of the architecture.\"\"\" print ( self ) __init__ ( layers_config = None , intermediary_outputs_indices = None , intermediary_inputs_indices = None , encoder_extra_args = dict (), decoder_extra_args = dict ()) # U-Net. Parameters: Name Type Description Default layers_config Dict A dictionary containing the complete configuration for the None intermediary_outputs_indices List [ int ] A list of indices for indicating the encoder outputs. (Default value = None) None intermediary_inputs_indices List [ int ] A list of indices for indicating the decoder inputs. (Default value = None) None encoder_extra_args Dict A dictionary containing extra arguments for the encoder. (Default value = dict()) dict () decoder_extra_args Dict A dictionary containing extra arguments for the decoder. (Default value = dict()) dict () Source code in simulai/models/_pytorch_models/_unet.py 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 def __init__ ( self , layers_config : Dict = None , intermediary_outputs_indices : List [ int ] = None , intermediary_inputs_indices : List [ int ] = None , encoder_extra_args : Dict = dict (), decoder_extra_args : Dict = dict (), ) -> None : \"\"\"U-Net. Args: layers_config (Dict, optional): A dictionary containing the complete configuration for the U-Net encoder and decoder. (Default value = None) intermediary_outputs_indices (List[int], optional): A list of indices for indicating the encoder outputs. (Default value = None) intermediary_inputs_indices (List[int], optional): A list of indices for indicating the decoder inputs. (Default value = None) encoder_extra_args (Dict, optional): A dictionary containing extra arguments for the encoder. (Default value = dict()) decoder_extra_args (Dict, optional): A dictionary containing extra arguments for the decoder. (Default value = dict()) \"\"\" super ( UNet , self ) . __init__ () self . layers_config = layers_config self . intermediary_outputs_indices = intermediary_outputs_indices self . intermediary_inputs_indices = intermediary_inputs_indices self . layers_config_encoder = self . layers_config [ \"encoder\" ] self . layers_config_decoder = self . layers_config [ \"decoder\" ] self . encoder_activations = self . layers_config [ \"encoder_activations\" ] self . decoder_activations = self . layers_config [ \"decoder_activations\" ] self . encoder_horizontal_outputs = dict () # Configuring the encoder encoder_type = self . layers_config_encoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . encoder = CNNUnetEncoder ( layers = self . layers_config_encoder [ \"architecture\" ], activations = self . encoder_activations , intermediary_outputs_indices = self . intermediary_outputs_indices , case = \"2d\" , name = \"encoder\" , ** encoder_extra_args , ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) # Configuring the decoder decoder_type = self . layers_config_decoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . decoder = CNNUnetDecoder ( layers = self . layers_config_decoder [ \"architecture\" ], activations = self . decoder_activations , intermediary_inputs_indices = self . intermediary_inputs_indices , case = \"2d\" , name = \"decoder\" , ** decoder_extra_args , ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) forward ( input_data = None ) # The U-Net forward method. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] A dataset to be inputted in the CNN U-Net encoder. (Default value = None) None Returns: Type Description Tensor torch.Tensor: The U-Net output. Source code in simulai/models/_pytorch_models/_unet.py 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"The U-Net forward method. Args: input_data (Union[torch.Tensor, np.ndarray], optional): A dataset to be inputted in the CNN U-Net encoder. (Default value = None) Returns: torch.Tensor: The U-Net output. \"\"\" encoder_main_output , encoder_intermediary_outputs = self . encoder ( input_data = input_data ) output = self . decoder ( input_data = encoder_main_output , intermediary_encoder_outputs = encoder_intermediary_outputs , ) return output summary () # It shows a general view of the architecture. Source code in simulai/models/_pytorch_models/_unet.py 280 281 282 283 def summary ( self ): \"\"\"It shows a general view of the architecture.\"\"\" print ( self ) DeepONet # Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_deeponet.pyclass DeepONet ( NetworkTemplate ): name = \"deeponet\" engine = \"torch\" def __init__ ( self , trunk_network : NetworkTemplate = None , branch_network : NetworkTemplate = None , decoder_network : NetworkTemplate = None , # The decoder network is optional and considered var_dim : int = 1 , # less effective than the output reshaping alternative devices : Union [ str , list ] = \"cpu\" , product_type : str = None , rescale_factors : np . ndarray = None , model_id : str = None , use_bias : bool = False , ) -> None : \"\"\"Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Args: trunk_network (NetworkTemplate, optional): Subnetwork for processing the coordinates inputs. (Default value = None) branch_network (NetworkTemplate, optional): Subnetwork for processing the forcing/conditioning inputs. (Default value = None) decoder_network (NetworkTemplate, optional): Subnetworks for converting the embedding to the output (optional). (Default value = None) devices (Union[str, list], optional): Devices in which the model will be executed. (Default value = \"cpu\") product_type (str, optional): Type of product to execute in the embedding space. (Default value = None) rescale_factors (np.ndarray, optional): Values used for rescaling the network outputs for a given order of magnitude. (Default value = None) model_id (str, optional): Name for the model (Default value = None) use_bias (bool, optional): (Default value = False) \"\"\" super ( DeepONet , self ) . __init__ ( devices = devices ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . use_bias = use_bias self . trunk_network = self . to_wrap ( entity = trunk_network , device = self . device ) self . branch_network = self . to_wrap ( entity = branch_network , device = self . device ) self . add_module ( \"trunk_network\" , self . trunk_network ) self . add_module ( \"branch_network\" , self . branch_network ) if decoder_network is not None : self . decoder_network = self . to_wrap ( entity = decoder_network , device = self . device ) self . add_module ( \"decoder_network\" , self . decoder_network ) else : self . decoder_network = decoder_network self . product_type = product_type self . model_id = model_id self . var_dim = var_dim # Rescaling factors for the output if rescale_factors is not None : assert ( len ( rescale_factors ) == var_dim ), \"The number of rescaling factors must be equal to var_dim.\" rescale_factors = torch . from_numpy ( rescale_factors . astype ( \"float32\" )) self . rescale_factors = self . to_wrap ( entity = rescale_factors , device = self . device ) else : self . rescale_factors = None # Checking up whether the output of each subnetwork are in correct shape assert self . _latent_dimension_is_correct ( self . trunk_network . output_size ), ( \"The trunk network must have\" \" one-dimensional output , \" \"but received\" f \" { self . trunk_network . output_size } \" ) assert self . _latent_dimension_is_correct ( self . branch_network . output_size ), ( \"The branch network must have\" \" one-dimensional output,\" \" but received\" f \" { self . branch_network . output_size } \" ) # If bias is being used, check whether the network outputs are compatible. if self . use_bias : print ( \"Bias is being used.\" ) self . _bias_compatibility_is_correct ( dim_trunk = self . trunk_network . output_size , dim_branch = self . branch_network . output_size , ) self . bias_wrapper = self . _wrapper_bias_active else : self . bias_wrapper = self . _wrapper_bias_inactive # Using a decoder on top of the model or not if self . decoder_network is not None : self . decoder_wrapper = self . _wrapper_decoder_active else : self . decoder_wrapper = self . _wrapper_decoder_inactive # Using rescaling factors or not if rescale_factors is not None : self . rescale_wrapper = self . _wrapper_rescale_active else : self . rescale_wrapper = self . _wrapper_rescale_inactive # Checking the compatibility of the subnetworks outputs for each kind of product being employed. if self . product_type != \"dense\" : output_branch = self . branch_network . output_size output_trunk = self . trunk_network . output_size # It checks if the inner product operation can be performed. if not self . use_bias : assert output_branch == output_trunk , ( f \"The output dimensions for the sub-networks\" f \" trunk and branch must be equal but are\" f \" { output_branch } \" f \" and { output_trunk } \" ) else : print ( \"Bias compatibility was already verified.\" ) else : output_branch = self . branch_network . output_size assert not output_branch % self . var_dim , ( f \"The number of branch latent outputs must\" f \" be divisible by the number of variables,\" f \" but received { output_branch } \" f \" and { self . var_dim } \" ) self . subnetworks = [ net for net in [ self . trunk_network , self . branch_network , self . decoder_network ] if net is not None ] self . input_trunk = None self . input_branch = None self . output = None self . var_map = dict () # TODO Checking up if the input of the decoder network has the correct dimension if self . decoder_network is not None : print ( \"Decoder is being used.\" ) else : pass # Selecting the correct forward approach to be used self . _forward = self . _forward_selector_ () self . subnetworks_names = [ \"trunk\" , \"branch\" ] def _latent_dimension_is_correct ( self , dim : Union [ int , tuple ]) -> bool : \"\"\"It checks if the latent dimension is consistent. Args: dim (Union[int, tuple]): Latent_space_dimension. Returns: bool: The confirmation about the dimensionality correctness. \"\"\" if type ( dim ) == int : return True elif type ( dim ) == tuple : if len ( tuple ) == 1 : return True else : return False def _bias_compatibility_is_correct ( self , dim_trunk : Union [ int , tuple ], dim_branch : Union [ int , tuple ] ) -> bool : assert dim_branch == dim_trunk + self . var_dim , ( \"When using bias, the dimension\" + \"of the branch output should be\" + \"trunk output + var_dim.\" ) def _forward_dense ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\"Forward method used when the embeddings are multiplied using a matrix-like product, it means, the trunk network outputs serve as \"interpolation basis\" for the branch outputs. Args: output_trunk (torch.Tensor, optional): The embedding generated by the trunk network. (Default value = None) output_branch (torch.Tensor, optional): The embedding generated by the branch network. (Default value = None) Returns: torch.Tensor: The product between the two embeddings. \"\"\" latent_dim = int ( output_branch . shape [ - 1 ] / self . var_dim ) output_branch_reshaped = torch . reshape ( output_branch , ( - 1 , self . var_dim , latent_dim ) ) output = torch . matmul ( output_branch_reshaped , output_trunk [ ... , None ]) output = torch . squeeze ( output ) return output def _forward_pointwise ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\"Forward method used when the embeddings are multiplied using a simple point-wise product, after that a reshaping is applied in order to produce multiple outputs. Args: output_trunk (torch.Tensor, optional): The embedding generated by the trunk network. (Default value = None) output_branch (torch.Tensor, optional): The embedding generated by the branch network. (Default value = None) Returns: torch.Tensor: The product between the two embeddings. \"\"\" latent_dim = int ( output_trunk . shape [ - 1 ] / self . var_dim ) output_trunk_reshaped = torch . reshape ( output_trunk , ( - 1 , latent_dim , self . var_dim ) ) output_branch_reshaped = torch . reshape ( output_branch , ( - 1 , latent_dim , self . var_dim ) ) output = torch . sum ( output_trunk_reshaped * output_branch_reshaped , dim =- 2 , keepdim = False ) return output def _forward_vanilla ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\"Forward method used when the embeddings are multiplied using a simple point-wise product. Args: output_trunk (torch.Tensor, optional): The embedding generated by the trunk network. (Default value = None) output_branch (torch.Tensor, optional): The embedding generated by the branch network. (Default value = None) Returns: torch.Tensor: The product between the two embeddings. \"\"\" output = torch . sum ( output_trunk * output_branch , dim =- 1 , keepdim = True ) return output def _forward_selector_ ( self ) -> callable : \"\"\"It selects the forward method to be used. Returns: callable : The callable corresponding to the required forward method. \"\"\" if self . var_dim > 1 : # It operates as a typical dense layer if self . product_type == \"dense\" : return self . _forward_dense # It executes an inner product by parts between the outputs # of the subnetworks branch and trunk else : return self . _forward_pointwise else : return self . _forward_vanilla @property def _var_map ( self ) -> dict : # It checks all the data arrays in self.var_map have the same # batches dimension batches_dimensions = set ([ value . shape [ 0 ] for value in self . var_map . values ()]) assert ( len ( batches_dimensions ) == 1 ), \"This dataset is not proper to apply shuffling\" dim = list ( batches_dimensions )[ 0 ] indices = np . arange ( dim ) np . random . shuffle ( indices ) var_map_shuffled = { key : value [ indices ] for key , value in self . var_map . items ()} return var_map_shuffled @property def weights ( self ) -> list : return sum ([ net . weights for net in self . subnetworks ], []) # Now, a sequence of wrappers def _wrapper_bias_inactive ( self , output_trunk : Union [ np . ndarray , torch . Tensor ] = None , output_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : output = self . _forward ( output_trunk = output_trunk , output_branch = output_branch ) return output def _wrapper_bias_active ( self , output_trunk : Union [ np . ndarray , torch . Tensor ] = None , output_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : output_branch_ = output_branch [:, : - self . var_dim ] bias = output_branch [:, - self . var_dim :] output = ( self . _forward ( output_trunk = output_trunk , output_branch = output_branch_ ) + bias ) return output def _wrapper_decoder_active ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return self . decoder_network . forward ( input_data = input_data ) def _wrapper_decoder_inactive ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data def _wrapper_rescale_active ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data * self . rescale_factors def _wrapper_rescale_inactive ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data def forward ( self , input_trunk : Union [ np . ndarray , torch . Tensor ] = None , input_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : \"\"\"Wrapper forward method. Args: input_trunk (Union[np.ndarray, torch.Tensor], optional): (Default value = None) input_branch (Union[np.ndarray, torch.Tensor], optional): (Default value = None) Returns: torch.Tensor: The result of all the hidden operations in the network. \"\"\" # Forward method execution output_trunk = self . to_wrap ( entity = self . trunk_network . forward ( input_trunk ), device = self . device ) output_branch = self . to_wrap ( entity = self . branch_network . forward ( input_branch ), device = self . device ) # Wrappers are applied to execute user-defined operations. # When those operations are not selected, these wrappers simply # bypass the inputs. output = self . bias_wrapper ( output_trunk = output_trunk , output_branch = output_branch ) return self . rescale_wrapper ( input_data = self . decoder_wrapper ( input_data = output )) @guarantee_device def eval ( self , trunk_data : Union [ np . ndarray , torch . Tensor ] = None , branch_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> np . ndarray : \"\"\"It uses the network to make evaluations. Args: trunk_data (Union[np.ndarray, torch.Tensor], optional): (Default value = None) branch_data (Union[np.ndarray, torch.Tensor], optional): (Default value = None) Returns: np.ndarray: The result of all the hidden operations in the network. \"\"\" output_tensor = self . forward ( input_trunk = trunk_data , input_branch = branch_data ) return output_tensor . cpu () . detach () . numpy () @guarantee_device def eval_subnetwork ( self , name : str = None , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"It evaluates the output of DeepONet subnetworks. Args: name (str, optional): Name of the subnetwork. (Default value = None) input_data (Union[np.ndarray, torch.Tensor], optional): The data used as input for the subnetwork. (Default value = None) Returns: np.ndarray: The evaluation performed by the subnetwork. \"\"\" assert ( name in self . subnetworks_names ), f \"The name { name } is not a subnetwork of { self } .\" network_to_be_used = getattr ( self , name + \"_network\" ) return network_to_be_used . forward ( input_data ) . cpu () . detach () . numpy () def summary ( self ) -> None : print ( \"Trunk Network:\" ) self . trunk_network . summary () print ( \"Branch Network:\" ) self . branch_network . summary () __init__ ( trunk_network = None , branch_network = None , decoder_network = None , var_dim = 1 , devices = 'cpu' , product_type = None , rescale_factors = None , model_id = None , use_bias = False ) # Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Parameters: Name Type Description Default trunk_network NetworkTemplate Subnetwork for processing the coordinates inputs. (Default value = None) None branch_network NetworkTemplate Subnetwork for processing the forcing/conditioning inputs. (Default value = None) None decoder_network NetworkTemplate Subnetworks for converting the embedding to the output (optional). (Default value = None) None devices Union [ str , list ] Devices in which the model will be executed. (Default value = \"cpu\") 'cpu' product_type str Type of product to execute in the embedding space. (Default value = None) None rescale_factors ndarray Values used for rescaling the network outputs for a given order of magnitude. (Default value = None) None model_id str Name for the model (Default value = None) None use_bias bool (Default value = False) False Source code in simulai/models/_pytorch_models/_deeponet.pydef __init__ ( self , trunk_network : NetworkTemplate = None , branch_network : NetworkTemplate = None , decoder_network : NetworkTemplate = None , # The decoder network is optional and considered var_dim : int = 1 , # less effective than the output reshaping alternative devices : Union [ str , list ] = \"cpu\" , product_type : str = None , rescale_factors : np . ndarray = None , model_id : str = None , use_bias : bool = False , ) -> None : \"\"\"Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Args: trunk_network (NetworkTemplate, optional): Subnetwork for processing the coordinates inputs. (Default value = None) branch_network (NetworkTemplate, optional): Subnetwork for processing the forcing/conditioning inputs. (Default value = None) decoder_network (NetworkTemplate, optional): Subnetworks for converting the embedding to the output (optional). (Default value = None) devices (Union[str, list], optional): Devices in which the model will be executed. (Default value = \"cpu\") product_type (str, optional): Type of product to execute in the embedding space. (Default value = None) rescale_factors (np.ndarray, optional): Values used for rescaling the network outputs for a given order of magnitude. (Default value = None) model_id (str, optional): Name for the model (Default value = None) use_bias (bool, optional): (Default value = False) \"\"\" super ( DeepONet , self ) . __init__ ( devices = devices ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . use_bias = use_bias self . trunk_network = self . to_wrap ( entity = trunk_network , device = self . device ) self . branch_network = self . to_wrap ( entity = branch_network , device = self . device ) self . add_module ( \"trunk_network\" , self . trunk_network ) self . add_module ( \"branch_network\" , self . branch_network ) if decoder_network is not None : self . decoder_network = self . to_wrap ( entity = decoder_network , device = self . device ) self . add_module ( \"decoder_network\" , self . decoder_network ) else : self . decoder_network = decoder_network self . product_type = product_type self . model_id = model_id self . var_dim = var_dim # Rescaling factors for the output if rescale_factors is not None : assert ( len ( rescale_factors ) == var_dim ), \"The number of rescaling factors must be equal to var_dim.\" rescale_factors = torch . from_numpy ( rescale_factors . astype ( \"float32\" )) self . rescale_factors = self . to_wrap ( entity = rescale_factors , device = self . device ) else : self . rescale_factors = None # Checking up whether the output of each subnetwork are in correct shape assert self . _latent_dimension_is_correct ( self . trunk_network . output_size ), ( \"The trunk network must have\" \" one-dimensional output , \" \"but received\" f \" { self . trunk_network . output_size } \" ) assert self . _latent_dimension_is_correct ( self . branch_network . output_size ), ( \"The branch network must have\" \" one-dimensional output,\" \" but received\" f \" { self . branch_network . output_size } \" ) # If bias is being used, check whether the network outputs are compatible. if self . use_bias : print ( \"Bias is being used.\" ) self . _bias_compatibility_is_correct ( dim_trunk = self . trunk_network . output_size , dim_branch = self . branch_network . output_size , ) self . bias_wrapper = self . _wrapper_bias_active else : self . bias_wrapper = self . _wrapper_bias_inactive # Using a decoder on top of the model or not if self . decoder_network is not None : self . decoder_wrapper = self . _wrapper_decoder_active else : self . decoder_wrapper = self . _wrapper_decoder_inactive # Using rescaling factors or not if rescale_factors is not None : self . rescale_wrapper = self . _wrapper_rescale_active else : self . rescale_wrapper = self . _wrapper_rescale_inactive # Checking the compatibility of the subnetworks outputs for each kind of product being employed. if self . product_type != \"dense\" : output_branch = self . branch_network . output_size output_trunk = self . trunk_network . output_size # It checks if the inner product operation can be performed. if not self . use_bias : assert output_branch == output_trunk , ( f \"The output dimensions for the sub-networks\" f \" trunk and branch must be equal but are\" f \" { output_branch } \" f \" and { output_trunk } \" ) else : print ( \"Bias compatibility was already verified.\" ) else : output_branch = self . branch_network . output_size assert not output_branch % self . var_dim , ( f \"The number of branch latent outputs must\" f \" be divisible by the number of variables,\" f \" but received { output_branch } \" f \" and { self . var_dim } \" ) self . subnetworks = [ net for net in [ self . trunk_network , self . branch_network , self . decoder_network ] if net is not None ] self . input_trunk = None self . input_branch = None self . output = None self . var_map = dict () # TODO Checking up if the input of the decoder network has the correct dimension if self . decoder_network is not None : print ( \"Decoder is being used.\" ) else : pass # Selecting the correct forward approach to be used self . _forward = self . _forward_selector_ () self . subnetworks_names = [ \"trunk\" , \"branch\" ] eval ( trunk_data = None , branch_data = None ) # It uses the network to make evaluations. Parameters: Name Type Description Default trunk_data Union [ ndarray , Tensor ] (Default value = None) None branch_data Union [ ndarray , Tensor ] (Default value = None) None Returns: Type Description ndarray np.ndarray: The result of all the hidden operations in the network. Source code in simulai/models/_pytorch_models/_deeponet.py 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 @guarantee_device def eval ( self , trunk_data : Union [ np . ndarray , torch . Tensor ] = None , branch_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> np . ndarray : \"\"\"It uses the network to make evaluations. Args: trunk_data (Union[np.ndarray, torch.Tensor], optional): (Default value = None) branch_data (Union[np.ndarray, torch.Tensor], optional): (Default value = None) Returns: np.ndarray: The result of all the hidden operations in the network. \"\"\" output_tensor = self . forward ( input_trunk = trunk_data , input_branch = branch_data ) return output_tensor . cpu () . detach () . numpy () eval_subnetwork ( name = None , input_data = None ) # It evaluates the output of DeepONet subnetworks. Parameters: Name Type Description Default name str Name of the subnetwork. (Default value = None) None input_data Union [ ndarray , Tensor ] The data used as input for the subnetwork. (Default value = None) None Returns: Type Description ndarray np.ndarray: The evaluation performed by the subnetwork. Source code in simulai/models/_pytorch_models/_deeponet.py 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 @guarantee_device def eval_subnetwork ( self , name : str = None , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"It evaluates the output of DeepONet subnetworks. Args: name (str, optional): Name of the subnetwork. (Default value = None) input_data (Union[np.ndarray, torch.Tensor], optional): The data used as input for the subnetwork. (Default value = None) Returns: np.ndarray: The evaluation performed by the subnetwork. \"\"\" assert ( name in self . subnetworks_names ), f \"The name { name } is not a subnetwork of { self } .\" network_to_be_used = getattr ( self , name + \"_network\" ) return network_to_be_used . forward ( input_data ) . cpu () . detach () . numpy () forward ( input_trunk = None , input_branch = None ) # Wrapper forward method. Parameters: Name Type Description Default input_trunk Union [ ndarray , Tensor ] (Default value = None) None input_branch Union [ ndarray , Tensor ] (Default value = None) None Returns: Type Description Tensor torch.Tensor: The result of all the hidden operations in the network. Source code in simulai/models/_pytorch_models/_deeponet.py 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 def forward ( self , input_trunk : Union [ np . ndarray , torch . Tensor ] = None , input_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : \"\"\"Wrapper forward method. Args: input_trunk (Union[np.ndarray, torch.Tensor], optional): (Default value = None) input_branch (Union[np.ndarray, torch.Tensor], optional): (Default value = None) Returns: torch.Tensor: The result of all the hidden operations in the network. \"\"\" # Forward method execution output_trunk = self . to_wrap ( entity = self . trunk_network . forward ( input_trunk ), device = self . device ) output_branch = self . to_wrap ( entity = self . branch_network . forward ( input_branch ), device = self . device ) # Wrappers are applied to execute user-defined operations. # When those operations are not selected, these wrappers simply # bypass the inputs. output = self . bias_wrapper ( output_trunk = output_trunk , output_branch = output_branch ) return self . rescale_wrapper ( input_data = self . decoder_wrapper ( input_data = output )) AutoencoderMLP # Bases: NetworkTemplate This is an implementation of a Fully-connected AutoEncoder as Reduced Order Model; A MLP autoencoder architecture consists of two stages: Fully-connected encoder Fully connected decoder Graphical scheme: | | | | | | Z -> | | | | | -> Z_til | | | | | | ENCODER DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderMLP ( NetworkTemplate ): r \"\"\"This is an implementation of a Fully-connected AutoEncoder as Reduced Order Model; A MLP autoencoder architecture consists of two stages: - Fully-connected encoder - Fully connected decoder Graphical scheme: | | | | | | Z -> | | | | | -> Z_til | | | | | | ENCODER DECODER \"\"\" def __init__ ( self , encoder : DenseNetwork = None , decoder : DenseNetwork = None , input_dim : Optional [ int ] = None , output_dim : Optional [ int ] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\"Initialize the AutoencoderMLP network Args: encoder (DenseNetwork, optional): The encoder network architecture. (Default value = None) decoder (DenseNetwork, optional): The decoder network architecture. (Default value = None) input_dim (Optional[int], optional): The input dimensions of the data, by default None. output_dim (Optional[int], optional): The output dimensions of the data, by default None. latent_dim (Optional[int], optional): The dimensions of the latent space, by default None. activation (Optional[Union[list, str]], optional): The activation functions used by the network, by default None. shallow (Optional[bool], optional): Whether the network should be shallow or not, by default False. devices (Union[str, list], optional): The device(s) to be used for allocating subnetworks, by default \"cpu\". name (str, optional): The name of the network, by default None. \"\"\" super ( AutoencoderMLP , self ) . __init__ ( name = name ) self . weights = list () # This option is used when no network is provided # and it uses default choices for the architectures if encoder == None and decoder == None : encoder , decoder = mlp_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , shallow = shallow , ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . shapes_dict = dict () def summary ( self ) -> None : \"\"\"Prints the summary of the network architecture\"\"\" self . encoder . summary () self . decoder . summary () def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Project the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Reconstruct the latent dataset to the original one. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The dataset to be reconstructed, by default None. Returns: torch.Tensor: The dataset reconstructed. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Execute the complete projection/reconstruction pipeline. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input dataset, by default None. Returns: torch.Tensor: The dataset reconstructed. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def eval_projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Evaluate the projection of the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" return self . projection ( input_data = input_data ) . detach () . numpy () __init__ ( encoder = None , decoder = None , input_dim = None , output_dim = None , latent_dim = None , activation = None , shallow = False , devices = 'cpu' , name = None ) # Initialize the AutoencoderMLP network Parameters: Name Type Description Default encoder DenseNetwork The encoder network architecture. (Default value = None) None decoder DenseNetwork The decoder network architecture. (Default value = None) None input_dim Optional [ int ] The input dimensions of the data, by default None. None output_dim Optional [ int ] The output dimensions of the data, by default None. None latent_dim Optional [ int ] The dimensions of the latent space, by default None. None activation Optional [ Union [ list , str ]] The activation functions used by the network, by default None. None shallow Optional [ bool ] Whether the network should be shallow or not, by default False. False devices Union [ str , list ] The device(s) to be used for allocating subnetworks, by default \"cpu\". 'cpu' name str The name of the network, by default None. None Source code in simulai/models/_pytorch_models/_autoencoder.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def __init__ ( self , encoder : DenseNetwork = None , decoder : DenseNetwork = None , input_dim : Optional [ int ] = None , output_dim : Optional [ int ] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\"Initialize the AutoencoderMLP network Args: encoder (DenseNetwork, optional): The encoder network architecture. (Default value = None) decoder (DenseNetwork, optional): The decoder network architecture. (Default value = None) input_dim (Optional[int], optional): The input dimensions of the data, by default None. output_dim (Optional[int], optional): The output dimensions of the data, by default None. latent_dim (Optional[int], optional): The dimensions of the latent space, by default None. activation (Optional[Union[list, str]], optional): The activation functions used by the network, by default None. shallow (Optional[bool], optional): Whether the network should be shallow or not, by default False. devices (Union[str, list], optional): The device(s) to be used for allocating subnetworks, by default \"cpu\". name (str, optional): The name of the network, by default None. \"\"\" super ( AutoencoderMLP , self ) . __init__ ( name = name ) self . weights = list () # This option is used when no network is provided # and it uses default choices for the architectures if encoder == None and decoder == None : encoder , decoder = mlp_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , shallow = shallow , ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . shapes_dict = dict () eval_projection ( input_data = None ) # Evaluate the projection of the input dataset into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be projected, by default None. None Returns: Type Description ndarray np.ndarray: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 168 169 170 171 172 173 174 175 176 177 178 179 180 def eval_projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Evaluate the projection of the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" return self . projection ( input_data = input_data ) . detach () . numpy () forward ( input_data = None ) # Execute the complete projection/reconstruction pipeline. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input dataset, by default None. None Returns: Type Description Tensor torch.Tensor: The dataset reconstructed. Source code in simulai/models/_pytorch_models/_autoencoder.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Execute the complete projection/reconstruction pipeline. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input dataset, by default None. Returns: torch.Tensor: The dataset reconstructed. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed projection ( input_data = None ) # Project the input dataset into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be projected, by default None. None Returns: Type Description Tensor torch.Tensor: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Project the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent reconstruction ( input_data = None ) # Reconstruct the latent dataset to the original one. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] The dataset to be reconstructed, by default None. None Returns: Type Description Tensor torch.Tensor: The dataset reconstructed. Source code in simulai/models/_pytorch_models/_autoencoder.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Reconstruct the latent dataset to the original one. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The dataset to be reconstructed, by default None. Returns: torch.Tensor: The dataset reconstructed. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed summary () # Prints the summary of the network architecture Source code in simulai/models/_pytorch_models/_autoencoder.py 114 115 116 117 def summary ( self ) -> None : \"\"\"Prints the summary of the network architecture\"\"\" self . encoder . summary () self . decoder . summary () AutoencoderCNN # Bases: NetworkTemplate This is an implementation of a convolutional autoencoder as Reduced Order Model. An autoencoder architecture consists of three stages: The convolutional encoder The bottleneck stage, subdivided in: Fully-connected encoder Fully connected decoder The convolutional decoder Graphical scheme Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderCNN ( NetworkTemplate ): r \"\"\"This is an implementation of a convolutional autoencoder as Reduced Order Model. An autoencoder architecture consists of three stages: - The convolutional encoder - The bottleneck stage, subdivided in: - Fully-connected encoder - Fully connected decoder - The convolutional decoder Graphical scheme Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : ConvolutionalNetwork = None , bottleneck_encoder : Linear = None , bottleneck_decoder : Linear = None , decoder : ConvolutionalNetwork = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , kernel_size : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\"Initialize the AutoencoderCNN network. Args: encoder (ConvolutionalNetwork, optional): The encoder network architecture, by default None. bottleneck_encoder (Linear, optional): The bottleneck encoder network architecture, by default None. bottleneck_decoder (Linear, optional): The bottleneck decoder network architecture, by default None. decoder (ConvolutionalNetwork, optional): The decoder network architecture, by default None. encoder_activation (str, optional): The activation function used by the encoder network, by default 'relu'. input_dim (Optional[Tuple[int, ...]], optional): The input dimensions of the data, by default None. output_dim (Optional[Tuple[int, ...]], optional): The output dimensions of the data, by default None. latent_dim (Optional[int], optional): The dimensions of the latent space, by default None. kernel_size (Optional[int], optional): (Default value = None) activation (Optional[Union[list, str]], optional): The activation functions used by the network, by default None. channels (Optional[int], optional): The number of channels of the convolutional layers, by default None. case (Optional[str], optional): The type of convolutional encoder and decoder to be used, by default None. shallow (Optional[bool], optional): Whether the network should be shallow or not, by default False. devices (Union[str, list], optional): The device(s) to be used for allocating subnetworks, by default 'cpu'. name (str, optional): The name of the network, by default None. **kwargs \"\"\" super ( AutoencoderCNN , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim ( encoder , decoder , bottleneck_encoder , bottleneck_decoder , ) = cnn_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , kernel_size = kernel_size , channels = channels , case = case , shallow = shallow , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . before_flatten_dimension = None self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : \"\"\"Prints the summary of the network architecture. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input dataset. (Default value = None) input_shape (list, optional): The shape of the input data. (Default value = None) verbose (bool, optional): (Default value = True) Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" if verbose == True : if self . input_dim != None : input_shape = self . input_dim else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\"Project input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor]): The dataset to be projected. Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] ) -> torch . Tensor : \"\"\"Reconstruct the latent dataset to the original one. Args: input_data (Union[torch.Tensor, np.ndarray]): The dataset to be reconstructed. Returns: torch.Tensor: The reconstructed dataset. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\"Execute the complete projection/reconstruction pipeline. Args: input_data (Union[np.ndarray, torch.Tensor]): The input dataset. Returns: torch.Tensor: The reconstructed dataset. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Evaluate the autoencoder on the given dataset. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be evaluated, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return super () . eval ( input_data = input_data ) def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Project the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Reconstructs the latent dataset to the original one. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be reconstructed. If not provided, uses the original input data, by default None. Returns: np.ndarray: The reconstructed dataset. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () __init__ ( encoder = None , bottleneck_encoder = None , bottleneck_decoder = None , decoder = None , encoder_activation = 'relu' , input_dim = None , output_dim = None , latent_dim = None , kernel_size = None , activation = None , channels = None , case = None , shallow = False , devices = 'cpu' , name = None , ** kwargs ) # Initialize the AutoencoderCNN network. Parameters: Name Type Description Default encoder ConvolutionalNetwork The encoder network architecture, by default None. None bottleneck_encoder Linear The bottleneck encoder network architecture, by default None. None bottleneck_decoder Linear The bottleneck decoder network architecture, by default None. None decoder ConvolutionalNetwork The decoder network architecture, by default None. None encoder_activation str The activation function used by the encoder network, by default 'relu'. 'relu' input_dim Optional [ Tuple [ int , ...]] The input dimensions of the data, by default None. None output_dim Optional [ Tuple [ int , ...]] The output dimensions of the data, by default None. None latent_dim Optional [ int ] The dimensions of the latent space, by default None. None kernel_size Optional [ int ] (Default value = None) None activation Optional [ Union [ list , str ]] The activation functions used by the network, by default None. None channels Optional [ int ] The number of channels of the convolutional layers, by default None. None case Optional [ str ] The type of convolutional encoder and decoder to be used, by default None. None shallow Optional [ bool ] Whether the network should be shallow or not, by default False. False devices Union [ str , list ] The device(s) to be used for allocating subnetworks, by default 'cpu'. 'cpu' name str The name of the network, by default None. None Source code in simulai/models/_pytorch_models/_autoencoder.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def __init__ ( self , encoder : ConvolutionalNetwork = None , bottleneck_encoder : Linear = None , bottleneck_decoder : Linear = None , decoder : ConvolutionalNetwork = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , kernel_size : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\"Initialize the AutoencoderCNN network. Args: encoder (ConvolutionalNetwork, optional): The encoder network architecture, by default None. bottleneck_encoder (Linear, optional): The bottleneck encoder network architecture, by default None. bottleneck_decoder (Linear, optional): The bottleneck decoder network architecture, by default None. decoder (ConvolutionalNetwork, optional): The decoder network architecture, by default None. encoder_activation (str, optional): The activation function used by the encoder network, by default 'relu'. input_dim (Optional[Tuple[int, ...]], optional): The input dimensions of the data, by default None. output_dim (Optional[Tuple[int, ...]], optional): The output dimensions of the data, by default None. latent_dim (Optional[int], optional): The dimensions of the latent space, by default None. kernel_size (Optional[int], optional): (Default value = None) activation (Optional[Union[list, str]], optional): The activation functions used by the network, by default None. channels (Optional[int], optional): The number of channels of the convolutional layers, by default None. case (Optional[str], optional): The type of convolutional encoder and decoder to be used, by default None. shallow (Optional[bool], optional): Whether the network should be shallow or not, by default False. devices (Union[str, list], optional): The device(s) to be used for allocating subnetworks, by default 'cpu'. name (str, optional): The name of the network, by default None. **kwargs \"\"\" super ( AutoencoderCNN , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim ( encoder , decoder , bottleneck_encoder , bottleneck_decoder , ) = cnn_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , kernel_size = kernel_size , channels = channels , case = case , shallow = shallow , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . before_flatten_dimension = None self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () eval ( input_data = None ) # Evaluate the autoencoder on the given dataset. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be evaluated, by default None. None Returns: Type Description ndarray np.ndarray: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Evaluate the autoencoder on the given dataset. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be evaluated, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return super () . eval ( input_data = input_data ) forward ( input_data ) # Execute the complete projection/reconstruction pipeline. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input dataset. required Returns: Type Description Tensor torch.Tensor: The reconstructed dataset. Source code in simulai/models/_pytorch_models/_autoencoder.py 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\"Execute the complete projection/reconstruction pipeline. Args: input_data (Union[np.ndarray, torch.Tensor]): The input dataset. Returns: torch.Tensor: The reconstructed dataset. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed project ( input_data = None ) # Project the input dataset into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be projected, by default None. None Returns: Type Description ndarray np.ndarray: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 461 462 463 464 465 466 467 468 469 470 471 472 473 474 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Project the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () projection ( input_data ) # Project input dataset into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be projected. required Returns: Type Description Tensor torch.Tensor: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 @as_tensor def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\"Project input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor]): The dataset to be projected. Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent reconstruct ( input_data = None ) # Reconstructs the latent dataset to the original one. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be reconstructed. If not provided, uses the original input data, by default None. None Returns: Type Description ndarray np.ndarray: The reconstructed dataset. Source code in simulai/models/_pytorch_models/_autoencoder.py 476 477 478 479 480 481 482 483 484 485 486 487 488 489 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Reconstructs the latent dataset to the original one. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be reconstructed. If not provided, uses the original input data, by default None. Returns: np.ndarray: The reconstructed dataset. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () reconstruction ( input_data ) # Reconstruct the latent dataset to the original one. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] The dataset to be reconstructed. required Returns: Type Description Tensor torch.Tensor: The reconstructed dataset. Source code in simulai/models/_pytorch_models/_autoencoder.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 @as_tensor def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] ) -> torch . Tensor : \"\"\"Reconstruct the latent dataset to the original one. Args: input_data (Union[torch.Tensor, np.ndarray]): The dataset to be reconstructed. Returns: torch.Tensor: The reconstructed dataset. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed summary ( input_data = None , input_shape = None , verbose = True ) # Prints the summary of the network architecture. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input dataset. (Default value = None) None input_shape list The shape of the input data. (Default value = None) None verbose bool (Default value = True) True Returns: Type Description Tensor torch.Tensor: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : \"\"\"Prints the summary of the network architecture. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input dataset. (Default value = None) input_shape (list, optional): The shape of the input data. (Default value = None) verbose (bool, optional): (Default value = True) Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" if verbose == True : if self . input_dim != None : input_shape = self . input_dim else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) AutoencoderKoopman # Bases: NetworkTemplate This is an implementation of a Koopman autoencoder as a Reduced Order Model. A Koopman autoencoder architecture consists of five stages: The convolutional encoder [Optional] Fully-connected encoder Koopman operator Fully connected decoder The convolutional decoder [Optional] Graphical scheme (Koopman OPERATOR) ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderKoopman ( NetworkTemplate ): r \"\"\"This is an implementation of a Koopman autoencoder as a Reduced Order Model. A Koopman autoencoder architecture consists of five stages: - The convolutional encoder [Optional] - Fully-connected encoder - Koopman operator - Fully connected decoder - The convolutional decoder [Optional] Graphical scheme (Koopman OPERATOR) ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , shallow : Optional [ bool ] = False , use_batch_norm : Optional [ bool ] = False , encoder_activation : str = \"relu\" , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\"Constructs a new instance of the Autoencoder Args: encoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The encoder network. Defaults to None. bottleneck_encoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck encoder network. Defaults to None. bottleneck_decoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck decoder network. Defaults to None. decoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The decoder network. Defaults to None. input_dim (Optional[Tuple[int, ...]], optional): The input dimensions. Used for automatic network generation. Defaults to None. output_dim (Optional[Tuple[int, ...]], optional): The output dimensions. Used for automatic network generation. Defaults to None. latent_dim (Optional[int], optional): The latent dimensions. Used for automatic network generation. Defaults to None. activation (Optional[Union[list, str]], optional): The activation functions for each layer. Used for automatic network generation. Defaults to None. channels (Optional[int], optional): The number of channels. Used for automatic network generation. Defaults to None. case (Optional[str], optional): The type of problem. Used for automatic network generation. Defaults to None. architecture (Optional[str], optional): The network architecture. Used for automatic network generation. Defaults to None. shallow (Optional[bool], optional): Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. use_batch_norm (Optional[bool], optional): (Default value = False) encoder_activation (str, optional): The activation function for the encoder. Defaults to \"relu\". devices (Union[str, list], optional): The devices to use. Defaults to \"cpu\". name (str, optional): The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderKoopman , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , ) self . encoder = encoder . to ( self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights if bottleneck_encoder is not None and bottleneck_decoder is not None : self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . K_op = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension , bias = False ) . weight , device = self . device , ) self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : if verbose == True : if self . input_dim != None : input_shape = list ( self . input_dim ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () print ( f \"The Koopman Operator has shape: { self . K_op . shape } \" ) self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def _projection_with_bottleneck ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Computes the projection of the input data onto the bottleneck encoder. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The projected latent representation. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def _projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Computes the projection of the input data onto the encoder. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The projected latent representation. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent @as_tensor def _reconstruction_with_bottleneck ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Reconstructs the input data using the bottleneck decoder. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input data. Defaults to None. Returns: torch.Tensor: The reconstructed data. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed @as_tensor def _reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Reconstructs the input data using the decoder. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input data. Defaults to None. Returns: torch.Tensor: The reconstructed data. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def latent_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\"Evaluates the operation $u^{u+m} = K^m u^{i}$ Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. m (int, optional): The number of Koopman iterations. Defaults to 1. Returns: torch.Tensor: The computed latent representation. \"\"\" return torch . matmul ( input_data , torch . pow ( self . K_op . T , m )) def latent_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Evaluates the operation u^{u+1} = K u^{i} Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The computed latent representation. \"\"\" return torch . matmul ( input_data , self . K_op . T ) def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Evaluates the operation \u0168 = D(E(U)) Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def reconstruction_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\"Evaluates the operation \u0168_m = D(K^m E(U)) Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. m (int, optional): The number of Koopman iterations. Defaults to 1. Returns: torch.Tensor: The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) latent_m = self . latent_forward_m ( input_data = latent , m = m ) reconstructed_m = self . reconstruction ( input_data = latent_m ) return reconstructed_m def predict ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , n_steps : int = 1 ) -> np . ndarray : \"\"\"Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. n_steps (int, optional): The number of extrapolations to perform. Defaults to 1. Returns: np.ndarray: The predicted reconstructed data. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) predictions = list () latent = self . projection ( input_data = input_data ) init_latent = latent # Extrapolating in the latent space over n_steps steps for s in range ( n_steps ): latent_s = self . latent_forward ( input_data = init_latent ) init_latent = latent_s predictions . append ( latent_s ) predictions = torch . vstack ( predictions ) reconstructed_predictions = self . reconstruction ( input_data = predictions ) return reconstructed_predictions . detach () . numpy () def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Projects the input data into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: np.ndarray: The projected data. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Reconstructs the input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: np.ndarray: The reconstructed data. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () __init__ ( encoder = None , bottleneck_encoder = None , bottleneck_decoder = None , decoder = None , input_dim = None , output_dim = None , latent_dim = None , activation = None , channels = None , case = None , architecture = None , shallow = False , use_batch_norm = False , encoder_activation = 'relu' , devices = 'cpu' , name = None ) # Constructs a new instance of the Autoencoder Parameters: Name Type Description Default encoder Union [ ConvolutionalNetwork , DenseNetwork ] The encoder network. Defaults to None. None bottleneck_encoder Optional [ Union [ Linear , DenseNetwork ]] The bottleneck encoder network. Defaults to None. None bottleneck_decoder Optional [ Union [ Linear , DenseNetwork ]] The bottleneck decoder network. Defaults to None. None decoder Union [ ConvolutionalNetwork , DenseNetwork ] The decoder network. Defaults to None. None input_dim Optional [ Tuple [ int , ...]] The input dimensions. Used for automatic network generation. Defaults to None. None output_dim Optional [ Tuple [ int , ...]] The output dimensions. Used for automatic network generation. Defaults to None. None latent_dim Optional [ int ] The latent dimensions. Used for automatic network generation. Defaults to None. None activation Optional [ Union [ list , str ]] The activation functions for each layer. Used for automatic network generation. Defaults to None. None channels Optional [ int ] The number of channels. Used for automatic network generation. Defaults to None. None case Optional [ str ] The type of problem. Used for automatic network generation. Defaults to None. None architecture Optional [ str ] The network architecture. Used for automatic network generation. Defaults to None. None shallow Optional [ bool ] Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. False use_batch_norm Optional [ bool ] (Default value = False) False encoder_activation str The activation function for the encoder. Defaults to \"relu\". 'relu' devices Union [ str , list ] The devices to use. Defaults to \"cpu\". 'cpu' name str The name of the autoencoder. Defaults to None. None Source code in simulai/models/_pytorch_models/_autoencoder.py 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , shallow : Optional [ bool ] = False , use_batch_norm : Optional [ bool ] = False , encoder_activation : str = \"relu\" , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\"Constructs a new instance of the Autoencoder Args: encoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The encoder network. Defaults to None. bottleneck_encoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck encoder network. Defaults to None. bottleneck_decoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck decoder network. Defaults to None. decoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The decoder network. Defaults to None. input_dim (Optional[Tuple[int, ...]], optional): The input dimensions. Used for automatic network generation. Defaults to None. output_dim (Optional[Tuple[int, ...]], optional): The output dimensions. Used for automatic network generation. Defaults to None. latent_dim (Optional[int], optional): The latent dimensions. Used for automatic network generation. Defaults to None. activation (Optional[Union[list, str]], optional): The activation functions for each layer. Used for automatic network generation. Defaults to None. channels (Optional[int], optional): The number of channels. Used for automatic network generation. Defaults to None. case (Optional[str], optional): The type of problem. Used for automatic network generation. Defaults to None. architecture (Optional[str], optional): The network architecture. Used for automatic network generation. Defaults to None. shallow (Optional[bool], optional): Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. use_batch_norm (Optional[bool], optional): (Default value = False) encoder_activation (str, optional): The activation function for the encoder. Defaults to \"relu\". devices (Union[str, list], optional): The devices to use. Defaults to \"cpu\". name (str, optional): The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderKoopman , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , ) self . encoder = encoder . to ( self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights if bottleneck_encoder is not None and bottleneck_decoder is not None : self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . K_op = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension , bias = False ) . weight , device = self . device , ) self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () latent_forward ( input_data = None ) # Evaluates the operation u^{u+1} = K u^{i} Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None Returns: Type Description Tensor torch.Tensor: The computed latent representation. Source code in simulai/models/_pytorch_models/_autoencoder.py 820 821 822 823 824 825 826 827 828 829 830 831 832 def latent_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Evaluates the operation u^{u+1} = K u^{i} Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The computed latent representation. \"\"\" return torch . matmul ( input_data , self . K_op . T ) latent_forward_m ( input_data = None , m = 1 ) # Evaluates the operation $u^{u+m} = K^m u^{i}$ Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None m int The number of Koopman iterations. Defaults to 1. 1 Returns: Type Description Tensor torch.Tensor: The computed latent representation. Source code in simulai/models/_pytorch_models/_autoencoder.py 805 806 807 808 809 810 811 812 813 814 815 816 817 818 def latent_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\"Evaluates the operation $u^{u+m} = K^m u^{i}$ Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. m (int, optional): The number of Koopman iterations. Defaults to 1. Returns: torch.Tensor: The computed latent representation. \"\"\" return torch . matmul ( input_data , torch . pow ( self . K_op . T , m )) predict ( input_data = None , n_steps = 1 ) # Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None n_steps int The number of extrapolations to perform. Defaults to 1. 1 Returns: Type Description ndarray np.ndarray: The predicted reconstructed data. Source code in simulai/models/_pytorch_models/_autoencoder.py 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 def predict ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , n_steps : int = 1 ) -> np . ndarray : \"\"\"Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. n_steps (int, optional): The number of extrapolations to perform. Defaults to 1. Returns: np.ndarray: The predicted reconstructed data. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) predictions = list () latent = self . projection ( input_data = input_data ) init_latent = latent # Extrapolating in the latent space over n_steps steps for s in range ( n_steps ): latent_s = self . latent_forward ( input_data = init_latent ) init_latent = latent_s predictions . append ( latent_s ) predictions = torch . vstack ( predictions ) reconstructed_predictions = self . reconstruction ( input_data = predictions ) return reconstructed_predictions . detach () . numpy () project ( input_data = None ) # Projects the input data into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None Returns: Type Description ndarray np.ndarray: The projected data. Source code in simulai/models/_pytorch_models/_autoencoder.py 902 903 904 905 906 907 908 909 910 911 912 913 914 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Projects the input data into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: np.ndarray: The projected data. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () reconstruct ( input_data = None ) # Reconstructs the input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None Returns: Type Description ndarray np.ndarray: The reconstructed data. Source code in simulai/models/_pytorch_models/_autoencoder.py 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Reconstructs the input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: np.ndarray: The reconstructed data. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () reconstruction_forward ( input_data = None ) # Evaluates the operation \u0168 = D(E(U)) Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None Returns: Type Description Tensor torch.Tensor: The reconstructed data. Source code in simulai/models/_pytorch_models/_autoencoder.py 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Evaluates the operation \u0168 = D(E(U)) Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed reconstruction_forward_m ( input_data = None , m = 1 ) # Evaluates the operation \u0168_m = D(K^m E(U)) Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None m int The number of Koopman iterations. Defaults to 1. 1 Returns: Type Description Tensor torch.Tensor: The reconstructed data. Source code in simulai/models/_pytorch_models/_autoencoder.py 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 def reconstruction_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\"Evaluates the operation \u0168_m = D(K^m E(U)) Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. m (int, optional): The number of Koopman iterations. Defaults to 1. Returns: torch.Tensor: The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) latent_m = self . latent_forward_m ( input_data = latent , m = m ) reconstructed_m = self . reconstruction ( input_data = latent_m ) return reconstructed_m AutoencoderVariational # Bases: NetworkTemplate This is an implementation of a Koopman autoencoder as a reduced order model. A variational autoencoder architecture consists of five stages: The convolutional encoder [Optional] Fully-connected encoder Gaussian noise Fully connected decoder The convolutional decoder [Optional] Graphical scheme Gaussian noise ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.py 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 class AutoencoderVariational ( NetworkTemplate ): r \"\"\"This is an implementation of a Koopman autoencoder as a reduced order model. A variational autoencoder architecture consists of five stages: - The convolutional encoder [Optional] - Fully-connected encoder - Gaussian noise - Fully connected decoder - The convolutional decoder [Optional] Graphical scheme Gaussian noise ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , kernel_size : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , use_batch_norm : Optional [ bool ] = False , shallow : Optional [ bool ] = False , scale : float = 1e-3 , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : r \"\"\"Constructor method. Args: encoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The encoder network. Defaults to None. bottleneck_encoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck encoder network. Defaults to None. bottleneck_decoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck decoder network. Defaults to None. decoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The decoder network. Defaults to None. encoder_activation (str, optional): The activation function to use in the encoder. Defaults to \"relu\". input_dim (Optional[Tuple[int, ...]], optional): The input dimension of the data. Defaults to None. output_dim (Optional[Tuple[int, ...]], optional): The output dimension of the data. Defaults to None. latent_dim (Optional[int], optional): The size of the bottleneck layer. Defaults to None. activation (Optional[Union[list, str]], optional): The activation function to use in the networks. Defaults to None. channels (Optional[int], optional): The number of channels in the input data. Defaults to None. kernel_size (Optional[int], optional): Convolutional kernel size. (Default value = None) case (Optional[str], optional): The name of the autoencoder variant. Defaults to None. architecture (Optional[str], optional): The architecture of the networks. Defaults to None. use_batch_norm (Optional[bool], optional): (Default value = False) shallow (Optional[bool], optional): Whether to use a shallow network architecture. Defaults to False. scale (float, optional): The scale of the initialization. Defaults to 1e-3. devices (Union[str, list], optional): The device(s) to use for computation. Defaults to \"cpu\". name (str, optional): The name of the autoencoder. Defaults to None. **kwargs \"\"\" super ( AutoencoderVariational , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , kernel_size = kernel_size , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , name = self . name , ** kwargs , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . there_is_bottleneck = False # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck self . there_is_bottleneck = True else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . z_mean = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device , ) self . z_log_var = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device , ) self . add_module ( \"z_mean\" , self . z_mean ) self . add_module ( \"z_log_var\" , self . z_log_var ) self . weights += [ self . z_mean . weight ] self . weights += [ self . z_log_var . weight ] self . mu = None self . log_v = None self . scale = scale self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , display : bool = True , ) -> torch . Tensor : r \"\"\"Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Args: input_data (Union[np.ndarray, torch.Tensor], optional): Input data to pass through the encoder, by default None input_shape (list, optional): The shape of the input data if input_data is None, by default None verbose (bool, optional): (Default value = True) display (bool, optional): (Default value = True) Returns: torch.Tensor: The output of the autoencoder's decoder applied to the input data. Raises: Exception: If self.input_dim is not a tuple or an integer. AssertionError: If input_shape is None when input_data is None. Note: The summary method calls the `summary` method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) \"\"\" if verbose == True : if self . input_dim != None : if type ( self . input_dim ) == tuple : input_shape = list ( self . input_dim ) elif type ( self . input_dim ) == int : input_shape = [ None , self . input_dim ] else : raise Exception ( f \"input_dim is expected to be tuple or int, but received { type ( self . input_dim ) } \" ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device , display = display , ) if type ( self . encoder . output_size ) == tuple : self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) input_shape = self . encoder . input_size elif type ( self . encoder . output_size ) == int : input_shape = [ None , self . encoder . input_size ] else : pass if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) # Bottleneck networks is are optional if self . there_is_bottleneck : latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary ( display = display ) self . bottleneck_decoder . summary ( display = display ) bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) else : bottleneck_output = btnk_input self . decoder . summary ( input_data = bottleneck_output , device = self . device , display = display ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) # Bottleneck networks is are optional if self . there_is_bottleneck : self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def _projection_with_bottleneck ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder and bottleneck encoder to input data and returns the output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the encoder, by default None Returns: torch.Tensor: The output of the bottleneck encoder applied to the input data. Note: This function is used for projection of the input data into the bottleneck space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._projection_with_bottleneck(input_data=input_data) \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def _projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder to input data and returns the output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the encoder, by default None Returns: torch.Tensor: The output of the encoder applied to the input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._projection(input_data=input_data) \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent @as_tensor def _reconstruction_with_bottleneck ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : r \"\"\"Applies the bottleneck decoder and decoder to input data and returns the output. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input data to pass through the bottleneck decoder and decoder, by default None Returns: torch.Tensor: The output of the decoder applied to the bottleneck decoder's output. Note: This function is used for reconstruction of the input data from the bottleneck space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> bottleneck_output = autoencoder._projection_with_bottleneck(input_data=input_data) >>> output_data = autoencoder._reconstruction_with_bottleneck(input_data=bottleneck_output) \"\"\" bottleneck_output = self . encoder_activation ( ( self . bottleneck_decoder . forward ( input_data = input_data )) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed @as_tensor def _reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : r \"\"\"Applies the decoder to input data and returns the output. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input data to pass through the decoder, by default None Returns: torch.Tensor: The output of the decoder applied to the input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._reconstruction(input_data=input_data) \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def Mu ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the mean of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the mean, by default None to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The mean of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return self . z_mean ( latent ) . detach () . numpy () else : return self . z_mean ( latent ) def Sigma ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the standard deviation of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the standard deviation, by default None to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The standard deviation of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return torch . exp ( self . z_log_var ( latent ) / 2 ) . detach () . numpy () else : return torch . exp ( self . z_log_var ( latent ) / 2 ) def CoVariance ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , inv : bool = False , to_numpy : bool = False , ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the covariance matrix of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the covariance matrix, by default None inv (bool, optional): If True, returns the inverse of the covariance matrix, by default False to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The covariance matrix (or its inverse) of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) \"\"\" if inv == False : Sigma_inv = 1 / self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma_inv ) else : Sigma = self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma ) if to_numpy == True : return covariance . detach () . numpy () else : return covariance def latent_gaussian_noisy ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Generates a noisy latent representation of the input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and generate a noisy latent representation, by default None Returns: torch.Tensor: A noisy latent representation of the input data. Note: This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) \"\"\" self . mu = self . z_mean ( input_data ) self . log_v = self . z_log_var ( input_data ) eps = self . scale * torch . autograd . Variable ( torch . randn ( * self . log_v . size ()) ) . type_as ( self . log_v ) return self . mu + torch . exp ( self . log_v / 2.0 ) * eps def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the autoencoder, by default None Returns: torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) latent_noisy = self . latent_gaussian_noisy ( input_data = latent ) reconstructed = self . reconstruction ( input_data = latent_noisy ) return reconstructed def reconstruction_eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the autoencoder, by default None Returns: torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) \"\"\" encoder_output = self . projection ( input_data = input_data ) latent = self . z_mean ( encoder_output ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Projects the input data onto the autoencoder's latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to project onto the autoencoder's latent space, by default None Returns: np.ndarray: The input data projected onto the autoencoder's latent space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) projected_data_latent = self . Mu ( input_data = input_data ) return projected_data_latent . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Reconstructs the input data using the trained autoencoder. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to reconstruct, by default None Returns: np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Reconstructs the input data using the mean of the encoded data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to reconstruct, by default None Returns: np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return self . reconstruction_eval ( input_data = input_data ) . cpu () . detach () . numpy () CoVariance ( input_data = None , inv = False , to_numpy = False ) # Computes the covariance matrix of the encoded input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to encode and compute the covariance matrix, by default None None inv bool If True, returns the inverse of the covariance matrix, by default False False to_numpy bool If True, returns the result as a NumPy array, by default False False Returns: Type Description Union [ ndarray , Tensor ] Union[np.ndarray, torch.Tensor]: The covariance matrix (or its inverse) of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 def CoVariance ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , inv : bool = False , to_numpy : bool = False , ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the covariance matrix of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the covariance matrix, by default None inv (bool, optional): If True, returns the inverse of the covariance matrix, by default False to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The covariance matrix (or its inverse) of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) \"\"\" if inv == False : Sigma_inv = 1 / self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma_inv ) else : Sigma = self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma ) if to_numpy == True : return covariance . detach () . numpy () else : return covariance Mu ( input_data = None , to_numpy = False ) # Computes the mean of the encoded input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to encode and compute the mean, by default None None to_numpy bool If True, returns the result as a NumPy array, by default False False Returns: Type Description Union [ ndarray , Tensor ] Union[np.ndarray, torch.Tensor]: The mean of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 def Mu ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the mean of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the mean, by default None to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The mean of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return self . z_mean ( latent ) . detach () . numpy () else : return self . z_mean ( latent ) Sigma ( input_data = None , to_numpy = False ) # Computes the standard deviation of the encoded input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to encode and compute the standard deviation, by default None None to_numpy bool If True, returns the result as a NumPy array, by default False False Returns: Type Description Union [ ndarray , Tensor ] Union[np.ndarray, torch.Tensor]: The standard deviation of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 def Sigma ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the standard deviation of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the standard deviation, by default None to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The standard deviation of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return torch . exp ( self . z_log_var ( latent ) / 2 ) . detach () . numpy () else : return torch . exp ( self . z_log_var ( latent ) / 2 ) __init__ ( encoder = None , bottleneck_encoder = None , bottleneck_decoder = None , decoder = None , encoder_activation = 'relu' , input_dim = None , output_dim = None , latent_dim = None , activation = None , channels = None , kernel_size = None , case = None , architecture = None , use_batch_norm = False , shallow = False , scale = 0.001 , devices = 'cpu' , name = None , ** kwargs ) # Constructor method. Parameters: Name Type Description Default encoder Union [ ConvolutionalNetwork , DenseNetwork ] The encoder network. Defaults to None. None bottleneck_encoder Optional [ Union [ Linear , DenseNetwork ]] The bottleneck encoder network. Defaults to None. None bottleneck_decoder Optional [ Union [ Linear , DenseNetwork ]] The bottleneck decoder network. Defaults to None. None decoder Union [ ConvolutionalNetwork , DenseNetwork ] The decoder network. Defaults to None. None encoder_activation str The activation function to use in the encoder. Defaults to \"relu\". 'relu' input_dim Optional [ Tuple [ int , ...]] The input dimension of the data. Defaults to None. None output_dim Optional [ Tuple [ int , ...]] The output dimension of the data. Defaults to None. None latent_dim Optional [ int ] The size of the bottleneck layer. Defaults to None. None activation Optional [ Union [ list , str ]] The activation function to use in the networks. Defaults to None. None channels Optional [ int ] The number of channels in the input data. Defaults to None. None kernel_size Optional [ int ] Convolutional kernel size. (Default value = None) None case Optional [ str ] The name of the autoencoder variant. Defaults to None. None architecture Optional [ str ] The architecture of the networks. Defaults to None. None use_batch_norm Optional [ bool ] (Default value = False) False shallow Optional [ bool ] Whether to use a shallow network architecture. Defaults to False. False scale float The scale of the initialization. Defaults to 1e-3. 0.001 devices Union [ str , list ] The device(s) to use for computation. Defaults to \"cpu\". 'cpu' name str The name of the autoencoder. Defaults to None. None Source code in simulai/models/_pytorch_models/_autoencoder.py 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , kernel_size : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , use_batch_norm : Optional [ bool ] = False , shallow : Optional [ bool ] = False , scale : float = 1e-3 , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : r \"\"\"Constructor method. Args: encoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The encoder network. Defaults to None. bottleneck_encoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck encoder network. Defaults to None. bottleneck_decoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck decoder network. Defaults to None. decoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The decoder network. Defaults to None. encoder_activation (str, optional): The activation function to use in the encoder. Defaults to \"relu\". input_dim (Optional[Tuple[int, ...]], optional): The input dimension of the data. Defaults to None. output_dim (Optional[Tuple[int, ...]], optional): The output dimension of the data. Defaults to None. latent_dim (Optional[int], optional): The size of the bottleneck layer. Defaults to None. activation (Optional[Union[list, str]], optional): The activation function to use in the networks. Defaults to None. channels (Optional[int], optional): The number of channels in the input data. Defaults to None. kernel_size (Optional[int], optional): Convolutional kernel size. (Default value = None) case (Optional[str], optional): The name of the autoencoder variant. Defaults to None. architecture (Optional[str], optional): The architecture of the networks. Defaults to None. use_batch_norm (Optional[bool], optional): (Default value = False) shallow (Optional[bool], optional): Whether to use a shallow network architecture. Defaults to False. scale (float, optional): The scale of the initialization. Defaults to 1e-3. devices (Union[str, list], optional): The device(s) to use for computation. Defaults to \"cpu\". name (str, optional): The name of the autoencoder. Defaults to None. **kwargs \"\"\" super ( AutoencoderVariational , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , kernel_size = kernel_size , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , name = self . name , ** kwargs , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . there_is_bottleneck = False # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck self . there_is_bottleneck = True else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . z_mean = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device , ) self . z_log_var = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device , ) self . add_module ( \"z_mean\" , self . z_mean ) self . add_module ( \"z_log_var\" , self . z_log_var ) self . weights += [ self . z_mean . weight ] self . weights += [ self . z_log_var . weight ] self . mu = None self . log_v = None self . scale = scale self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () eval ( input_data = None ) # Reconstructs the input data using the mean of the encoded data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to reconstruct, by default None None Returns: Type Description ndarray np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Reconstructs the input data using the mean of the encoded data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to reconstruct, by default None Returns: np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return self . reconstruction_eval ( input_data = input_data ) . cpu () . detach () . numpy () latent_gaussian_noisy ( input_data = None ) # Generates a noisy latent representation of the input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to encode and generate a noisy latent representation, by default None None Returns: Type Description Tensor torch.Tensor: A noisy latent representation of the input data. Note: This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 def latent_gaussian_noisy ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Generates a noisy latent representation of the input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and generate a noisy latent representation, by default None Returns: torch.Tensor: A noisy latent representation of the input data. Note: This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) \"\"\" self . mu = self . z_mean ( input_data ) self . log_v = self . z_log_var ( input_data ) eps = self . scale * torch . autograd . Variable ( torch . randn ( * self . log_v . size ()) ) . type_as ( self . log_v ) return self . mu + torch . exp ( self . log_v / 2.0 ) * eps project ( input_data = None ) # Projects the input data onto the autoencoder's latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to project onto the autoencoder's latent space, by default None None Returns: Type Description ndarray np.ndarray: The input data projected onto the autoencoder's latent space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Projects the input data onto the autoencoder's latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to project onto the autoencoder's latent space, by default None Returns: np.ndarray: The input data projected onto the autoencoder's latent space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) projected_data_latent = self . Mu ( input_data = input_data ) return projected_data_latent . cpu () . detach () . numpy () reconstruct ( input_data = None ) # Reconstructs the input data using the trained autoencoder. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to reconstruct, by default None None Returns: Type Description ndarray np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Reconstructs the input data using the trained autoencoder. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to reconstruct, by default None Returns: np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () reconstruction_eval ( input_data = None ) # Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to pass through the autoencoder, by default None None Returns: Type Description Tensor torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 def reconstruction_eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the autoencoder, by default None Returns: torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) \"\"\" encoder_output = self . projection ( input_data = input_data ) latent = self . z_mean ( encoder_output ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed reconstruction_forward ( input_data = None ) # Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to pass through the autoencoder, by default None None Returns: Type Description Tensor torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the autoencoder, by default None Returns: torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) latent_noisy = self . latent_gaussian_noisy ( input_data = latent ) reconstructed = self . reconstruction ( input_data = latent_noisy ) return reconstructed summary ( input_data = None , input_shape = None , verbose = True , display = True ) # Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] Input data to pass through the encoder, by default None None input_shape list The shape of the input data if input_data is None, by default None None verbose bool (Default value = True) True display bool (Default value = True) True Returns: Type Description Tensor torch.Tensor: The output of the autoencoder's decoder applied to the input data. Raises: Type Description Exception If self.input_dim is not a tuple or an integer. AssertionError If input_shape is None when input_data is None. Note The summary method calls the summary method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , display : bool = True , ) -> torch . Tensor : r \"\"\"Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Args: input_data (Union[np.ndarray, torch.Tensor], optional): Input data to pass through the encoder, by default None input_shape (list, optional): The shape of the input data if input_data is None, by default None verbose (bool, optional): (Default value = True) display (bool, optional): (Default value = True) Returns: torch.Tensor: The output of the autoencoder's decoder applied to the input data. Raises: Exception: If self.input_dim is not a tuple or an integer. AssertionError: If input_shape is None when input_data is None. Note: The summary method calls the `summary` method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) \"\"\" if verbose == True : if self . input_dim != None : if type ( self . input_dim ) == tuple : input_shape = list ( self . input_dim ) elif type ( self . input_dim ) == int : input_shape = [ None , self . input_dim ] else : raise Exception ( f \"input_dim is expected to be tuple or int, but received { type ( self . input_dim ) } \" ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device , display = display , ) if type ( self . encoder . output_size ) == tuple : self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) input_shape = self . encoder . input_size elif type ( self . encoder . output_size ) == int : input_shape = [ None , self . encoder . input_size ] else : pass if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) # Bottleneck networks is are optional if self . there_is_bottleneck : latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary ( display = display ) self . bottleneck_decoder . summary ( display = display ) bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) else : bottleneck_output = btnk_input self . decoder . summary ( input_data = bottleneck_output , device = self . device , display = display ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) # Bottleneck networks is are optional if self . there_is_bottleneck : self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self )","title":"simulai.models"},{"location":"simulai_models/#simulaimodels","text":"","title":"simulai.models"},{"location":"simulai_models/#transformer","text":"Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_transformer.pyclass Transformer ( NetworkTemplate ): def __init__ ( self , num_heads_encoder : int = 1 , num_heads_decoder : int = 1 , embed_dim_encoder : int = Union [ int , Tuple ], embed_dim_decoder : int = Union [ int , Tuple ], encoder_activation : Union [ str , torch . nn . Module ] = \"relu\" , decoder_activation : Union [ str , torch . nn . Module ] = \"relu\" , encoder_mlp_layer_config : dict = None , decoder_mlp_layer_config : dict = None , number_of_encoders : int = 1 , number_of_decoders : int = 1 , ) -> None : r \"\"\"A classical encoder-decoder transformer: Graphical example: Example:: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Args: num_heads_encoder (int, optional): The number of heads for the self-attention layer of the encoder. (Default value = 1) num_heads_decoder (int, optional): The number of heads for the self-attention layer of the decoder. (Default value = 1) embed_dim_encoder (int, optional): The dimension of the embedding for the encoder. (Default value = Union[int, Tuple]) embed_dim_decoder (int, optional): The dimension of the embedding for the decoder. (Default value = Union[int, Tuple]) encoder_activation (Union[str, torch.nn.Module], optional): The activation to be used in all the encoder layers. (Default value = 'relu') decoder_activation (Union[str, torch.nn.Module], optional): The activation to be used in all the decoder layers. (Default value = 'relu') encoder_mlp_layer_config (dict, optional): A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) decoder_mlp_layer_config (dict, optional): A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) number_of_encoders (int, optional): The number of encoders to be used. (Default value = 1) number_of_decoders (int, optional): The number of decoders to be used. (Default value = 1) \"\"\" super ( Transformer , self ) . __init__ () self . num_heads_encoder = num_heads_encoder self . num_heads_decoder = num_heads_decoder self . embed_dim_encoder = embed_dim_encoder self . embed_dim_decoder = embed_dim_decoder self . encoder_mlp_layer_dict = encoder_mlp_layer_config self . decoder_mlp_layer_dict = decoder_mlp_layer_config self . number_of_encoders = number_of_encoders self . number_of_decoders = number_of_encoders self . encoder_activation = encoder_activation self . decoder_activation = decoder_activation self . encoder_mlp_layers_list = list () self . decoder_mlp_layers_list = list () # Creating independent copies for the MLP layers which will be used # by the multiple encoders/decoders. for e in range ( self . number_of_encoders ): self . encoder_mlp_layers_list . append ( DenseNetwork ( ** self . encoder_mlp_layer_dict ) ) for d in range ( self . number_of_decoders ): self . decoder_mlp_layers_list . append ( DenseNetwork ( ** self . decoder_mlp_layer_dict ) ) # Defining the encoder architecture self . EncoderStage = torch . nn . Sequential ( * [ BasicEncoder ( num_heads = self . num_heads_encoder , activation = self . encoder_activation , mlp_layer = self . encoder_mlp_layers_list [ e ], embed_dim = self . embed_dim_encoder , ) for e in range ( self . number_of_encoders ) ] ) # Defining the decoder architecture self . DecoderStage = torch . nn . ModuleList ( [ BasicDecoder ( num_heads = self . num_heads_decoder , activation = self . decoder_activation , mlp_layer = self . decoder_mlp_layers_list [ d ], embed_dim = self . embed_dim_decoder , ) for d in range ( self . number_of_decoders ) ] ) self . weights = list () for e , encoder_e in enumerate ( self . EncoderStage ): self . weights += encoder_e . weights self . add_module ( f \"encoder_ { e } \" , encoder_e ) for d , decoder_d in enumerate ( self . DecoderStage ): self . weights += decoder_d . weights self . add_module ( f \"decoder_ { d } \" , decoder_d ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input dataset. (Default value = None) Returns: torch.Tensor: The transformer output. \"\"\" encoder_output = self . EncoderStage ( input_data ) current_input = input_data for decoder in self . DecoderStage : output = decoder ( input_data = current_input , encoder_output = encoder_output ) current_input = output return output def summary ( self ): \"\"\"It prints a general view of the architecture.\"\"\" print ( self )","title":"Transformer"},{"location":"simulai_models/#simulai.models.Transformer.__init__","text":"A classical encoder-decoder transformer: Graphical example: Example:: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Parameters: Name Type Description Default num_heads_encoder int The number of heads for the self-attention layer of the encoder. (Default value = 1) 1 num_heads_decoder int The number of heads for the self-attention layer of the decoder. (Default value = 1) 1 embed_dim_encoder int The dimension of the embedding for the encoder. (Default value = Union[int, Tuple]) Union [ int , Tuple ] embed_dim_decoder int The dimension of the embedding for the decoder. (Default value = Union[int, Tuple]) Union [ int , Tuple ] encoder_activation Union [ str , Module ] The activation to be used in all the encoder layers. (Default value = 'relu') 'relu' decoder_activation Union [ str , Module ] The activation to be used in all the decoder layers. (Default value = 'relu') 'relu' encoder_mlp_layer_config dict A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) None decoder_mlp_layer_config dict A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) None number_of_encoders int The number of encoders to be used. (Default value = 1) 1 number_of_decoders int The number of decoders to be used. (Default value = 1) 1 Source code in simulai/models/_pytorch_models/_transformer.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 def __init__ ( self , num_heads_encoder : int = 1 , num_heads_decoder : int = 1 , embed_dim_encoder : int = Union [ int , Tuple ], embed_dim_decoder : int = Union [ int , Tuple ], encoder_activation : Union [ str , torch . nn . Module ] = \"relu\" , decoder_activation : Union [ str , torch . nn . Module ] = \"relu\" , encoder_mlp_layer_config : dict = None , decoder_mlp_layer_config : dict = None , number_of_encoders : int = 1 , number_of_decoders : int = 1 , ) -> None : r \"\"\"A classical encoder-decoder transformer: Graphical example: Example:: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Args: num_heads_encoder (int, optional): The number of heads for the self-attention layer of the encoder. (Default value = 1) num_heads_decoder (int, optional): The number of heads for the self-attention layer of the decoder. (Default value = 1) embed_dim_encoder (int, optional): The dimension of the embedding for the encoder. (Default value = Union[int, Tuple]) embed_dim_decoder (int, optional): The dimension of the embedding for the decoder. (Default value = Union[int, Tuple]) encoder_activation (Union[str, torch.nn.Module], optional): The activation to be used in all the encoder layers. (Default value = 'relu') decoder_activation (Union[str, torch.nn.Module], optional): The activation to be used in all the decoder layers. (Default value = 'relu') encoder_mlp_layer_config (dict, optional): A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) decoder_mlp_layer_config (dict, optional): A configuration dictionary to instantiate the encoder MLP layer.weights (Default value = None) number_of_encoders (int, optional): The number of encoders to be used. (Default value = 1) number_of_decoders (int, optional): The number of decoders to be used. (Default value = 1) \"\"\" super ( Transformer , self ) . __init__ () self . num_heads_encoder = num_heads_encoder self . num_heads_decoder = num_heads_decoder self . embed_dim_encoder = embed_dim_encoder self . embed_dim_decoder = embed_dim_decoder self . encoder_mlp_layer_dict = encoder_mlp_layer_config self . decoder_mlp_layer_dict = decoder_mlp_layer_config self . number_of_encoders = number_of_encoders self . number_of_decoders = number_of_encoders self . encoder_activation = encoder_activation self . decoder_activation = decoder_activation self . encoder_mlp_layers_list = list () self . decoder_mlp_layers_list = list () # Creating independent copies for the MLP layers which will be used # by the multiple encoders/decoders. for e in range ( self . number_of_encoders ): self . encoder_mlp_layers_list . append ( DenseNetwork ( ** self . encoder_mlp_layer_dict ) ) for d in range ( self . number_of_decoders ): self . decoder_mlp_layers_list . append ( DenseNetwork ( ** self . decoder_mlp_layer_dict ) ) # Defining the encoder architecture self . EncoderStage = torch . nn . Sequential ( * [ BasicEncoder ( num_heads = self . num_heads_encoder , activation = self . encoder_activation , mlp_layer = self . encoder_mlp_layers_list [ e ], embed_dim = self . embed_dim_encoder , ) for e in range ( self . number_of_encoders ) ] ) # Defining the decoder architecture self . DecoderStage = torch . nn . ModuleList ( [ BasicDecoder ( num_heads = self . num_heads_decoder , activation = self . decoder_activation , mlp_layer = self . decoder_mlp_layers_list [ d ], embed_dim = self . embed_dim_decoder , ) for d in range ( self . number_of_decoders ) ] ) self . weights = list () for e , encoder_e in enumerate ( self . EncoderStage ): self . weights += encoder_e . weights self . add_module ( f \"encoder_ { e } \" , encoder_e ) for d , decoder_d in enumerate ( self . DecoderStage ): self . weights += decoder_d . weights self . add_module ( f \"decoder_ { d } \" , decoder_d )","title":"__init__()"},{"location":"simulai_models/#simulai.models.Transformer.forward","text":"Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] The input dataset. (Default value = None) None Returns: Type Description Tensor torch.Tensor: The transformer output. Source code in simulai/models/_pytorch_models/_transformer.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input dataset. (Default value = None) Returns: torch.Tensor: The transformer output. \"\"\" encoder_output = self . EncoderStage ( input_data ) current_input = input_data for decoder in self . DecoderStage : output = decoder ( input_data = current_input , encoder_output = encoder_output ) current_input = output return output","title":"forward()"},{"location":"simulai_models/#simulai.models.Transformer.summary","text":"It prints a general view of the architecture. Source code in simulai/models/_pytorch_models/_transformer.py 296 297 298 299 def summary ( self ): \"\"\"It prints a general view of the architecture.\"\"\" print ( self )","title":"summary()"},{"location":"simulai_models/#u-net","text":"Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_unet.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 class UNet ( NetworkTemplate ): def __init__ ( self , layers_config : Dict = None , intermediary_outputs_indices : List [ int ] = None , intermediary_inputs_indices : List [ int ] = None , encoder_extra_args : Dict = dict (), decoder_extra_args : Dict = dict (), ) -> None : \"\"\"U-Net. Args: layers_config (Dict, optional): A dictionary containing the complete configuration for the U-Net encoder and decoder. (Default value = None) intermediary_outputs_indices (List[int], optional): A list of indices for indicating the encoder outputs. (Default value = None) intermediary_inputs_indices (List[int], optional): A list of indices for indicating the decoder inputs. (Default value = None) encoder_extra_args (Dict, optional): A dictionary containing extra arguments for the encoder. (Default value = dict()) decoder_extra_args (Dict, optional): A dictionary containing extra arguments for the decoder. (Default value = dict()) \"\"\" super ( UNet , self ) . __init__ () self . layers_config = layers_config self . intermediary_outputs_indices = intermediary_outputs_indices self . intermediary_inputs_indices = intermediary_inputs_indices self . layers_config_encoder = self . layers_config [ \"encoder\" ] self . layers_config_decoder = self . layers_config [ \"decoder\" ] self . encoder_activations = self . layers_config [ \"encoder_activations\" ] self . decoder_activations = self . layers_config [ \"decoder_activations\" ] self . encoder_horizontal_outputs = dict () # Configuring the encoder encoder_type = self . layers_config_encoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . encoder = CNNUnetEncoder ( layers = self . layers_config_encoder [ \"architecture\" ], activations = self . encoder_activations , intermediary_outputs_indices = self . intermediary_outputs_indices , case = \"2d\" , name = \"encoder\" , ** encoder_extra_args , ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) # Configuring the decoder decoder_type = self . layers_config_decoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . decoder = CNNUnetDecoder ( layers = self . layers_config_decoder [ \"architecture\" ], activations = self . decoder_activations , intermediary_inputs_indices = self . intermediary_inputs_indices , case = \"2d\" , name = \"decoder\" , ** decoder_extra_args , ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"The U-Net forward method. Args: input_data (Union[torch.Tensor, np.ndarray], optional): A dataset to be inputted in the CNN U-Net encoder. (Default value = None) Returns: torch.Tensor: The U-Net output. \"\"\" encoder_main_output , encoder_intermediary_outputs = self . encoder ( input_data = input_data ) output = self . decoder ( input_data = encoder_main_output , intermediary_encoder_outputs = encoder_intermediary_outputs , ) return output def summary ( self ): \"\"\"It shows a general view of the architecture.\"\"\" print ( self )","title":"U-Net"},{"location":"simulai_models/#simulai.models.UNet.__init__","text":"U-Net. Parameters: Name Type Description Default layers_config Dict A dictionary containing the complete configuration for the None intermediary_outputs_indices List [ int ] A list of indices for indicating the encoder outputs. (Default value = None) None intermediary_inputs_indices List [ int ] A list of indices for indicating the decoder inputs. (Default value = None) None encoder_extra_args Dict A dictionary containing extra arguments for the encoder. (Default value = dict()) dict () decoder_extra_args Dict A dictionary containing extra arguments for the decoder. (Default value = dict()) dict () Source code in simulai/models/_pytorch_models/_unet.py 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 def __init__ ( self , layers_config : Dict = None , intermediary_outputs_indices : List [ int ] = None , intermediary_inputs_indices : List [ int ] = None , encoder_extra_args : Dict = dict (), decoder_extra_args : Dict = dict (), ) -> None : \"\"\"U-Net. Args: layers_config (Dict, optional): A dictionary containing the complete configuration for the U-Net encoder and decoder. (Default value = None) intermediary_outputs_indices (List[int], optional): A list of indices for indicating the encoder outputs. (Default value = None) intermediary_inputs_indices (List[int], optional): A list of indices for indicating the decoder inputs. (Default value = None) encoder_extra_args (Dict, optional): A dictionary containing extra arguments for the encoder. (Default value = dict()) decoder_extra_args (Dict, optional): A dictionary containing extra arguments for the decoder. (Default value = dict()) \"\"\" super ( UNet , self ) . __init__ () self . layers_config = layers_config self . intermediary_outputs_indices = intermediary_outputs_indices self . intermediary_inputs_indices = intermediary_inputs_indices self . layers_config_encoder = self . layers_config [ \"encoder\" ] self . layers_config_decoder = self . layers_config [ \"decoder\" ] self . encoder_activations = self . layers_config [ \"encoder_activations\" ] self . decoder_activations = self . layers_config [ \"decoder_activations\" ] self . encoder_horizontal_outputs = dict () # Configuring the encoder encoder_type = self . layers_config_encoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . encoder = CNNUnetEncoder ( layers = self . layers_config_encoder [ \"architecture\" ], activations = self . encoder_activations , intermediary_outputs_indices = self . intermediary_outputs_indices , case = \"2d\" , name = \"encoder\" , ** encoder_extra_args , ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) # Configuring the decoder decoder_type = self . layers_config_decoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . decoder = CNNUnetDecoder ( layers = self . layers_config_decoder [ \"architecture\" ], activations = self . decoder_activations , intermediary_inputs_indices = self . intermediary_inputs_indices , case = \"2d\" , name = \"decoder\" , ** decoder_extra_args , ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder )","title":"__init__()"},{"location":"simulai_models/#simulai.models.UNet.forward","text":"The U-Net forward method. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] A dataset to be inputted in the CNN U-Net encoder. (Default value = None) None Returns: Type Description Tensor torch.Tensor: The U-Net output. Source code in simulai/models/_pytorch_models/_unet.py 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"The U-Net forward method. Args: input_data (Union[torch.Tensor, np.ndarray], optional): A dataset to be inputted in the CNN U-Net encoder. (Default value = None) Returns: torch.Tensor: The U-Net output. \"\"\" encoder_main_output , encoder_intermediary_outputs = self . encoder ( input_data = input_data ) output = self . decoder ( input_data = encoder_main_output , intermediary_encoder_outputs = encoder_intermediary_outputs , ) return output","title":"forward()"},{"location":"simulai_models/#simulai.models.UNet.summary","text":"It shows a general view of the architecture. Source code in simulai/models/_pytorch_models/_unet.py 280 281 282 283 def summary ( self ): \"\"\"It shows a general view of the architecture.\"\"\" print ( self )","title":"summary()"},{"location":"simulai_models/#deeponet","text":"Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_deeponet.pyclass DeepONet ( NetworkTemplate ): name = \"deeponet\" engine = \"torch\" def __init__ ( self , trunk_network : NetworkTemplate = None , branch_network : NetworkTemplate = None , decoder_network : NetworkTemplate = None , # The decoder network is optional and considered var_dim : int = 1 , # less effective than the output reshaping alternative devices : Union [ str , list ] = \"cpu\" , product_type : str = None , rescale_factors : np . ndarray = None , model_id : str = None , use_bias : bool = False , ) -> None : \"\"\"Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Args: trunk_network (NetworkTemplate, optional): Subnetwork for processing the coordinates inputs. (Default value = None) branch_network (NetworkTemplate, optional): Subnetwork for processing the forcing/conditioning inputs. (Default value = None) decoder_network (NetworkTemplate, optional): Subnetworks for converting the embedding to the output (optional). (Default value = None) devices (Union[str, list], optional): Devices in which the model will be executed. (Default value = \"cpu\") product_type (str, optional): Type of product to execute in the embedding space. (Default value = None) rescale_factors (np.ndarray, optional): Values used for rescaling the network outputs for a given order of magnitude. (Default value = None) model_id (str, optional): Name for the model (Default value = None) use_bias (bool, optional): (Default value = False) \"\"\" super ( DeepONet , self ) . __init__ ( devices = devices ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . use_bias = use_bias self . trunk_network = self . to_wrap ( entity = trunk_network , device = self . device ) self . branch_network = self . to_wrap ( entity = branch_network , device = self . device ) self . add_module ( \"trunk_network\" , self . trunk_network ) self . add_module ( \"branch_network\" , self . branch_network ) if decoder_network is not None : self . decoder_network = self . to_wrap ( entity = decoder_network , device = self . device ) self . add_module ( \"decoder_network\" , self . decoder_network ) else : self . decoder_network = decoder_network self . product_type = product_type self . model_id = model_id self . var_dim = var_dim # Rescaling factors for the output if rescale_factors is not None : assert ( len ( rescale_factors ) == var_dim ), \"The number of rescaling factors must be equal to var_dim.\" rescale_factors = torch . from_numpy ( rescale_factors . astype ( \"float32\" )) self . rescale_factors = self . to_wrap ( entity = rescale_factors , device = self . device ) else : self . rescale_factors = None # Checking up whether the output of each subnetwork are in correct shape assert self . _latent_dimension_is_correct ( self . trunk_network . output_size ), ( \"The trunk network must have\" \" one-dimensional output , \" \"but received\" f \" { self . trunk_network . output_size } \" ) assert self . _latent_dimension_is_correct ( self . branch_network . output_size ), ( \"The branch network must have\" \" one-dimensional output,\" \" but received\" f \" { self . branch_network . output_size } \" ) # If bias is being used, check whether the network outputs are compatible. if self . use_bias : print ( \"Bias is being used.\" ) self . _bias_compatibility_is_correct ( dim_trunk = self . trunk_network . output_size , dim_branch = self . branch_network . output_size , ) self . bias_wrapper = self . _wrapper_bias_active else : self . bias_wrapper = self . _wrapper_bias_inactive # Using a decoder on top of the model or not if self . decoder_network is not None : self . decoder_wrapper = self . _wrapper_decoder_active else : self . decoder_wrapper = self . _wrapper_decoder_inactive # Using rescaling factors or not if rescale_factors is not None : self . rescale_wrapper = self . _wrapper_rescale_active else : self . rescale_wrapper = self . _wrapper_rescale_inactive # Checking the compatibility of the subnetworks outputs for each kind of product being employed. if self . product_type != \"dense\" : output_branch = self . branch_network . output_size output_trunk = self . trunk_network . output_size # It checks if the inner product operation can be performed. if not self . use_bias : assert output_branch == output_trunk , ( f \"The output dimensions for the sub-networks\" f \" trunk and branch must be equal but are\" f \" { output_branch } \" f \" and { output_trunk } \" ) else : print ( \"Bias compatibility was already verified.\" ) else : output_branch = self . branch_network . output_size assert not output_branch % self . var_dim , ( f \"The number of branch latent outputs must\" f \" be divisible by the number of variables,\" f \" but received { output_branch } \" f \" and { self . var_dim } \" ) self . subnetworks = [ net for net in [ self . trunk_network , self . branch_network , self . decoder_network ] if net is not None ] self . input_trunk = None self . input_branch = None self . output = None self . var_map = dict () # TODO Checking up if the input of the decoder network has the correct dimension if self . decoder_network is not None : print ( \"Decoder is being used.\" ) else : pass # Selecting the correct forward approach to be used self . _forward = self . _forward_selector_ () self . subnetworks_names = [ \"trunk\" , \"branch\" ] def _latent_dimension_is_correct ( self , dim : Union [ int , tuple ]) -> bool : \"\"\"It checks if the latent dimension is consistent. Args: dim (Union[int, tuple]): Latent_space_dimension. Returns: bool: The confirmation about the dimensionality correctness. \"\"\" if type ( dim ) == int : return True elif type ( dim ) == tuple : if len ( tuple ) == 1 : return True else : return False def _bias_compatibility_is_correct ( self , dim_trunk : Union [ int , tuple ], dim_branch : Union [ int , tuple ] ) -> bool : assert dim_branch == dim_trunk + self . var_dim , ( \"When using bias, the dimension\" + \"of the branch output should be\" + \"trunk output + var_dim.\" ) def _forward_dense ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\"Forward method used when the embeddings are multiplied using a matrix-like product, it means, the trunk network outputs serve as \"interpolation basis\" for the branch outputs. Args: output_trunk (torch.Tensor, optional): The embedding generated by the trunk network. (Default value = None) output_branch (torch.Tensor, optional): The embedding generated by the branch network. (Default value = None) Returns: torch.Tensor: The product between the two embeddings. \"\"\" latent_dim = int ( output_branch . shape [ - 1 ] / self . var_dim ) output_branch_reshaped = torch . reshape ( output_branch , ( - 1 , self . var_dim , latent_dim ) ) output = torch . matmul ( output_branch_reshaped , output_trunk [ ... , None ]) output = torch . squeeze ( output ) return output def _forward_pointwise ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\"Forward method used when the embeddings are multiplied using a simple point-wise product, after that a reshaping is applied in order to produce multiple outputs. Args: output_trunk (torch.Tensor, optional): The embedding generated by the trunk network. (Default value = None) output_branch (torch.Tensor, optional): The embedding generated by the branch network. (Default value = None) Returns: torch.Tensor: The product between the two embeddings. \"\"\" latent_dim = int ( output_trunk . shape [ - 1 ] / self . var_dim ) output_trunk_reshaped = torch . reshape ( output_trunk , ( - 1 , latent_dim , self . var_dim ) ) output_branch_reshaped = torch . reshape ( output_branch , ( - 1 , latent_dim , self . var_dim ) ) output = torch . sum ( output_trunk_reshaped * output_branch_reshaped , dim =- 2 , keepdim = False ) return output def _forward_vanilla ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\"Forward method used when the embeddings are multiplied using a simple point-wise product. Args: output_trunk (torch.Tensor, optional): The embedding generated by the trunk network. (Default value = None) output_branch (torch.Tensor, optional): The embedding generated by the branch network. (Default value = None) Returns: torch.Tensor: The product between the two embeddings. \"\"\" output = torch . sum ( output_trunk * output_branch , dim =- 1 , keepdim = True ) return output def _forward_selector_ ( self ) -> callable : \"\"\"It selects the forward method to be used. Returns: callable : The callable corresponding to the required forward method. \"\"\" if self . var_dim > 1 : # It operates as a typical dense layer if self . product_type == \"dense\" : return self . _forward_dense # It executes an inner product by parts between the outputs # of the subnetworks branch and trunk else : return self . _forward_pointwise else : return self . _forward_vanilla @property def _var_map ( self ) -> dict : # It checks all the data arrays in self.var_map have the same # batches dimension batches_dimensions = set ([ value . shape [ 0 ] for value in self . var_map . values ()]) assert ( len ( batches_dimensions ) == 1 ), \"This dataset is not proper to apply shuffling\" dim = list ( batches_dimensions )[ 0 ] indices = np . arange ( dim ) np . random . shuffle ( indices ) var_map_shuffled = { key : value [ indices ] for key , value in self . var_map . items ()} return var_map_shuffled @property def weights ( self ) -> list : return sum ([ net . weights for net in self . subnetworks ], []) # Now, a sequence of wrappers def _wrapper_bias_inactive ( self , output_trunk : Union [ np . ndarray , torch . Tensor ] = None , output_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : output = self . _forward ( output_trunk = output_trunk , output_branch = output_branch ) return output def _wrapper_bias_active ( self , output_trunk : Union [ np . ndarray , torch . Tensor ] = None , output_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : output_branch_ = output_branch [:, : - self . var_dim ] bias = output_branch [:, - self . var_dim :] output = ( self . _forward ( output_trunk = output_trunk , output_branch = output_branch_ ) + bias ) return output def _wrapper_decoder_active ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return self . decoder_network . forward ( input_data = input_data ) def _wrapper_decoder_inactive ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data def _wrapper_rescale_active ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data * self . rescale_factors def _wrapper_rescale_inactive ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data def forward ( self , input_trunk : Union [ np . ndarray , torch . Tensor ] = None , input_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : \"\"\"Wrapper forward method. Args: input_trunk (Union[np.ndarray, torch.Tensor], optional): (Default value = None) input_branch (Union[np.ndarray, torch.Tensor], optional): (Default value = None) Returns: torch.Tensor: The result of all the hidden operations in the network. \"\"\" # Forward method execution output_trunk = self . to_wrap ( entity = self . trunk_network . forward ( input_trunk ), device = self . device ) output_branch = self . to_wrap ( entity = self . branch_network . forward ( input_branch ), device = self . device ) # Wrappers are applied to execute user-defined operations. # When those operations are not selected, these wrappers simply # bypass the inputs. output = self . bias_wrapper ( output_trunk = output_trunk , output_branch = output_branch ) return self . rescale_wrapper ( input_data = self . decoder_wrapper ( input_data = output )) @guarantee_device def eval ( self , trunk_data : Union [ np . ndarray , torch . Tensor ] = None , branch_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> np . ndarray : \"\"\"It uses the network to make evaluations. Args: trunk_data (Union[np.ndarray, torch.Tensor], optional): (Default value = None) branch_data (Union[np.ndarray, torch.Tensor], optional): (Default value = None) Returns: np.ndarray: The result of all the hidden operations in the network. \"\"\" output_tensor = self . forward ( input_trunk = trunk_data , input_branch = branch_data ) return output_tensor . cpu () . detach () . numpy () @guarantee_device def eval_subnetwork ( self , name : str = None , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"It evaluates the output of DeepONet subnetworks. Args: name (str, optional): Name of the subnetwork. (Default value = None) input_data (Union[np.ndarray, torch.Tensor], optional): The data used as input for the subnetwork. (Default value = None) Returns: np.ndarray: The evaluation performed by the subnetwork. \"\"\" assert ( name in self . subnetworks_names ), f \"The name { name } is not a subnetwork of { self } .\" network_to_be_used = getattr ( self , name + \"_network\" ) return network_to_be_used . forward ( input_data ) . cpu () . detach () . numpy () def summary ( self ) -> None : print ( \"Trunk Network:\" ) self . trunk_network . summary () print ( \"Branch Network:\" ) self . branch_network . summary ()","title":"DeepONet"},{"location":"simulai_models/#simulai.models.DeepONet.__init__","text":"Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Parameters: Name Type Description Default trunk_network NetworkTemplate Subnetwork for processing the coordinates inputs. (Default value = None) None branch_network NetworkTemplate Subnetwork for processing the forcing/conditioning inputs. (Default value = None) None decoder_network NetworkTemplate Subnetworks for converting the embedding to the output (optional). (Default value = None) None devices Union [ str , list ] Devices in which the model will be executed. (Default value = \"cpu\") 'cpu' product_type str Type of product to execute in the embedding space. (Default value = None) None rescale_factors ndarray Values used for rescaling the network outputs for a given order of magnitude. (Default value = None) None model_id str Name for the model (Default value = None) None use_bias bool (Default value = False) False Source code in simulai/models/_pytorch_models/_deeponet.pydef __init__ ( self , trunk_network : NetworkTemplate = None , branch_network : NetworkTemplate = None , decoder_network : NetworkTemplate = None , # The decoder network is optional and considered var_dim : int = 1 , # less effective than the output reshaping alternative devices : Union [ str , list ] = \"cpu\" , product_type : str = None , rescale_factors : np . ndarray = None , model_id : str = None , use_bias : bool = False , ) -> None : \"\"\"Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Args: trunk_network (NetworkTemplate, optional): Subnetwork for processing the coordinates inputs. (Default value = None) branch_network (NetworkTemplate, optional): Subnetwork for processing the forcing/conditioning inputs. (Default value = None) decoder_network (NetworkTemplate, optional): Subnetworks for converting the embedding to the output (optional). (Default value = None) devices (Union[str, list], optional): Devices in which the model will be executed. (Default value = \"cpu\") product_type (str, optional): Type of product to execute in the embedding space. (Default value = None) rescale_factors (np.ndarray, optional): Values used for rescaling the network outputs for a given order of magnitude. (Default value = None) model_id (str, optional): Name for the model (Default value = None) use_bias (bool, optional): (Default value = False) \"\"\" super ( DeepONet , self ) . __init__ ( devices = devices ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . use_bias = use_bias self . trunk_network = self . to_wrap ( entity = trunk_network , device = self . device ) self . branch_network = self . to_wrap ( entity = branch_network , device = self . device ) self . add_module ( \"trunk_network\" , self . trunk_network ) self . add_module ( \"branch_network\" , self . branch_network ) if decoder_network is not None : self . decoder_network = self . to_wrap ( entity = decoder_network , device = self . device ) self . add_module ( \"decoder_network\" , self . decoder_network ) else : self . decoder_network = decoder_network self . product_type = product_type self . model_id = model_id self . var_dim = var_dim # Rescaling factors for the output if rescale_factors is not None : assert ( len ( rescale_factors ) == var_dim ), \"The number of rescaling factors must be equal to var_dim.\" rescale_factors = torch . from_numpy ( rescale_factors . astype ( \"float32\" )) self . rescale_factors = self . to_wrap ( entity = rescale_factors , device = self . device ) else : self . rescale_factors = None # Checking up whether the output of each subnetwork are in correct shape assert self . _latent_dimension_is_correct ( self . trunk_network . output_size ), ( \"The trunk network must have\" \" one-dimensional output , \" \"but received\" f \" { self . trunk_network . output_size } \" ) assert self . _latent_dimension_is_correct ( self . branch_network . output_size ), ( \"The branch network must have\" \" one-dimensional output,\" \" but received\" f \" { self . branch_network . output_size } \" ) # If bias is being used, check whether the network outputs are compatible. if self . use_bias : print ( \"Bias is being used.\" ) self . _bias_compatibility_is_correct ( dim_trunk = self . trunk_network . output_size , dim_branch = self . branch_network . output_size , ) self . bias_wrapper = self . _wrapper_bias_active else : self . bias_wrapper = self . _wrapper_bias_inactive # Using a decoder on top of the model or not if self . decoder_network is not None : self . decoder_wrapper = self . _wrapper_decoder_active else : self . decoder_wrapper = self . _wrapper_decoder_inactive # Using rescaling factors or not if rescale_factors is not None : self . rescale_wrapper = self . _wrapper_rescale_active else : self . rescale_wrapper = self . _wrapper_rescale_inactive # Checking the compatibility of the subnetworks outputs for each kind of product being employed. if self . product_type != \"dense\" : output_branch = self . branch_network . output_size output_trunk = self . trunk_network . output_size # It checks if the inner product operation can be performed. if not self . use_bias : assert output_branch == output_trunk , ( f \"The output dimensions for the sub-networks\" f \" trunk and branch must be equal but are\" f \" { output_branch } \" f \" and { output_trunk } \" ) else : print ( \"Bias compatibility was already verified.\" ) else : output_branch = self . branch_network . output_size assert not output_branch % self . var_dim , ( f \"The number of branch latent outputs must\" f \" be divisible by the number of variables,\" f \" but received { output_branch } \" f \" and { self . var_dim } \" ) self . subnetworks = [ net for net in [ self . trunk_network , self . branch_network , self . decoder_network ] if net is not None ] self . input_trunk = None self . input_branch = None self . output = None self . var_map = dict () # TODO Checking up if the input of the decoder network has the correct dimension if self . decoder_network is not None : print ( \"Decoder is being used.\" ) else : pass # Selecting the correct forward approach to be used self . _forward = self . _forward_selector_ () self . subnetworks_names = [ \"trunk\" , \"branch\" ]","title":"__init__()"},{"location":"simulai_models/#simulai.models.DeepONet.eval","text":"It uses the network to make evaluations. Parameters: Name Type Description Default trunk_data Union [ ndarray , Tensor ] (Default value = None) None branch_data Union [ ndarray , Tensor ] (Default value = None) None Returns: Type Description ndarray np.ndarray: The result of all the hidden operations in the network. Source code in simulai/models/_pytorch_models/_deeponet.py 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 @guarantee_device def eval ( self , trunk_data : Union [ np . ndarray , torch . Tensor ] = None , branch_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> np . ndarray : \"\"\"It uses the network to make evaluations. Args: trunk_data (Union[np.ndarray, torch.Tensor], optional): (Default value = None) branch_data (Union[np.ndarray, torch.Tensor], optional): (Default value = None) Returns: np.ndarray: The result of all the hidden operations in the network. \"\"\" output_tensor = self . forward ( input_trunk = trunk_data , input_branch = branch_data ) return output_tensor . cpu () . detach () . numpy ()","title":"eval()"},{"location":"simulai_models/#simulai.models.DeepONet.eval_subnetwork","text":"It evaluates the output of DeepONet subnetworks. Parameters: Name Type Description Default name str Name of the subnetwork. (Default value = None) None input_data Union [ ndarray , Tensor ] The data used as input for the subnetwork. (Default value = None) None Returns: Type Description ndarray np.ndarray: The evaluation performed by the subnetwork. Source code in simulai/models/_pytorch_models/_deeponet.py 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 @guarantee_device def eval_subnetwork ( self , name : str = None , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"It evaluates the output of DeepONet subnetworks. Args: name (str, optional): Name of the subnetwork. (Default value = None) input_data (Union[np.ndarray, torch.Tensor], optional): The data used as input for the subnetwork. (Default value = None) Returns: np.ndarray: The evaluation performed by the subnetwork. \"\"\" assert ( name in self . subnetworks_names ), f \"The name { name } is not a subnetwork of { self } .\" network_to_be_used = getattr ( self , name + \"_network\" ) return network_to_be_used . forward ( input_data ) . cpu () . detach () . numpy ()","title":"eval_subnetwork()"},{"location":"simulai_models/#simulai.models.DeepONet.forward","text":"Wrapper forward method. Parameters: Name Type Description Default input_trunk Union [ ndarray , Tensor ] (Default value = None) None input_branch Union [ ndarray , Tensor ] (Default value = None) None Returns: Type Description Tensor torch.Tensor: The result of all the hidden operations in the network. Source code in simulai/models/_pytorch_models/_deeponet.py 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 def forward ( self , input_trunk : Union [ np . ndarray , torch . Tensor ] = None , input_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : \"\"\"Wrapper forward method. Args: input_trunk (Union[np.ndarray, torch.Tensor], optional): (Default value = None) input_branch (Union[np.ndarray, torch.Tensor], optional): (Default value = None) Returns: torch.Tensor: The result of all the hidden operations in the network. \"\"\" # Forward method execution output_trunk = self . to_wrap ( entity = self . trunk_network . forward ( input_trunk ), device = self . device ) output_branch = self . to_wrap ( entity = self . branch_network . forward ( input_branch ), device = self . device ) # Wrappers are applied to execute user-defined operations. # When those operations are not selected, these wrappers simply # bypass the inputs. output = self . bias_wrapper ( output_trunk = output_trunk , output_branch = output_branch ) return self . rescale_wrapper ( input_data = self . decoder_wrapper ( input_data = output ))","title":"forward()"},{"location":"simulai_models/#autoencodermlp","text":"Bases: NetworkTemplate This is an implementation of a Fully-connected AutoEncoder as Reduced Order Model; A MLP autoencoder architecture consists of two stages: Fully-connected encoder Fully connected decoder Graphical scheme: | | | | | | Z -> | | | | | -> Z_til | | | | | | ENCODER DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderMLP ( NetworkTemplate ): r \"\"\"This is an implementation of a Fully-connected AutoEncoder as Reduced Order Model; A MLP autoencoder architecture consists of two stages: - Fully-connected encoder - Fully connected decoder Graphical scheme: | | | | | | Z -> | | | | | -> Z_til | | | | | | ENCODER DECODER \"\"\" def __init__ ( self , encoder : DenseNetwork = None , decoder : DenseNetwork = None , input_dim : Optional [ int ] = None , output_dim : Optional [ int ] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\"Initialize the AutoencoderMLP network Args: encoder (DenseNetwork, optional): The encoder network architecture. (Default value = None) decoder (DenseNetwork, optional): The decoder network architecture. (Default value = None) input_dim (Optional[int], optional): The input dimensions of the data, by default None. output_dim (Optional[int], optional): The output dimensions of the data, by default None. latent_dim (Optional[int], optional): The dimensions of the latent space, by default None. activation (Optional[Union[list, str]], optional): The activation functions used by the network, by default None. shallow (Optional[bool], optional): Whether the network should be shallow or not, by default False. devices (Union[str, list], optional): The device(s) to be used for allocating subnetworks, by default \"cpu\". name (str, optional): The name of the network, by default None. \"\"\" super ( AutoencoderMLP , self ) . __init__ ( name = name ) self . weights = list () # This option is used when no network is provided # and it uses default choices for the architectures if encoder == None and decoder == None : encoder , decoder = mlp_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , shallow = shallow , ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . shapes_dict = dict () def summary ( self ) -> None : \"\"\"Prints the summary of the network architecture\"\"\" self . encoder . summary () self . decoder . summary () def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Project the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Reconstruct the latent dataset to the original one. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The dataset to be reconstructed, by default None. Returns: torch.Tensor: The dataset reconstructed. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Execute the complete projection/reconstruction pipeline. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input dataset, by default None. Returns: torch.Tensor: The dataset reconstructed. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def eval_projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Evaluate the projection of the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" return self . projection ( input_data = input_data ) . detach () . numpy ()","title":"AutoencoderMLP"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.__init__","text":"Initialize the AutoencoderMLP network Parameters: Name Type Description Default encoder DenseNetwork The encoder network architecture. (Default value = None) None decoder DenseNetwork The decoder network architecture. (Default value = None) None input_dim Optional [ int ] The input dimensions of the data, by default None. None output_dim Optional [ int ] The output dimensions of the data, by default None. None latent_dim Optional [ int ] The dimensions of the latent space, by default None. None activation Optional [ Union [ list , str ]] The activation functions used by the network, by default None. None shallow Optional [ bool ] Whether the network should be shallow or not, by default False. False devices Union [ str , list ] The device(s) to be used for allocating subnetworks, by default \"cpu\". 'cpu' name str The name of the network, by default None. None Source code in simulai/models/_pytorch_models/_autoencoder.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def __init__ ( self , encoder : DenseNetwork = None , decoder : DenseNetwork = None , input_dim : Optional [ int ] = None , output_dim : Optional [ int ] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\"Initialize the AutoencoderMLP network Args: encoder (DenseNetwork, optional): The encoder network architecture. (Default value = None) decoder (DenseNetwork, optional): The decoder network architecture. (Default value = None) input_dim (Optional[int], optional): The input dimensions of the data, by default None. output_dim (Optional[int], optional): The output dimensions of the data, by default None. latent_dim (Optional[int], optional): The dimensions of the latent space, by default None. activation (Optional[Union[list, str]], optional): The activation functions used by the network, by default None. shallow (Optional[bool], optional): Whether the network should be shallow or not, by default False. devices (Union[str, list], optional): The device(s) to be used for allocating subnetworks, by default \"cpu\". name (str, optional): The name of the network, by default None. \"\"\" super ( AutoencoderMLP , self ) . __init__ ( name = name ) self . weights = list () # This option is used when no network is provided # and it uses default choices for the architectures if encoder == None and decoder == None : encoder , decoder = mlp_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , shallow = shallow , ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . shapes_dict = dict ()","title":"__init__()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.eval_projection","text":"Evaluate the projection of the input dataset into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be projected, by default None. None Returns: Type Description ndarray np.ndarray: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 168 169 170 171 172 173 174 175 176 177 178 179 180 def eval_projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Evaluate the projection of the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" return self . projection ( input_data = input_data ) . detach () . numpy ()","title":"eval_projection()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.forward","text":"Execute the complete projection/reconstruction pipeline. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input dataset, by default None. None Returns: Type Description Tensor torch.Tensor: The dataset reconstructed. Source code in simulai/models/_pytorch_models/_autoencoder.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Execute the complete projection/reconstruction pipeline. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input dataset, by default None. Returns: torch.Tensor: The dataset reconstructed. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed","title":"forward()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.projection","text":"Project the input dataset into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be projected, by default None. None Returns: Type Description Tensor torch.Tensor: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Project the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent","title":"projection()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.reconstruction","text":"Reconstruct the latent dataset to the original one. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] The dataset to be reconstructed, by default None. None Returns: Type Description Tensor torch.Tensor: The dataset reconstructed. Source code in simulai/models/_pytorch_models/_autoencoder.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Reconstruct the latent dataset to the original one. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The dataset to be reconstructed, by default None. Returns: torch.Tensor: The dataset reconstructed. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed","title":"reconstruction()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.summary","text":"Prints the summary of the network architecture Source code in simulai/models/_pytorch_models/_autoencoder.py 114 115 116 117 def summary ( self ) -> None : \"\"\"Prints the summary of the network architecture\"\"\" self . encoder . summary () self . decoder . summary ()","title":"summary()"},{"location":"simulai_models/#autoencodercnn","text":"Bases: NetworkTemplate This is an implementation of a convolutional autoencoder as Reduced Order Model. An autoencoder architecture consists of three stages: The convolutional encoder The bottleneck stage, subdivided in: Fully-connected encoder Fully connected decoder The convolutional decoder Graphical scheme Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderCNN ( NetworkTemplate ): r \"\"\"This is an implementation of a convolutional autoencoder as Reduced Order Model. An autoencoder architecture consists of three stages: - The convolutional encoder - The bottleneck stage, subdivided in: - Fully-connected encoder - Fully connected decoder - The convolutional decoder Graphical scheme Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : ConvolutionalNetwork = None , bottleneck_encoder : Linear = None , bottleneck_decoder : Linear = None , decoder : ConvolutionalNetwork = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , kernel_size : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\"Initialize the AutoencoderCNN network. Args: encoder (ConvolutionalNetwork, optional): The encoder network architecture, by default None. bottleneck_encoder (Linear, optional): The bottleneck encoder network architecture, by default None. bottleneck_decoder (Linear, optional): The bottleneck decoder network architecture, by default None. decoder (ConvolutionalNetwork, optional): The decoder network architecture, by default None. encoder_activation (str, optional): The activation function used by the encoder network, by default 'relu'. input_dim (Optional[Tuple[int, ...]], optional): The input dimensions of the data, by default None. output_dim (Optional[Tuple[int, ...]], optional): The output dimensions of the data, by default None. latent_dim (Optional[int], optional): The dimensions of the latent space, by default None. kernel_size (Optional[int], optional): (Default value = None) activation (Optional[Union[list, str]], optional): The activation functions used by the network, by default None. channels (Optional[int], optional): The number of channels of the convolutional layers, by default None. case (Optional[str], optional): The type of convolutional encoder and decoder to be used, by default None. shallow (Optional[bool], optional): Whether the network should be shallow or not, by default False. devices (Union[str, list], optional): The device(s) to be used for allocating subnetworks, by default 'cpu'. name (str, optional): The name of the network, by default None. **kwargs \"\"\" super ( AutoencoderCNN , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim ( encoder , decoder , bottleneck_encoder , bottleneck_decoder , ) = cnn_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , kernel_size = kernel_size , channels = channels , case = case , shallow = shallow , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . before_flatten_dimension = None self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : \"\"\"Prints the summary of the network architecture. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input dataset. (Default value = None) input_shape (list, optional): The shape of the input data. (Default value = None) verbose (bool, optional): (Default value = True) Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" if verbose == True : if self . input_dim != None : input_shape = self . input_dim else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\"Project input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor]): The dataset to be projected. Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] ) -> torch . Tensor : \"\"\"Reconstruct the latent dataset to the original one. Args: input_data (Union[torch.Tensor, np.ndarray]): The dataset to be reconstructed. Returns: torch.Tensor: The reconstructed dataset. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\"Execute the complete projection/reconstruction pipeline. Args: input_data (Union[np.ndarray, torch.Tensor]): The input dataset. Returns: torch.Tensor: The reconstructed dataset. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Evaluate the autoencoder on the given dataset. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be evaluated, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return super () . eval ( input_data = input_data ) def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Project the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Reconstructs the latent dataset to the original one. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be reconstructed. If not provided, uses the original input data, by default None. Returns: np.ndarray: The reconstructed dataset. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"AutoencoderCNN"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.__init__","text":"Initialize the AutoencoderCNN network. Parameters: Name Type Description Default encoder ConvolutionalNetwork The encoder network architecture, by default None. None bottleneck_encoder Linear The bottleneck encoder network architecture, by default None. None bottleneck_decoder Linear The bottleneck decoder network architecture, by default None. None decoder ConvolutionalNetwork The decoder network architecture, by default None. None encoder_activation str The activation function used by the encoder network, by default 'relu'. 'relu' input_dim Optional [ Tuple [ int , ...]] The input dimensions of the data, by default None. None output_dim Optional [ Tuple [ int , ...]] The output dimensions of the data, by default None. None latent_dim Optional [ int ] The dimensions of the latent space, by default None. None kernel_size Optional [ int ] (Default value = None) None activation Optional [ Union [ list , str ]] The activation functions used by the network, by default None. None channels Optional [ int ] The number of channels of the convolutional layers, by default None. None case Optional [ str ] The type of convolutional encoder and decoder to be used, by default None. None shallow Optional [ bool ] Whether the network should be shallow or not, by default False. False devices Union [ str , list ] The device(s) to be used for allocating subnetworks, by default 'cpu'. 'cpu' name str The name of the network, by default None. None Source code in simulai/models/_pytorch_models/_autoencoder.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def __init__ ( self , encoder : ConvolutionalNetwork = None , bottleneck_encoder : Linear = None , bottleneck_decoder : Linear = None , decoder : ConvolutionalNetwork = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , kernel_size : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\"Initialize the AutoencoderCNN network. Args: encoder (ConvolutionalNetwork, optional): The encoder network architecture, by default None. bottleneck_encoder (Linear, optional): The bottleneck encoder network architecture, by default None. bottleneck_decoder (Linear, optional): The bottleneck decoder network architecture, by default None. decoder (ConvolutionalNetwork, optional): The decoder network architecture, by default None. encoder_activation (str, optional): The activation function used by the encoder network, by default 'relu'. input_dim (Optional[Tuple[int, ...]], optional): The input dimensions of the data, by default None. output_dim (Optional[Tuple[int, ...]], optional): The output dimensions of the data, by default None. latent_dim (Optional[int], optional): The dimensions of the latent space, by default None. kernel_size (Optional[int], optional): (Default value = None) activation (Optional[Union[list, str]], optional): The activation functions used by the network, by default None. channels (Optional[int], optional): The number of channels of the convolutional layers, by default None. case (Optional[str], optional): The type of convolutional encoder and decoder to be used, by default None. shallow (Optional[bool], optional): Whether the network should be shallow or not, by default False. devices (Union[str, list], optional): The device(s) to be used for allocating subnetworks, by default 'cpu'. name (str, optional): The name of the network, by default None. **kwargs \"\"\" super ( AutoencoderCNN , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim ( encoder , decoder , bottleneck_encoder , bottleneck_decoder , ) = cnn_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , kernel_size = kernel_size , channels = channels , case = case , shallow = shallow , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . before_flatten_dimension = None self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict ()","title":"__init__()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.eval","text":"Evaluate the autoencoder on the given dataset. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be evaluated, by default None. None Returns: Type Description ndarray np.ndarray: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Evaluate the autoencoder on the given dataset. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be evaluated, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return super () . eval ( input_data = input_data )","title":"eval()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.forward","text":"Execute the complete projection/reconstruction pipeline. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input dataset. required Returns: Type Description Tensor torch.Tensor: The reconstructed dataset. Source code in simulai/models/_pytorch_models/_autoencoder.py 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\"Execute the complete projection/reconstruction pipeline. Args: input_data (Union[np.ndarray, torch.Tensor]): The input dataset. Returns: torch.Tensor: The reconstructed dataset. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed","title":"forward()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.project","text":"Project the input dataset into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be projected, by default None. None Returns: Type Description ndarray np.ndarray: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 461 462 463 464 465 466 467 468 469 470 471 472 473 474 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Project the input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be projected, by default None. Returns: np.ndarray: The dataset projected over the latent space. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy ()","title":"project()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.projection","text":"Project input dataset into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be projected. required Returns: Type Description Tensor torch.Tensor: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 @as_tensor def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\"Project input dataset into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor]): The dataset to be projected. Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent","title":"projection()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.reconstruct","text":"Reconstructs the latent dataset to the original one. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The dataset to be reconstructed. If not provided, uses the original input data, by default None. None Returns: Type Description ndarray np.ndarray: The reconstructed dataset. Source code in simulai/models/_pytorch_models/_autoencoder.py 476 477 478 479 480 481 482 483 484 485 486 487 488 489 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Reconstructs the latent dataset to the original one. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The dataset to be reconstructed. If not provided, uses the original input data, by default None. Returns: np.ndarray: The reconstructed dataset. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"reconstruct()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.reconstruction","text":"Reconstruct the latent dataset to the original one. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] The dataset to be reconstructed. required Returns: Type Description Tensor torch.Tensor: The reconstructed dataset. Source code in simulai/models/_pytorch_models/_autoencoder.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 @as_tensor def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] ) -> torch . Tensor : \"\"\"Reconstruct the latent dataset to the original one. Args: input_data (Union[torch.Tensor, np.ndarray]): The dataset to be reconstructed. Returns: torch.Tensor: The reconstructed dataset. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed","title":"reconstruction()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.summary","text":"Prints the summary of the network architecture. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input dataset. (Default value = None) None input_shape list The shape of the input data. (Default value = None) None verbose bool (Default value = True) True Returns: Type Description Tensor torch.Tensor: The dataset projected over the latent space. Source code in simulai/models/_pytorch_models/_autoencoder.py 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : \"\"\"Prints the summary of the network architecture. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input dataset. (Default value = None) input_shape (list, optional): The shape of the input data. (Default value = None) verbose (bool, optional): (Default value = True) Returns: torch.Tensor: The dataset projected over the latent space. \"\"\" if verbose == True : if self . input_dim != None : input_shape = self . input_dim else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self )","title":"summary()"},{"location":"simulai_models/#autoencoderkoopman","text":"Bases: NetworkTemplate This is an implementation of a Koopman autoencoder as a Reduced Order Model. A Koopman autoencoder architecture consists of five stages: The convolutional encoder [Optional] Fully-connected encoder Koopman operator Fully connected decoder The convolutional decoder [Optional] Graphical scheme (Koopman OPERATOR) ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderKoopman ( NetworkTemplate ): r \"\"\"This is an implementation of a Koopman autoencoder as a Reduced Order Model. A Koopman autoencoder architecture consists of five stages: - The convolutional encoder [Optional] - Fully-connected encoder - Koopman operator - Fully connected decoder - The convolutional decoder [Optional] Graphical scheme (Koopman OPERATOR) ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , shallow : Optional [ bool ] = False , use_batch_norm : Optional [ bool ] = False , encoder_activation : str = \"relu\" , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\"Constructs a new instance of the Autoencoder Args: encoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The encoder network. Defaults to None. bottleneck_encoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck encoder network. Defaults to None. bottleneck_decoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck decoder network. Defaults to None. decoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The decoder network. Defaults to None. input_dim (Optional[Tuple[int, ...]], optional): The input dimensions. Used for automatic network generation. Defaults to None. output_dim (Optional[Tuple[int, ...]], optional): The output dimensions. Used for automatic network generation. Defaults to None. latent_dim (Optional[int], optional): The latent dimensions. Used for automatic network generation. Defaults to None. activation (Optional[Union[list, str]], optional): The activation functions for each layer. Used for automatic network generation. Defaults to None. channels (Optional[int], optional): The number of channels. Used for automatic network generation. Defaults to None. case (Optional[str], optional): The type of problem. Used for automatic network generation. Defaults to None. architecture (Optional[str], optional): The network architecture. Used for automatic network generation. Defaults to None. shallow (Optional[bool], optional): Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. use_batch_norm (Optional[bool], optional): (Default value = False) encoder_activation (str, optional): The activation function for the encoder. Defaults to \"relu\". devices (Union[str, list], optional): The devices to use. Defaults to \"cpu\". name (str, optional): The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderKoopman , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , ) self . encoder = encoder . to ( self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights if bottleneck_encoder is not None and bottleneck_decoder is not None : self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . K_op = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension , bias = False ) . weight , device = self . device , ) self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : if verbose == True : if self . input_dim != None : input_shape = list ( self . input_dim ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () print ( f \"The Koopman Operator has shape: { self . K_op . shape } \" ) self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def _projection_with_bottleneck ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Computes the projection of the input data onto the bottleneck encoder. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The projected latent representation. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def _projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Computes the projection of the input data onto the encoder. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The projected latent representation. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent @as_tensor def _reconstruction_with_bottleneck ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Reconstructs the input data using the bottleneck decoder. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input data. Defaults to None. Returns: torch.Tensor: The reconstructed data. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed @as_tensor def _reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Reconstructs the input data using the decoder. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input data. Defaults to None. Returns: torch.Tensor: The reconstructed data. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def latent_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\"Evaluates the operation $u^{u+m} = K^m u^{i}$ Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. m (int, optional): The number of Koopman iterations. Defaults to 1. Returns: torch.Tensor: The computed latent representation. \"\"\" return torch . matmul ( input_data , torch . pow ( self . K_op . T , m )) def latent_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Evaluates the operation u^{u+1} = K u^{i} Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The computed latent representation. \"\"\" return torch . matmul ( input_data , self . K_op . T ) def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Evaluates the operation \u0168 = D(E(U)) Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def reconstruction_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\"Evaluates the operation \u0168_m = D(K^m E(U)) Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. m (int, optional): The number of Koopman iterations. Defaults to 1. Returns: torch.Tensor: The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) latent_m = self . latent_forward_m ( input_data = latent , m = m ) reconstructed_m = self . reconstruction ( input_data = latent_m ) return reconstructed_m def predict ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , n_steps : int = 1 ) -> np . ndarray : \"\"\"Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. n_steps (int, optional): The number of extrapolations to perform. Defaults to 1. Returns: np.ndarray: The predicted reconstructed data. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) predictions = list () latent = self . projection ( input_data = input_data ) init_latent = latent # Extrapolating in the latent space over n_steps steps for s in range ( n_steps ): latent_s = self . latent_forward ( input_data = init_latent ) init_latent = latent_s predictions . append ( latent_s ) predictions = torch . vstack ( predictions ) reconstructed_predictions = self . reconstruction ( input_data = predictions ) return reconstructed_predictions . detach () . numpy () def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Projects the input data into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: np.ndarray: The projected data. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Reconstructs the input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: np.ndarray: The reconstructed data. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"AutoencoderKoopman"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.__init__","text":"Constructs a new instance of the Autoencoder Parameters: Name Type Description Default encoder Union [ ConvolutionalNetwork , DenseNetwork ] The encoder network. Defaults to None. None bottleneck_encoder Optional [ Union [ Linear , DenseNetwork ]] The bottleneck encoder network. Defaults to None. None bottleneck_decoder Optional [ Union [ Linear , DenseNetwork ]] The bottleneck decoder network. Defaults to None. None decoder Union [ ConvolutionalNetwork , DenseNetwork ] The decoder network. Defaults to None. None input_dim Optional [ Tuple [ int , ...]] The input dimensions. Used for automatic network generation. Defaults to None. None output_dim Optional [ Tuple [ int , ...]] The output dimensions. Used for automatic network generation. Defaults to None. None latent_dim Optional [ int ] The latent dimensions. Used for automatic network generation. Defaults to None. None activation Optional [ Union [ list , str ]] The activation functions for each layer. Used for automatic network generation. Defaults to None. None channels Optional [ int ] The number of channels. Used for automatic network generation. Defaults to None. None case Optional [ str ] The type of problem. Used for automatic network generation. Defaults to None. None architecture Optional [ str ] The network architecture. Used for automatic network generation. Defaults to None. None shallow Optional [ bool ] Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. False use_batch_norm Optional [ bool ] (Default value = False) False encoder_activation str The activation function for the encoder. Defaults to \"relu\". 'relu' devices Union [ str , list ] The devices to use. Defaults to \"cpu\". 'cpu' name str The name of the autoencoder. Defaults to None. None Source code in simulai/models/_pytorch_models/_autoencoder.py 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , shallow : Optional [ bool ] = False , use_batch_norm : Optional [ bool ] = False , encoder_activation : str = \"relu\" , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\"Constructs a new instance of the Autoencoder Args: encoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The encoder network. Defaults to None. bottleneck_encoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck encoder network. Defaults to None. bottleneck_decoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck decoder network. Defaults to None. decoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The decoder network. Defaults to None. input_dim (Optional[Tuple[int, ...]], optional): The input dimensions. Used for automatic network generation. Defaults to None. output_dim (Optional[Tuple[int, ...]], optional): The output dimensions. Used for automatic network generation. Defaults to None. latent_dim (Optional[int], optional): The latent dimensions. Used for automatic network generation. Defaults to None. activation (Optional[Union[list, str]], optional): The activation functions for each layer. Used for automatic network generation. Defaults to None. channels (Optional[int], optional): The number of channels. Used for automatic network generation. Defaults to None. case (Optional[str], optional): The type of problem. Used for automatic network generation. Defaults to None. architecture (Optional[str], optional): The network architecture. Used for automatic network generation. Defaults to None. shallow (Optional[bool], optional): Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. use_batch_norm (Optional[bool], optional): (Default value = False) encoder_activation (str, optional): The activation function for the encoder. Defaults to \"relu\". devices (Union[str, list], optional): The devices to use. Defaults to \"cpu\". name (str, optional): The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderKoopman , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , ) self . encoder = encoder . to ( self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights if bottleneck_encoder is not None and bottleneck_decoder is not None : self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . K_op = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension , bias = False ) . weight , device = self . device , ) self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict ()","title":"__init__()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.latent_forward","text":"Evaluates the operation u^{u+1} = K u^{i} Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None Returns: Type Description Tensor torch.Tensor: The computed latent representation. Source code in simulai/models/_pytorch_models/_autoencoder.py 820 821 822 823 824 825 826 827 828 829 830 831 832 def latent_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Evaluates the operation u^{u+1} = K u^{i} Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The computed latent representation. \"\"\" return torch . matmul ( input_data , self . K_op . T )","title":"latent_forward()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.latent_forward_m","text":"Evaluates the operation $u^{u+m} = K^m u^{i}$ Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None m int The number of Koopman iterations. Defaults to 1. 1 Returns: Type Description Tensor torch.Tensor: The computed latent representation. Source code in simulai/models/_pytorch_models/_autoencoder.py 805 806 807 808 809 810 811 812 813 814 815 816 817 818 def latent_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\"Evaluates the operation $u^{u+m} = K^m u^{i}$ Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. m (int, optional): The number of Koopman iterations. Defaults to 1. Returns: torch.Tensor: The computed latent representation. \"\"\" return torch . matmul ( input_data , torch . pow ( self . K_op . T , m ))","title":"latent_forward_m()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.predict","text":"Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None n_steps int The number of extrapolations to perform. Defaults to 1. 1 Returns: Type Description ndarray np.ndarray: The predicted reconstructed data. Source code in simulai/models/_pytorch_models/_autoencoder.py 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 def predict ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , n_steps : int = 1 ) -> np . ndarray : \"\"\"Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. n_steps (int, optional): The number of extrapolations to perform. Defaults to 1. Returns: np.ndarray: The predicted reconstructed data. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) predictions = list () latent = self . projection ( input_data = input_data ) init_latent = latent # Extrapolating in the latent space over n_steps steps for s in range ( n_steps ): latent_s = self . latent_forward ( input_data = init_latent ) init_latent = latent_s predictions . append ( latent_s ) predictions = torch . vstack ( predictions ) reconstructed_predictions = self . reconstruction ( input_data = predictions ) return reconstructed_predictions . detach () . numpy ()","title":"predict()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.project","text":"Projects the input data into the latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None Returns: Type Description ndarray np.ndarray: The projected data. Source code in simulai/models/_pytorch_models/_autoencoder.py 902 903 904 905 906 907 908 909 910 911 912 913 914 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Projects the input data into the latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: np.ndarray: The projected data. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy ()","title":"project()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruct","text":"Reconstructs the input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None Returns: Type Description ndarray np.ndarray: The reconstructed data. Source code in simulai/models/_pytorch_models/_autoencoder.py 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\"Reconstructs the input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: np.ndarray: The reconstructed data. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"reconstruct()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruction_forward","text":"Evaluates the operation \u0168 = D(E(U)) Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None Returns: Type Description Tensor torch.Tensor: The reconstructed data. Source code in simulai/models/_pytorch_models/_autoencoder.py 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\"Evaluates the operation \u0168 = D(E(U)) Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. Returns: torch.Tensor: The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed","title":"reconstruction_forward()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruction_forward_m","text":"Evaluates the operation \u0168_m = D(K^m E(U)) Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data. Defaults to None. None m int The number of Koopman iterations. Defaults to 1. 1 Returns: Type Description Tensor torch.Tensor: The reconstructed data. Source code in simulai/models/_pytorch_models/_autoencoder.py 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 def reconstruction_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\"Evaluates the operation \u0168_m = D(K^m E(U)) Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data. Defaults to None. m (int, optional): The number of Koopman iterations. Defaults to 1. Returns: torch.Tensor: The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) latent_m = self . latent_forward_m ( input_data = latent , m = m ) reconstructed_m = self . reconstruction ( input_data = latent_m ) return reconstructed_m","title":"reconstruction_forward_m()"},{"location":"simulai_models/#autoencodervariational","text":"Bases: NetworkTemplate This is an implementation of a Koopman autoencoder as a reduced order model. A variational autoencoder architecture consists of five stages: The convolutional encoder [Optional] Fully-connected encoder Gaussian noise Fully connected decoder The convolutional decoder [Optional] Graphical scheme Gaussian noise ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.py 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 class AutoencoderVariational ( NetworkTemplate ): r \"\"\"This is an implementation of a Koopman autoencoder as a reduced order model. A variational autoencoder architecture consists of five stages: - The convolutional encoder [Optional] - Fully-connected encoder - Gaussian noise - Fully connected decoder - The convolutional decoder [Optional] Graphical scheme Gaussian noise ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , kernel_size : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , use_batch_norm : Optional [ bool ] = False , shallow : Optional [ bool ] = False , scale : float = 1e-3 , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : r \"\"\"Constructor method. Args: encoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The encoder network. Defaults to None. bottleneck_encoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck encoder network. Defaults to None. bottleneck_decoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck decoder network. Defaults to None. decoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The decoder network. Defaults to None. encoder_activation (str, optional): The activation function to use in the encoder. Defaults to \"relu\". input_dim (Optional[Tuple[int, ...]], optional): The input dimension of the data. Defaults to None. output_dim (Optional[Tuple[int, ...]], optional): The output dimension of the data. Defaults to None. latent_dim (Optional[int], optional): The size of the bottleneck layer. Defaults to None. activation (Optional[Union[list, str]], optional): The activation function to use in the networks. Defaults to None. channels (Optional[int], optional): The number of channels in the input data. Defaults to None. kernel_size (Optional[int], optional): Convolutional kernel size. (Default value = None) case (Optional[str], optional): The name of the autoencoder variant. Defaults to None. architecture (Optional[str], optional): The architecture of the networks. Defaults to None. use_batch_norm (Optional[bool], optional): (Default value = False) shallow (Optional[bool], optional): Whether to use a shallow network architecture. Defaults to False. scale (float, optional): The scale of the initialization. Defaults to 1e-3. devices (Union[str, list], optional): The device(s) to use for computation. Defaults to \"cpu\". name (str, optional): The name of the autoencoder. Defaults to None. **kwargs \"\"\" super ( AutoencoderVariational , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , kernel_size = kernel_size , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , name = self . name , ** kwargs , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . there_is_bottleneck = False # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck self . there_is_bottleneck = True else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . z_mean = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device , ) self . z_log_var = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device , ) self . add_module ( \"z_mean\" , self . z_mean ) self . add_module ( \"z_log_var\" , self . z_log_var ) self . weights += [ self . z_mean . weight ] self . weights += [ self . z_log_var . weight ] self . mu = None self . log_v = None self . scale = scale self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , display : bool = True , ) -> torch . Tensor : r \"\"\"Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Args: input_data (Union[np.ndarray, torch.Tensor], optional): Input data to pass through the encoder, by default None input_shape (list, optional): The shape of the input data if input_data is None, by default None verbose (bool, optional): (Default value = True) display (bool, optional): (Default value = True) Returns: torch.Tensor: The output of the autoencoder's decoder applied to the input data. Raises: Exception: If self.input_dim is not a tuple or an integer. AssertionError: If input_shape is None when input_data is None. Note: The summary method calls the `summary` method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) \"\"\" if verbose == True : if self . input_dim != None : if type ( self . input_dim ) == tuple : input_shape = list ( self . input_dim ) elif type ( self . input_dim ) == int : input_shape = [ None , self . input_dim ] else : raise Exception ( f \"input_dim is expected to be tuple or int, but received { type ( self . input_dim ) } \" ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device , display = display , ) if type ( self . encoder . output_size ) == tuple : self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) input_shape = self . encoder . input_size elif type ( self . encoder . output_size ) == int : input_shape = [ None , self . encoder . input_size ] else : pass if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) # Bottleneck networks is are optional if self . there_is_bottleneck : latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary ( display = display ) self . bottleneck_decoder . summary ( display = display ) bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) else : bottleneck_output = btnk_input self . decoder . summary ( input_data = bottleneck_output , device = self . device , display = display ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) # Bottleneck networks is are optional if self . there_is_bottleneck : self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def _projection_with_bottleneck ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder and bottleneck encoder to input data and returns the output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the encoder, by default None Returns: torch.Tensor: The output of the bottleneck encoder applied to the input data. Note: This function is used for projection of the input data into the bottleneck space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._projection_with_bottleneck(input_data=input_data) \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def _projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder to input data and returns the output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the encoder, by default None Returns: torch.Tensor: The output of the encoder applied to the input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._projection(input_data=input_data) \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent @as_tensor def _reconstruction_with_bottleneck ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : r \"\"\"Applies the bottleneck decoder and decoder to input data and returns the output. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input data to pass through the bottleneck decoder and decoder, by default None Returns: torch.Tensor: The output of the decoder applied to the bottleneck decoder's output. Note: This function is used for reconstruction of the input data from the bottleneck space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> bottleneck_output = autoencoder._projection_with_bottleneck(input_data=input_data) >>> output_data = autoencoder._reconstruction_with_bottleneck(input_data=bottleneck_output) \"\"\" bottleneck_output = self . encoder_activation ( ( self . bottleneck_decoder . forward ( input_data = input_data )) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed @as_tensor def _reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : r \"\"\"Applies the decoder to input data and returns the output. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input data to pass through the decoder, by default None Returns: torch.Tensor: The output of the decoder applied to the input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._reconstruction(input_data=input_data) \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def Mu ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the mean of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the mean, by default None to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The mean of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return self . z_mean ( latent ) . detach () . numpy () else : return self . z_mean ( latent ) def Sigma ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the standard deviation of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the standard deviation, by default None to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The standard deviation of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return torch . exp ( self . z_log_var ( latent ) / 2 ) . detach () . numpy () else : return torch . exp ( self . z_log_var ( latent ) / 2 ) def CoVariance ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , inv : bool = False , to_numpy : bool = False , ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the covariance matrix of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the covariance matrix, by default None inv (bool, optional): If True, returns the inverse of the covariance matrix, by default False to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The covariance matrix (or its inverse) of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) \"\"\" if inv == False : Sigma_inv = 1 / self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma_inv ) else : Sigma = self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma ) if to_numpy == True : return covariance . detach () . numpy () else : return covariance def latent_gaussian_noisy ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Generates a noisy latent representation of the input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and generate a noisy latent representation, by default None Returns: torch.Tensor: A noisy latent representation of the input data. Note: This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) \"\"\" self . mu = self . z_mean ( input_data ) self . log_v = self . z_log_var ( input_data ) eps = self . scale * torch . autograd . Variable ( torch . randn ( * self . log_v . size ()) ) . type_as ( self . log_v ) return self . mu + torch . exp ( self . log_v / 2.0 ) * eps def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the autoencoder, by default None Returns: torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) latent_noisy = self . latent_gaussian_noisy ( input_data = latent ) reconstructed = self . reconstruction ( input_data = latent_noisy ) return reconstructed def reconstruction_eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the autoencoder, by default None Returns: torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) \"\"\" encoder_output = self . projection ( input_data = input_data ) latent = self . z_mean ( encoder_output ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Projects the input data onto the autoencoder's latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to project onto the autoencoder's latent space, by default None Returns: np.ndarray: The input data projected onto the autoencoder's latent space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) projected_data_latent = self . Mu ( input_data = input_data ) return projected_data_latent . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Reconstructs the input data using the trained autoencoder. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to reconstruct, by default None Returns: np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Reconstructs the input data using the mean of the encoded data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to reconstruct, by default None Returns: np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return self . reconstruction_eval ( input_data = input_data ) . cpu () . detach () . numpy ()","title":"AutoencoderVariational"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.CoVariance","text":"Computes the covariance matrix of the encoded input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to encode and compute the covariance matrix, by default None None inv bool If True, returns the inverse of the covariance matrix, by default False False to_numpy bool If True, returns the result as a NumPy array, by default False False Returns: Type Description Union [ ndarray , Tensor ] Union[np.ndarray, torch.Tensor]: The covariance matrix (or its inverse) of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 def CoVariance ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , inv : bool = False , to_numpy : bool = False , ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the covariance matrix of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the covariance matrix, by default None inv (bool, optional): If True, returns the inverse of the covariance matrix, by default False to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The covariance matrix (or its inverse) of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) \"\"\" if inv == False : Sigma_inv = 1 / self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma_inv ) else : Sigma = self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma ) if to_numpy == True : return covariance . detach () . numpy () else : return covariance","title":"CoVariance()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Mu","text":"Computes the mean of the encoded input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to encode and compute the mean, by default None None to_numpy bool If True, returns the result as a NumPy array, by default False False Returns: Type Description Union [ ndarray , Tensor ] Union[np.ndarray, torch.Tensor]: The mean of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 def Mu ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the mean of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the mean, by default None to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The mean of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return self . z_mean ( latent ) . detach () . numpy () else : return self . z_mean ( latent )","title":"Mu()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Sigma","text":"Computes the standard deviation of the encoded input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to encode and compute the standard deviation, by default None None to_numpy bool If True, returns the result as a NumPy array, by default False False Returns: Type Description Union [ ndarray , Tensor ] Union[np.ndarray, torch.Tensor]: The standard deviation of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 def Sigma ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: r \"\"\"Computes the standard deviation of the encoded input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and compute the standard deviation, by default None to_numpy (bool, optional): If True, returns the result as a NumPy array, by default False Returns: Union[np.ndarray, torch.Tensor]: The standard deviation of the encoded input data. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return torch . exp ( self . z_log_var ( latent ) / 2 ) . detach () . numpy () else : return torch . exp ( self . z_log_var ( latent ) / 2 )","title":"Sigma()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.__init__","text":"Constructor method. Parameters: Name Type Description Default encoder Union [ ConvolutionalNetwork , DenseNetwork ] The encoder network. Defaults to None. None bottleneck_encoder Optional [ Union [ Linear , DenseNetwork ]] The bottleneck encoder network. Defaults to None. None bottleneck_decoder Optional [ Union [ Linear , DenseNetwork ]] The bottleneck decoder network. Defaults to None. None decoder Union [ ConvolutionalNetwork , DenseNetwork ] The decoder network. Defaults to None. None encoder_activation str The activation function to use in the encoder. Defaults to \"relu\". 'relu' input_dim Optional [ Tuple [ int , ...]] The input dimension of the data. Defaults to None. None output_dim Optional [ Tuple [ int , ...]] The output dimension of the data. Defaults to None. None latent_dim Optional [ int ] The size of the bottleneck layer. Defaults to None. None activation Optional [ Union [ list , str ]] The activation function to use in the networks. Defaults to None. None channels Optional [ int ] The number of channels in the input data. Defaults to None. None kernel_size Optional [ int ] Convolutional kernel size. (Default value = None) None case Optional [ str ] The name of the autoencoder variant. Defaults to None. None architecture Optional [ str ] The architecture of the networks. Defaults to None. None use_batch_norm Optional [ bool ] (Default value = False) False shallow Optional [ bool ] Whether to use a shallow network architecture. Defaults to False. False scale float The scale of the initialization. Defaults to 1e-3. 0.001 devices Union [ str , list ] The device(s) to use for computation. Defaults to \"cpu\". 'cpu' name str The name of the autoencoder. Defaults to None. None Source code in simulai/models/_pytorch_models/_autoencoder.py 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , kernel_size : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , use_batch_norm : Optional [ bool ] = False , shallow : Optional [ bool ] = False , scale : float = 1e-3 , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : r \"\"\"Constructor method. Args: encoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The encoder network. Defaults to None. bottleneck_encoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck encoder network. Defaults to None. bottleneck_decoder (Optional[Union[Linear, DenseNetwork]], optional): The bottleneck decoder network. Defaults to None. decoder (Union[ConvolutionalNetwork, DenseNetwork], optional): The decoder network. Defaults to None. encoder_activation (str, optional): The activation function to use in the encoder. Defaults to \"relu\". input_dim (Optional[Tuple[int, ...]], optional): The input dimension of the data. Defaults to None. output_dim (Optional[Tuple[int, ...]], optional): The output dimension of the data. Defaults to None. latent_dim (Optional[int], optional): The size of the bottleneck layer. Defaults to None. activation (Optional[Union[list, str]], optional): The activation function to use in the networks. Defaults to None. channels (Optional[int], optional): The number of channels in the input data. Defaults to None. kernel_size (Optional[int], optional): Convolutional kernel size. (Default value = None) case (Optional[str], optional): The name of the autoencoder variant. Defaults to None. architecture (Optional[str], optional): The architecture of the networks. Defaults to None. use_batch_norm (Optional[bool], optional): (Default value = False) shallow (Optional[bool], optional): Whether to use a shallow network architecture. Defaults to False. scale (float, optional): The scale of the initialization. Defaults to 1e-3. devices (Union[str, list], optional): The device(s) to use for computation. Defaults to \"cpu\". name (str, optional): The name of the autoencoder. Defaults to None. **kwargs \"\"\" super ( AutoencoderVariational , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , kernel_size = kernel_size , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , name = self . name , ** kwargs , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . there_is_bottleneck = False # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck self . there_is_bottleneck = True else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . z_mean = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device , ) self . z_log_var = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device , ) self . add_module ( \"z_mean\" , self . z_mean ) self . add_module ( \"z_log_var\" , self . z_log_var ) self . weights += [ self . z_mean . weight ] self . weights += [ self . z_log_var . weight ] self . mu = None self . log_v = None self . scale = scale self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict ()","title":"__init__()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.eval","text":"Reconstructs the input data using the mean of the encoded data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to reconstruct, by default None None Returns: Type Description ndarray np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Reconstructs the input data using the mean of the encoded data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to reconstruct, by default None Returns: np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return self . reconstruction_eval ( input_data = input_data ) . cpu () . detach () . numpy ()","title":"eval()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.latent_gaussian_noisy","text":"Generates a noisy latent representation of the input data. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to encode and generate a noisy latent representation, by default None None Returns: Type Description Tensor torch.Tensor: A noisy latent representation of the input data. Note: This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 def latent_gaussian_noisy ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Generates a noisy latent representation of the input data. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to encode and generate a noisy latent representation, by default None Returns: torch.Tensor: A noisy latent representation of the input data. Note: This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) \"\"\" self . mu = self . z_mean ( input_data ) self . log_v = self . z_log_var ( input_data ) eps = self . scale * torch . autograd . Variable ( torch . randn ( * self . log_v . size ()) ) . type_as ( self . log_v ) return self . mu + torch . exp ( self . log_v / 2.0 ) * eps","title":"latent_gaussian_noisy()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.project","text":"Projects the input data onto the autoencoder's latent space. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to project onto the autoencoder's latent space, by default None None Returns: Type Description ndarray np.ndarray: The input data projected onto the autoencoder's latent space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Projects the input data onto the autoencoder's latent space. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to project onto the autoencoder's latent space, by default None Returns: np.ndarray: The input data projected onto the autoencoder's latent space. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) projected_data_latent = self . Mu ( input_data = input_data ) return projected_data_latent . cpu () . detach () . numpy ()","title":"project()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruct","text":"Reconstructs the input data using the trained autoencoder. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to reconstruct, by default None None Returns: Type Description ndarray np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : r \"\"\"Reconstructs the input data using the trained autoencoder. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to reconstruct, by default None Returns: np.ndarray: The reconstructed data. Example:: >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"reconstruct()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_eval","text":"Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to pass through the autoencoder, by default None None Returns: Type Description Tensor torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 def reconstruction_eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the autoencoder, by default None Returns: torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) \"\"\" encoder_output = self . projection ( input_data = input_data ) latent = self . z_mean ( encoder_output ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed","title":"reconstruction_eval()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_forward","text":"Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] The input data to pass through the autoencoder, by default None None Returns: Type Description Tensor torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : r \"\"\"Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Args: input_data (Union[np.ndarray, torch.Tensor], optional): The input data to pass through the autoencoder, by default None Returns: torch.Tensor: The reconstructed output of the autoencoder. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) latent_noisy = self . latent_gaussian_noisy ( input_data = latent ) reconstructed = self . reconstruction ( input_data = latent_noisy ) return reconstructed","title":"reconstruction_forward()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.summary","text":"Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Parameters: Name Type Description Default input_data Union [ ndarray , Tensor ] Input data to pass through the encoder, by default None None input_shape list The shape of the input data if input_data is None, by default None None verbose bool (Default value = True) True display bool (Default value = True) True Returns: Type Description Tensor torch.Tensor: The output of the autoencoder's decoder applied to the input data. Raises: Type Description Exception If self.input_dim is not a tuple or an integer. AssertionError If input_shape is None when input_data is None. Note The summary method calls the summary method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) Source code in simulai/models/_pytorch_models/_autoencoder.py 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , display : bool = True , ) -> torch . Tensor : r \"\"\"Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Args: input_data (Union[np.ndarray, torch.Tensor], optional): Input data to pass through the encoder, by default None input_shape (list, optional): The shape of the input data if input_data is None, by default None verbose (bool, optional): (Default value = True) display (bool, optional): (Default value = True) Returns: torch.Tensor: The output of the autoencoder's decoder applied to the input data. Raises: Exception: If self.input_dim is not a tuple or an integer. AssertionError: If input_shape is None when input_data is None. Note: The summary method calls the `summary` method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Example:: >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) \"\"\" if verbose == True : if self . input_dim != None : if type ( self . input_dim ) == tuple : input_shape = list ( self . input_dim ) elif type ( self . input_dim ) == int : input_shape = [ None , self . input_dim ] else : raise Exception ( f \"input_dim is expected to be tuple or int, but received { type ( self . input_dim ) } \" ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device , display = display , ) if type ( self . encoder . output_size ) == tuple : self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) input_shape = self . encoder . input_size elif type ( self . encoder . output_size ) == int : input_shape = [ None , self . encoder . input_size ] else : pass if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) # Bottleneck networks is are optional if self . there_is_bottleneck : latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary ( display = display ) self . bottleneck_decoder . summary ( display = display ) bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) else : bottleneck_output = btnk_input self . decoder . summary ( input_data = bottleneck_output , device = self . device , display = display ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) # Bottleneck networks is are optional if self . there_is_bottleneck : self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self )","title":"summary()"},{"location":"simulai_regression/","text":"simulai.regression # Dense # Linear # Bases: NetworkTemplate Source code in simulai/regression/_pytorch/_dense.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class Linear ( NetworkTemplate ): name = \"linear\" engine = \"torch\" def __init__ ( self , input_size : int = None , output_size : int = None , bias : bool = True , name : str = None , ) -> None : \"\"\"Linear operator F(u) = Au + b Args: input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) \"\"\" super ( Linear , self ) . __init__ ( name = name ) self . input_size = input_size self . output_size = output_size self . activations_str = None self . layers = [ torch . nn . Linear ( input_size , output_size , bias = bias )] self . add_module ( self . name + \"_\" + \"linear_op\" , self . layers [ 0 ]) self . weights = [ item . weight for item in self . layers ] self . bias = [ item . bias for item in self . layers ] self . name = name @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Applying the operator Linear. Args: input_data (Union[torch.Tensor, np.ndarray], optional): Data to be processed using Linear. (Default value = None) \"\"\" return self . layers [ 0 ]( input_data ) def to_numpy ( self ): \"\"\"It converts the tensors in Linear to numpy.ndarray.\"\"\" return LinearNumpy ( layer = self . layers [ 0 ], name = self . name ) __init__ ( input_size = None , output_size = None , bias = True , name = None ) # Linear operator F(u) = Au + b Parameters: Name Type Description Default input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None bias bool Using bias tensor or not. (Default value = True) True name str A name for identifying the model. (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def __init__ ( self , input_size : int = None , output_size : int = None , bias : bool = True , name : str = None , ) -> None : \"\"\"Linear operator F(u) = Au + b Args: input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) \"\"\" super ( Linear , self ) . __init__ ( name = name ) self . input_size = input_size self . output_size = output_size self . activations_str = None self . layers = [ torch . nn . Linear ( input_size , output_size , bias = bias )] self . add_module ( self . name + \"_\" + \"linear_op\" , self . layers [ 0 ]) self . weights = [ item . weight for item in self . layers ] self . bias = [ item . bias for item in self . layers ] self . name = name forward ( input_data = None ) # Applying the operator Linear. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] Data to be processed using Linear. (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 65 66 67 68 69 70 71 72 73 74 75 76 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Applying the operator Linear. Args: input_data (Union[torch.Tensor, np.ndarray], optional): Data to be processed using Linear. (Default value = None) \"\"\" return self . layers [ 0 ]( input_data ) to_numpy () # It converts the tensors in Linear to numpy.ndarray. Source code in simulai/regression/_pytorch/_dense.py 78 79 80 81 def to_numpy ( self ): \"\"\"It converts the tensors in Linear to numpy.ndarray.\"\"\" return LinearNumpy ( layer = self . layers [ 0 ], name = self . name ) SLFNN # Bases: Linear Source code in simulai/regression/_pytorch/_dense.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 class SLFNN ( Linear ): def __init__ ( self , input_size : int = None , output_size : int = None , bias : bool = True , name : str = None , activation : str = \"tanh\" , ) -> None : \"\"\"Single layer fully-connected (dense) neural network Args: input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) activation (str, optional): Activation function. (Default value = \"tanh\") \"\"\" super ( SLFNN , self ) . __init__ ( input_size = input_size , output_size = output_size , bias = bias , name = name ) self . activation = self . _get_operation ( operation = activation ) def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Applying the operator Linear. Args: input_data (Union[torch.Tensor, np.ndarray], optional): Data to be processed using SLFNN. (Default value = None) \"\"\" return self . activation ( super () . forward ( input_data = input_data )) __init__ ( input_size = None , output_size = None , bias = True , name = None , activation = 'tanh' ) # Single layer fully-connected (dense) neural network Parameters: Name Type Description Default input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None bias bool Using bias tensor or not. (Default value = True) True name str A name for identifying the model. (Default value = None) None activation str Activation function. (Default value = \"tanh\") 'tanh' Source code in simulai/regression/_pytorch/_dense.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def __init__ ( self , input_size : int = None , output_size : int = None , bias : bool = True , name : str = None , activation : str = \"tanh\" , ) -> None : \"\"\"Single layer fully-connected (dense) neural network Args: input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) activation (str, optional): Activation function. (Default value = \"tanh\") \"\"\" super ( SLFNN , self ) . __init__ ( input_size = input_size , output_size = output_size , bias = bias , name = name ) self . activation = self . _get_operation ( operation = activation ) forward ( input_data = None ) # Applying the operator Linear. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] Data to be processed using SLFNN. (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 110 111 112 113 114 115 116 117 118 119 120 def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Applying the operator Linear. Args: input_data (Union[torch.Tensor, np.ndarray], optional): Data to be processed using SLFNN. (Default value = None) \"\"\" return self . activation ( super () . forward ( input_data = input_data )) ShallowNetwork # Bases: SLFNN Source code in simulai/regression/_pytorch/_dense.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 class ShallowNetwork ( SLFNN ): def __init__ ( self , input_size : int = None , hidden_size : int = None , output_size : int = None , bias : bool = True , name : str = None , activation : str = \"tanh\" , ) -> None : \"\"\"ELM-like (Extreme Learning Machine) shallow network Args: input_size (int, optional): Dimension of the input. (Default value = None) hidden_size (int, optional): Dimension of the hidden (intermediary) state. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias or not for the last layer. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) activation (str, optional): Activation function. (Default value = \"tanh\") \"\"\" super ( ShallowNetwork , self ) . __init__ ( input_size = input_size , output_size = hidden_size , bias = bias , name = name ) self . output_layer = Linear ( input_size = hidden_size , output_size = output_size , bias = False , name = \"output\" ) self . output_size = output_size def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): (Default value = None) \"\"\" hidden_state = self . activation ( super () . forward ( input_data = input_data )) return self . output_layer . forward ( input_data = hidden_state ) __init__ ( input_size = None , hidden_size = None , output_size = None , bias = True , name = None , activation = 'tanh' ) # ELM-like (Extreme Learning Machine) shallow network Parameters: Name Type Description Default input_size int Dimension of the input. (Default value = None) None hidden_size int Dimension of the hidden (intermediary) state. (Default value = None) None output_size int Dimension of the output. (Default value = None) None bias bool Using bias or not for the last layer. (Default value = True) True name str A name for identifying the model. (Default value = None) None activation str Activation function. (Default value = \"tanh\") 'tanh' Source code in simulai/regression/_pytorch/_dense.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 def __init__ ( self , input_size : int = None , hidden_size : int = None , output_size : int = None , bias : bool = True , name : str = None , activation : str = \"tanh\" , ) -> None : \"\"\"ELM-like (Extreme Learning Machine) shallow network Args: input_size (int, optional): Dimension of the input. (Default value = None) hidden_size (int, optional): Dimension of the hidden (intermediary) state. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias or not for the last layer. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) activation (str, optional): Activation function. (Default value = \"tanh\") \"\"\" super ( ShallowNetwork , self ) . __init__ ( input_size = input_size , output_size = hidden_size , bias = bias , name = name ) self . output_layer = Linear ( input_size = hidden_size , output_size = output_size , bias = False , name = \"output\" ) self . output_size = output_size forward ( input_data = None ) # Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 155 156 157 158 159 160 161 162 163 164 165 166 167 def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): (Default value = None) \"\"\" hidden_state = self . activation ( super () . forward ( input_data = input_data )) return self . output_layer . forward ( input_data = hidden_state ) DenseNetwork # Bases: NetworkTemplate Source code in simulai/regression/_pytorch/_dense.pyclass DenseNetwork ( NetworkTemplate ): name = \"dense\" engine = \"torch\" def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , ** kwargs , ) -> None : \"\"\"Dense (fully-connected) neural network written in PyTorch Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). **kwargs \"\"\" super ( DenseNetwork , self ) . __init__ () assert layers_units , \"Please, set a list of units for each layer\" assert activations , ( \"Please, set a list of activation functions\" \"or a string for all of them.\" ) # These activations support gain evaluation for the initial state self . gain_supported_activations = [ \"sigmoid\" , \"tanh\" , \"relu\" , \"leaky_relu\" ] # Default attributes self . layers_units = layers_units self . input_size = input_size self . output_size = output_size self . normalization = normalization self . name = name self . last_bias = last_bias # For extra and not ever required parameters for k , v in kwargs . items (): setattr ( self , k , v ) # Getting up parameters from host self . _get_from_guest ( activation = activations ) self . weights = list () # The total number of layers includes the output layer self . n_layers = len ( self . layers_units ) + 1 self . default_last_activation = last_activation self . activations , self . activations_str = self . _setup_activations ( activation = activations ) self . initializations = [ self . _determine_initialization ( activation ) for activation in self . activations_str ] self . layers = self . _setup_hidden_layers ( last_bias = last_bias ) array_layers = self . _numpy_layers () n_layers = len ( self . layers ) self . shapes = [ item . shape for item in list ( sum ( array_layers , []))] self . stitch_idx = self . _make_stitch_idx () self . layers_map = [[ ll , ll + 1 ] for ll in range ( 0 , 2 * n_layers , 2 )] def _calculate_gain ( self , activation : str = \"Tanh\" ) -> float : \"\"\"It evaluates a multiplier coefficient, named as `gain`, which is used to enhance the funcionality of each kind of activation function. Args: activation (str, optional): (Default value = \"Tanh\") \"\"\" if type ( activation ) is not str : assert hasattr ( activation , \"name\" ), f \"Activation object { type ( activation ) } must have attribute \u00b4name\u00b4.\" name = getattr ( activation , \"name\" ) else : name = activation if name . lower () in self . gain_supported_activations : return torch . nn . init . calculate_gain ( name . lower ()) else : return 1 @staticmethod def _determine_initialization ( activation : str = \"Tanh\" ) -> str : \"\"\"It determines the most proper initialization method for each activation function. Args: activation (str, optional): Activation function. (Default value = \"Tanh\") \"\"\" if type ( activation ) is not str : assert hasattr ( activation , \"name\" ), f \"Activation object { type ( activation ) } must have attribute \u00b4name\u00b4.\" name = getattr ( activation , \"name\" ) else : name = activation if name in [ \"ReLU\" ]: return \"kaiming\" elif name == \"Siren\" : return \"siren\" else : return \"xavier\" def _setup_layer ( self , input_size : int = 0 , output_size : int = 0 , initialization : str = None , bias : bool = True , first_layer : bool = False , ) -> torch . nn . Linear : \"\"\" Args: input_size (int, optional): Dimension of the input. (Default value = 0) output_size (int, optional): Dimension of the output. (Default value = 0) initialization (str, optional): Initialization method. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) first_layer (bool, optional): Is this layer the first layer or not. (Default value = False) \"\"\" # It instantiates a linear operation # f: y^l = f(x^(l-1)) = (W^l).dot(x^(l-1)) + b^l layer = torch . nn . Linear ( input_size , output_size , bias = bias ) if initialization == \"xavier\" : torch . nn . init . xavier_normal_ ( layer . weight , gain = self . _calculate_gain ( self . activations_str [ 0 ]) ) return layer # The Siren initialization requires some special consideration elif initialization == \"siren\" : assert ( self . c is not None ), \"When using siren, the parameter c must be defined.\" assert ( self . omega_0 is not None ), \"When using siren, the parameter omega_0 must be defined.\" if first_layer == True : m = 1 / input_size else : m = np . sqrt ( self . c / input_size ) / self . omega_0 torch . nn . init . trunc_normal_ ( layer . weight , a =- m , b = m ) b = np . sqrt ( 1 / input_size ) torch . nn . init . trunc_normal_ ( layer . bias , a =- b , b = b ) return layer elif initialization == \"kaiming\" : return layer # Kaiming is the default initialization in PyTorch else : print ( \"Initialization method still not implemented. \\ Using Kaiming instead\" ) return layer # The forward step of the network @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"It executes the forward step for the DenseNetwork. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input tensor to be processed by DenseNetwork. (Default value = None) \"\"\" input_tensor_ = input_data # TODO It can be done using the PyTorch Sequential object for layer_id in range ( len ( self . layers )): output_tensor_ = self . layers [ layer_id ]( input_tensor_ ) _output_tensor_ = self . activations [ layer_id ]( output_tensor_ ) input_tensor_ = _output_tensor_ output_tensor = input_tensor_ return output_tensor __init__ ( layers_units = None , activations = None , input_size = None , output_size = None , normalization = 'bypass' , name = '' , last_bias = True , last_activation = 'identity' , ** kwargs ) # Dense (fully-connected) neural network written in PyTorch Parameters: Name Type Description Default layers_units list List with the number of neurons for each layer. (Default value = None) None activations Union [ list , str ] List of activations for each layer or a single string None input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None normalization str Kind of normalization used between two layers. (Default value = \"bypass\") 'bypass' name str A name for identifying the model. (Default value = \"\") '' last_bias bool Using bias in the last layer or not. (Default value = True) True last_activation str Activation for the last layer (default is 'identity'). 'identity' Source code in simulai/regression/_pytorch/_dense.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , ** kwargs , ) -> None : \"\"\"Dense (fully-connected) neural network written in PyTorch Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). **kwargs \"\"\" super ( DenseNetwork , self ) . __init__ () assert layers_units , \"Please, set a list of units for each layer\" assert activations , ( \"Please, set a list of activation functions\" \"or a string for all of them.\" ) # These activations support gain evaluation for the initial state self . gain_supported_activations = [ \"sigmoid\" , \"tanh\" , \"relu\" , \"leaky_relu\" ] # Default attributes self . layers_units = layers_units self . input_size = input_size self . output_size = output_size self . normalization = normalization self . name = name self . last_bias = last_bias # For extra and not ever required parameters for k , v in kwargs . items (): setattr ( self , k , v ) # Getting up parameters from host self . _get_from_guest ( activation = activations ) self . weights = list () # The total number of layers includes the output layer self . n_layers = len ( self . layers_units ) + 1 self . default_last_activation = last_activation self . activations , self . activations_str = self . _setup_activations ( activation = activations ) self . initializations = [ self . _determine_initialization ( activation ) for activation in self . activations_str ] self . layers = self . _setup_hidden_layers ( last_bias = last_bias ) array_layers = self . _numpy_layers () n_layers = len ( self . layers ) self . shapes = [ item . shape for item in list ( sum ( array_layers , []))] self . stitch_idx = self . _make_stitch_idx () self . layers_map = [[ ll , ll + 1 ] for ll in range ( 0 , 2 * n_layers , 2 )] forward ( input_data = None ) # It executes the forward step for the DenseNetwork. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] The input tensor to be processed by DenseNetwork. (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"It executes the forward step for the DenseNetwork. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input tensor to be processed by DenseNetwork. (Default value = None) \"\"\" input_tensor_ = input_data # TODO It can be done using the PyTorch Sequential object for layer_id in range ( len ( self . layers )): output_tensor_ = self . layers [ layer_id ]( input_tensor_ ) _output_tensor_ = self . activations [ layer_id ]( output_tensor_ ) input_tensor_ = _output_tensor_ output_tensor = input_tensor_ return output_tensor ResDenseNetwork # Bases: DenseNetwork Source code in simulai/regression/_pytorch/_dense.py 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 class ResDenseNetwork ( DenseNetwork ): name = \"residualdense\" engine = \"torch\" def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , residual_size : int = 1 , ** kwargs , ) -> None : \"\"\"Residual Dense (fully-connected) neural network written in PyTorch Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). residual_size (int, optional): Size of the residual block. (Default value = 1) **kwargs \"\"\" super () . __init__ ( layers_units = layers_units , activations = activations , input_size = input_size , output_size = output_size , normalization = normalization , name = name , last_bias = last_bias , last_activation = last_activation , ** kwargs , ) # Considering the activations layers self . residual_size = 2 * residual_size self . ratio = 0.5 # Excluding the input and output layers merged_layers = self . _merge ( layer = self . layers , act = self . activations ) assert len ( merged_layers [ 2 : - 2 ]) % self . residual_size == 0 , ( \"The number of layers must be divisible\" \" by the residual block size,\" f \" but received { len ( merged_layers ) } and { residual_size } \" ) self . n_residual_blocks = int ( len ( merged_layers [ 2 : - 2 ]) / self . residual_size ) sub_layers = [ item . tolist () for item in np . split ( np . array ( merged_layers [ 2 : - 2 ]), self . n_residual_blocks ) ] self . input_block = torch . nn . Sequential ( * merged_layers [: 2 ]) self . hidden_blocks = [ torch . nn . Sequential ( * item ) for item in sub_layers ] self . output_block = torch . nn . Sequential ( * merged_layers [ - 2 :]) # Merging the layers into a reasonable sequence def _merge ( self , layer : list = None , act : list = None ) -> list : \"\"\"It merges the dense layers and the activations into a single block. Args: layer (list, optional): List of dense layers. (Default value = None) act (list, optional): List of activation functions. (Default value = None) \"\"\" merged_list = list () for i , j in zip ( layer , act ): merged_list . append ( i ) merged_list . append ( j ) return merged_list def summary ( self ): \"\"\"It prints a summary of the network.\"\"\" super () . summary () print ( \"Residual Blocks: \\n \" ) print ( self . input_block ) print ( self . hidden_blocks ) print ( self . output_block ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): (Default value = None) \"\"\" input_tensor_ = input_data input_tensor_ = self . input_block ( input_tensor_ ) for block in self . hidden_blocks : output_tensor_ = self . ratio * ( input_tensor_ + block ( input_tensor_ )) input_tensor_ = output_tensor_ output_tensor = self . output_block ( input_tensor_ ) return output_tensor __init__ ( layers_units = None , activations = None , input_size = None , output_size = None , normalization = 'bypass' , name = '' , last_bias = True , last_activation = 'identity' , residual_size = 1 , ** kwargs ) # Residual Dense (fully-connected) neural network written in PyTorch Parameters: Name Type Description Default layers_units list List with the number of neurons for each layer. (Default value = None) None activations Union [ list , str ] List of activations for each layer or a single string None input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None normalization str Kind of normalization used between two layers. (Default value = \"bypass\") 'bypass' name str A name for identifying the model. (Default value = \"\") '' last_bias bool Using bias in the last layer or not. (Default value = True) True last_activation str Activation for the last layer (default is 'identity'). 'identity' residual_size int Size of the residual block. (Default value = 1) 1 Source code in simulai/regression/_pytorch/_dense.py 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , residual_size : int = 1 , ** kwargs , ) -> None : \"\"\"Residual Dense (fully-connected) neural network written in PyTorch Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). residual_size (int, optional): Size of the residual block. (Default value = 1) **kwargs \"\"\" super () . __init__ ( layers_units = layers_units , activations = activations , input_size = input_size , output_size = output_size , normalization = normalization , name = name , last_bias = last_bias , last_activation = last_activation , ** kwargs , ) # Considering the activations layers self . residual_size = 2 * residual_size self . ratio = 0.5 # Excluding the input and output layers merged_layers = self . _merge ( layer = self . layers , act = self . activations ) assert len ( merged_layers [ 2 : - 2 ]) % self . residual_size == 0 , ( \"The number of layers must be divisible\" \" by the residual block size,\" f \" but received { len ( merged_layers ) } and { residual_size } \" ) self . n_residual_blocks = int ( len ( merged_layers [ 2 : - 2 ]) / self . residual_size ) sub_layers = [ item . tolist () for item in np . split ( np . array ( merged_layers [ 2 : - 2 ]), self . n_residual_blocks ) ] self . input_block = torch . nn . Sequential ( * merged_layers [: 2 ]) self . hidden_blocks = [ torch . nn . Sequential ( * item ) for item in sub_layers ] self . output_block = torch . nn . Sequential ( * merged_layers [ - 2 :]) forward ( input_data = None ) # Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): (Default value = None) \"\"\" input_tensor_ = input_data input_tensor_ = self . input_block ( input_tensor_ ) for block in self . hidden_blocks : output_tensor_ = self . ratio * ( input_tensor_ + block ( input_tensor_ )) input_tensor_ = output_tensor_ output_tensor = self . output_block ( input_tensor_ ) return output_tensor summary () # It prints a summary of the network. Source code in simulai/regression/_pytorch/_dense.py 476 477 478 479 480 481 482 483 484 485 def summary ( self ): \"\"\"It prints a summary of the network.\"\"\" super () . summary () print ( \"Residual Blocks: \\n \" ) print ( self . input_block ) print ( self . hidden_blocks ) print ( self . output_block ) ConvexDenseNetwork # Bases: DenseNetwork Source code in simulai/regression/_pytorch/_dense.py 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 class ConvexDenseNetwork ( DenseNetwork ): name = \"convexdense\" engine = \"torch\" def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , ** kwargs , ) -> None : \"\"\"Dense network with convex combinations in the hidden layers. This architecture is useful when combined to the Improved Version of DeepONets Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). **kwargs \"\"\" self . hidden_size = None assert self . _check_regular_net ( layers_units = layers_units ), ( \"All the hidden layers must be equal in\" \"a Convex Dense Network.\" ) super () . __init__ ( layers_units = layers_units , activations = activations , input_size = input_size , output_size = output_size , normalization = normalization , name = name , last_bias = last_bias , last_activation = last_activation , ** kwargs , ) def _check_regular_net ( self , layers_units : list ) -> bool : \"\"\"It checks if all the layers has the same number of neurons. Args: layers_units (list): \"\"\" mean = int ( sum ( layers_units ) / len ( layers_units )) self . hidden_size = mean if len ([ True for j in layers_units if j == mean ]) == len ( layers_units ): return True else : return False @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None , u : Union [ torch . Tensor , np . ndarray ] = None , v : Union [ torch . Tensor , np . ndarray ] = None , ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): Input data to be processed using ConvexDenseNetwork. (Default value = None) u (Union[torch.Tensor, np.ndarray], optional): Input generated by the first auxiliar encoder (external model). (Default value = None) v (Union[torch.Tensor, np.ndarray], optional): Input generated by the second auxiliar encoder (external model). (Default value = None) \"\"\" input_tensor_ = input_data # The first layer operation has no difference from the Vanilla one first_output = self . activations [ 0 ]( self . layers [ 0 ]( input_tensor_ )) input_tensor_ = first_output layers_hidden = self . layers [ 1 : - 1 ] activations_hidden = self . activations [ 1 : - 1 ] for layer_id in range ( len ( layers_hidden )): output_tensor_ = layers_hidden [ layer_id ]( input_tensor_ ) z = activations_hidden [ layer_id ]( output_tensor_ ) _output_tensor_ = ( 1 - z ) * u + z * v input_tensor_ = _output_tensor_ # The last layer operation too last_output = self . activations [ - 1 ]( self . layers [ - 1 ]( input_tensor_ )) output_tensor = last_output return output_tensor __init__ ( layers_units = None , activations = None , input_size = None , output_size = None , normalization = 'bypass' , name = '' , last_bias = True , last_activation = 'identity' , ** kwargs ) # Dense network with convex combinations in the hidden layers. This architecture is useful when combined to the Improved Version of DeepONets Parameters: Name Type Description Default layers_units list List with the number of neurons for each layer. (Default value = None) None activations Union [ list , str ] List of activations for each layer or a single string None input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None normalization str Kind of normalization used between two layers. (Default value = \"bypass\") 'bypass' name str A name for identifying the model. (Default value = \"\") '' last_bias bool Using bias in the last layer or not. (Default value = True) True last_activation str Activation for the last layer (default is 'identity'). 'identity' Source code in simulai/regression/_pytorch/_dense.py 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , ** kwargs , ) -> None : \"\"\"Dense network with convex combinations in the hidden layers. This architecture is useful when combined to the Improved Version of DeepONets Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). **kwargs \"\"\" self . hidden_size = None assert self . _check_regular_net ( layers_units = layers_units ), ( \"All the hidden layers must be equal in\" \"a Convex Dense Network.\" ) super () . __init__ ( layers_units = layers_units , activations = activations , input_size = input_size , output_size = output_size , normalization = normalization , name = name , last_bias = last_bias , last_activation = last_activation , ** kwargs , ) forward ( input_data = None , u = None , v = None ) # Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] Input data to be processed using ConvexDenseNetwork. (Default value = None) None u Union [ Tensor , ndarray ] Input generated by the first auxiliar encoder (external model). (Default value = None) None v Union [ Tensor , ndarray ] Input generated by the second auxiliar encoder (external model). (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None , u : Union [ torch . Tensor , np . ndarray ] = None , v : Union [ torch . Tensor , np . ndarray ] = None , ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): Input data to be processed using ConvexDenseNetwork. (Default value = None) u (Union[torch.Tensor, np.ndarray], optional): Input generated by the first auxiliar encoder (external model). (Default value = None) v (Union[torch.Tensor, np.ndarray], optional): Input generated by the second auxiliar encoder (external model). (Default value = None) \"\"\" input_tensor_ = input_data # The first layer operation has no difference from the Vanilla one first_output = self . activations [ 0 ]( self . layers [ 0 ]( input_tensor_ )) input_tensor_ = first_output layers_hidden = self . layers [ 1 : - 1 ] activations_hidden = self . activations [ 1 : - 1 ] for layer_id in range ( len ( layers_hidden )): output_tensor_ = layers_hidden [ layer_id ]( input_tensor_ ) z = activations_hidden [ layer_id ]( output_tensor_ ) _output_tensor_ = ( 1 - z ) * u + z * v input_tensor_ = _output_tensor_ # The last layer operation too last_output = self . activations [ - 1 ]( self . layers [ - 1 ]( input_tensor_ )) output_tensor = last_output return output_tensor","title":"simulai.regression"},{"location":"simulai_regression/#simulairegression","text":"","title":"simulai.regression"},{"location":"simulai_regression/#dense","text":"","title":"Dense"},{"location":"simulai_regression/#linear","text":"Bases: NetworkTemplate Source code in simulai/regression/_pytorch/_dense.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class Linear ( NetworkTemplate ): name = \"linear\" engine = \"torch\" def __init__ ( self , input_size : int = None , output_size : int = None , bias : bool = True , name : str = None , ) -> None : \"\"\"Linear operator F(u) = Au + b Args: input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) \"\"\" super ( Linear , self ) . __init__ ( name = name ) self . input_size = input_size self . output_size = output_size self . activations_str = None self . layers = [ torch . nn . Linear ( input_size , output_size , bias = bias )] self . add_module ( self . name + \"_\" + \"linear_op\" , self . layers [ 0 ]) self . weights = [ item . weight for item in self . layers ] self . bias = [ item . bias for item in self . layers ] self . name = name @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Applying the operator Linear. Args: input_data (Union[torch.Tensor, np.ndarray], optional): Data to be processed using Linear. (Default value = None) \"\"\" return self . layers [ 0 ]( input_data ) def to_numpy ( self ): \"\"\"It converts the tensors in Linear to numpy.ndarray.\"\"\" return LinearNumpy ( layer = self . layers [ 0 ], name = self . name )","title":"Linear"},{"location":"simulai_regression/#simulai.regression.Linear.__init__","text":"Linear operator F(u) = Au + b Parameters: Name Type Description Default input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None bias bool Using bias tensor or not. (Default value = True) True name str A name for identifying the model. (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def __init__ ( self , input_size : int = None , output_size : int = None , bias : bool = True , name : str = None , ) -> None : \"\"\"Linear operator F(u) = Au + b Args: input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) \"\"\" super ( Linear , self ) . __init__ ( name = name ) self . input_size = input_size self . output_size = output_size self . activations_str = None self . layers = [ torch . nn . Linear ( input_size , output_size , bias = bias )] self . add_module ( self . name + \"_\" + \"linear_op\" , self . layers [ 0 ]) self . weights = [ item . weight for item in self . layers ] self . bias = [ item . bias for item in self . layers ] self . name = name","title":"__init__()"},{"location":"simulai_regression/#simulai.regression.Linear.forward","text":"Applying the operator Linear. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] Data to be processed using Linear. (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 65 66 67 68 69 70 71 72 73 74 75 76 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Applying the operator Linear. Args: input_data (Union[torch.Tensor, np.ndarray], optional): Data to be processed using Linear. (Default value = None) \"\"\" return self . layers [ 0 ]( input_data )","title":"forward()"},{"location":"simulai_regression/#simulai.regression.Linear.to_numpy","text":"It converts the tensors in Linear to numpy.ndarray. Source code in simulai/regression/_pytorch/_dense.py 78 79 80 81 def to_numpy ( self ): \"\"\"It converts the tensors in Linear to numpy.ndarray.\"\"\" return LinearNumpy ( layer = self . layers [ 0 ], name = self . name )","title":"to_numpy()"},{"location":"simulai_regression/#slfnn","text":"Bases: Linear Source code in simulai/regression/_pytorch/_dense.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 class SLFNN ( Linear ): def __init__ ( self , input_size : int = None , output_size : int = None , bias : bool = True , name : str = None , activation : str = \"tanh\" , ) -> None : \"\"\"Single layer fully-connected (dense) neural network Args: input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) activation (str, optional): Activation function. (Default value = \"tanh\") \"\"\" super ( SLFNN , self ) . __init__ ( input_size = input_size , output_size = output_size , bias = bias , name = name ) self . activation = self . _get_operation ( operation = activation ) def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Applying the operator Linear. Args: input_data (Union[torch.Tensor, np.ndarray], optional): Data to be processed using SLFNN. (Default value = None) \"\"\" return self . activation ( super () . forward ( input_data = input_data ))","title":"SLFNN"},{"location":"simulai_regression/#simulai.regression.SLFNN.__init__","text":"Single layer fully-connected (dense) neural network Parameters: Name Type Description Default input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None bias bool Using bias tensor or not. (Default value = True) True name str A name for identifying the model. (Default value = None) None activation str Activation function. (Default value = \"tanh\") 'tanh' Source code in simulai/regression/_pytorch/_dense.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def __init__ ( self , input_size : int = None , output_size : int = None , bias : bool = True , name : str = None , activation : str = \"tanh\" , ) -> None : \"\"\"Single layer fully-connected (dense) neural network Args: input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) activation (str, optional): Activation function. (Default value = \"tanh\") \"\"\" super ( SLFNN , self ) . __init__ ( input_size = input_size , output_size = output_size , bias = bias , name = name ) self . activation = self . _get_operation ( operation = activation )","title":"__init__()"},{"location":"simulai_regression/#simulai.regression.SLFNN.forward","text":"Applying the operator Linear. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] Data to be processed using SLFNN. (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 110 111 112 113 114 115 116 117 118 119 120 def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"Applying the operator Linear. Args: input_data (Union[torch.Tensor, np.ndarray], optional): Data to be processed using SLFNN. (Default value = None) \"\"\" return self . activation ( super () . forward ( input_data = input_data ))","title":"forward()"},{"location":"simulai_regression/#shallownetwork","text":"Bases: SLFNN Source code in simulai/regression/_pytorch/_dense.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 class ShallowNetwork ( SLFNN ): def __init__ ( self , input_size : int = None , hidden_size : int = None , output_size : int = None , bias : bool = True , name : str = None , activation : str = \"tanh\" , ) -> None : \"\"\"ELM-like (Extreme Learning Machine) shallow network Args: input_size (int, optional): Dimension of the input. (Default value = None) hidden_size (int, optional): Dimension of the hidden (intermediary) state. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias or not for the last layer. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) activation (str, optional): Activation function. (Default value = \"tanh\") \"\"\" super ( ShallowNetwork , self ) . __init__ ( input_size = input_size , output_size = hidden_size , bias = bias , name = name ) self . output_layer = Linear ( input_size = hidden_size , output_size = output_size , bias = False , name = \"output\" ) self . output_size = output_size def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): (Default value = None) \"\"\" hidden_state = self . activation ( super () . forward ( input_data = input_data )) return self . output_layer . forward ( input_data = hidden_state )","title":"ShallowNetwork"},{"location":"simulai_regression/#simulai.regression.ShallowNetwork.__init__","text":"ELM-like (Extreme Learning Machine) shallow network Parameters: Name Type Description Default input_size int Dimension of the input. (Default value = None) None hidden_size int Dimension of the hidden (intermediary) state. (Default value = None) None output_size int Dimension of the output. (Default value = None) None bias bool Using bias or not for the last layer. (Default value = True) True name str A name for identifying the model. (Default value = None) None activation str Activation function. (Default value = \"tanh\") 'tanh' Source code in simulai/regression/_pytorch/_dense.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 def __init__ ( self , input_size : int = None , hidden_size : int = None , output_size : int = None , bias : bool = True , name : str = None , activation : str = \"tanh\" , ) -> None : \"\"\"ELM-like (Extreme Learning Machine) shallow network Args: input_size (int, optional): Dimension of the input. (Default value = None) hidden_size (int, optional): Dimension of the hidden (intermediary) state. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) bias (bool, optional): Using bias or not for the last layer. (Default value = True) name (str, optional): A name for identifying the model. (Default value = None) activation (str, optional): Activation function. (Default value = \"tanh\") \"\"\" super ( ShallowNetwork , self ) . __init__ ( input_size = input_size , output_size = hidden_size , bias = bias , name = name ) self . output_layer = Linear ( input_size = hidden_size , output_size = output_size , bias = False , name = \"output\" ) self . output_size = output_size","title":"__init__()"},{"location":"simulai_regression/#simulai.regression.ShallowNetwork.forward","text":"Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 155 156 157 158 159 160 161 162 163 164 165 166 167 def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): (Default value = None) \"\"\" hidden_state = self . activation ( super () . forward ( input_data = input_data )) return self . output_layer . forward ( input_data = hidden_state )","title":"forward()"},{"location":"simulai_regression/#densenetwork","text":"Bases: NetworkTemplate Source code in simulai/regression/_pytorch/_dense.pyclass DenseNetwork ( NetworkTemplate ): name = \"dense\" engine = \"torch\" def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , ** kwargs , ) -> None : \"\"\"Dense (fully-connected) neural network written in PyTorch Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). **kwargs \"\"\" super ( DenseNetwork , self ) . __init__ () assert layers_units , \"Please, set a list of units for each layer\" assert activations , ( \"Please, set a list of activation functions\" \"or a string for all of them.\" ) # These activations support gain evaluation for the initial state self . gain_supported_activations = [ \"sigmoid\" , \"tanh\" , \"relu\" , \"leaky_relu\" ] # Default attributes self . layers_units = layers_units self . input_size = input_size self . output_size = output_size self . normalization = normalization self . name = name self . last_bias = last_bias # For extra and not ever required parameters for k , v in kwargs . items (): setattr ( self , k , v ) # Getting up parameters from host self . _get_from_guest ( activation = activations ) self . weights = list () # The total number of layers includes the output layer self . n_layers = len ( self . layers_units ) + 1 self . default_last_activation = last_activation self . activations , self . activations_str = self . _setup_activations ( activation = activations ) self . initializations = [ self . _determine_initialization ( activation ) for activation in self . activations_str ] self . layers = self . _setup_hidden_layers ( last_bias = last_bias ) array_layers = self . _numpy_layers () n_layers = len ( self . layers ) self . shapes = [ item . shape for item in list ( sum ( array_layers , []))] self . stitch_idx = self . _make_stitch_idx () self . layers_map = [[ ll , ll + 1 ] for ll in range ( 0 , 2 * n_layers , 2 )] def _calculate_gain ( self , activation : str = \"Tanh\" ) -> float : \"\"\"It evaluates a multiplier coefficient, named as `gain`, which is used to enhance the funcionality of each kind of activation function. Args: activation (str, optional): (Default value = \"Tanh\") \"\"\" if type ( activation ) is not str : assert hasattr ( activation , \"name\" ), f \"Activation object { type ( activation ) } must have attribute \u00b4name\u00b4.\" name = getattr ( activation , \"name\" ) else : name = activation if name . lower () in self . gain_supported_activations : return torch . nn . init . calculate_gain ( name . lower ()) else : return 1 @staticmethod def _determine_initialization ( activation : str = \"Tanh\" ) -> str : \"\"\"It determines the most proper initialization method for each activation function. Args: activation (str, optional): Activation function. (Default value = \"Tanh\") \"\"\" if type ( activation ) is not str : assert hasattr ( activation , \"name\" ), f \"Activation object { type ( activation ) } must have attribute \u00b4name\u00b4.\" name = getattr ( activation , \"name\" ) else : name = activation if name in [ \"ReLU\" ]: return \"kaiming\" elif name == \"Siren\" : return \"siren\" else : return \"xavier\" def _setup_layer ( self , input_size : int = 0 , output_size : int = 0 , initialization : str = None , bias : bool = True , first_layer : bool = False , ) -> torch . nn . Linear : \"\"\" Args: input_size (int, optional): Dimension of the input. (Default value = 0) output_size (int, optional): Dimension of the output. (Default value = 0) initialization (str, optional): Initialization method. (Default value = None) bias (bool, optional): Using bias tensor or not. (Default value = True) first_layer (bool, optional): Is this layer the first layer or not. (Default value = False) \"\"\" # It instantiates a linear operation # f: y^l = f(x^(l-1)) = (W^l).dot(x^(l-1)) + b^l layer = torch . nn . Linear ( input_size , output_size , bias = bias ) if initialization == \"xavier\" : torch . nn . init . xavier_normal_ ( layer . weight , gain = self . _calculate_gain ( self . activations_str [ 0 ]) ) return layer # The Siren initialization requires some special consideration elif initialization == \"siren\" : assert ( self . c is not None ), \"When using siren, the parameter c must be defined.\" assert ( self . omega_0 is not None ), \"When using siren, the parameter omega_0 must be defined.\" if first_layer == True : m = 1 / input_size else : m = np . sqrt ( self . c / input_size ) / self . omega_0 torch . nn . init . trunc_normal_ ( layer . weight , a =- m , b = m ) b = np . sqrt ( 1 / input_size ) torch . nn . init . trunc_normal_ ( layer . bias , a =- b , b = b ) return layer elif initialization == \"kaiming\" : return layer # Kaiming is the default initialization in PyTorch else : print ( \"Initialization method still not implemented. \\ Using Kaiming instead\" ) return layer # The forward step of the network @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"It executes the forward step for the DenseNetwork. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input tensor to be processed by DenseNetwork. (Default value = None) \"\"\" input_tensor_ = input_data # TODO It can be done using the PyTorch Sequential object for layer_id in range ( len ( self . layers )): output_tensor_ = self . layers [ layer_id ]( input_tensor_ ) _output_tensor_ = self . activations [ layer_id ]( output_tensor_ ) input_tensor_ = _output_tensor_ output_tensor = input_tensor_ return output_tensor","title":"DenseNetwork"},{"location":"simulai_regression/#simulai.regression.DenseNetwork.__init__","text":"Dense (fully-connected) neural network written in PyTorch Parameters: Name Type Description Default layers_units list List with the number of neurons for each layer. (Default value = None) None activations Union [ list , str ] List of activations for each layer or a single string None input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None normalization str Kind of normalization used between two layers. (Default value = \"bypass\") 'bypass' name str A name for identifying the model. (Default value = \"\") '' last_bias bool Using bias in the last layer or not. (Default value = True) True last_activation str Activation for the last layer (default is 'identity'). 'identity' Source code in simulai/regression/_pytorch/_dense.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , ** kwargs , ) -> None : \"\"\"Dense (fully-connected) neural network written in PyTorch Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). **kwargs \"\"\" super ( DenseNetwork , self ) . __init__ () assert layers_units , \"Please, set a list of units for each layer\" assert activations , ( \"Please, set a list of activation functions\" \"or a string for all of them.\" ) # These activations support gain evaluation for the initial state self . gain_supported_activations = [ \"sigmoid\" , \"tanh\" , \"relu\" , \"leaky_relu\" ] # Default attributes self . layers_units = layers_units self . input_size = input_size self . output_size = output_size self . normalization = normalization self . name = name self . last_bias = last_bias # For extra and not ever required parameters for k , v in kwargs . items (): setattr ( self , k , v ) # Getting up parameters from host self . _get_from_guest ( activation = activations ) self . weights = list () # The total number of layers includes the output layer self . n_layers = len ( self . layers_units ) + 1 self . default_last_activation = last_activation self . activations , self . activations_str = self . _setup_activations ( activation = activations ) self . initializations = [ self . _determine_initialization ( activation ) for activation in self . activations_str ] self . layers = self . _setup_hidden_layers ( last_bias = last_bias ) array_layers = self . _numpy_layers () n_layers = len ( self . layers ) self . shapes = [ item . shape for item in list ( sum ( array_layers , []))] self . stitch_idx = self . _make_stitch_idx () self . layers_map = [[ ll , ll + 1 ] for ll in range ( 0 , 2 * n_layers , 2 )]","title":"__init__()"},{"location":"simulai_regression/#simulai.regression.DenseNetwork.forward","text":"It executes the forward step for the DenseNetwork. Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] The input tensor to be processed by DenseNetwork. (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\"It executes the forward step for the DenseNetwork. Args: input_data (Union[torch.Tensor, np.ndarray], optional): The input tensor to be processed by DenseNetwork. (Default value = None) \"\"\" input_tensor_ = input_data # TODO It can be done using the PyTorch Sequential object for layer_id in range ( len ( self . layers )): output_tensor_ = self . layers [ layer_id ]( input_tensor_ ) _output_tensor_ = self . activations [ layer_id ]( output_tensor_ ) input_tensor_ = _output_tensor_ output_tensor = input_tensor_ return output_tensor","title":"forward()"},{"location":"simulai_regression/#resdensenetwork","text":"Bases: DenseNetwork Source code in simulai/regression/_pytorch/_dense.py 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 class ResDenseNetwork ( DenseNetwork ): name = \"residualdense\" engine = \"torch\" def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , residual_size : int = 1 , ** kwargs , ) -> None : \"\"\"Residual Dense (fully-connected) neural network written in PyTorch Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). residual_size (int, optional): Size of the residual block. (Default value = 1) **kwargs \"\"\" super () . __init__ ( layers_units = layers_units , activations = activations , input_size = input_size , output_size = output_size , normalization = normalization , name = name , last_bias = last_bias , last_activation = last_activation , ** kwargs , ) # Considering the activations layers self . residual_size = 2 * residual_size self . ratio = 0.5 # Excluding the input and output layers merged_layers = self . _merge ( layer = self . layers , act = self . activations ) assert len ( merged_layers [ 2 : - 2 ]) % self . residual_size == 0 , ( \"The number of layers must be divisible\" \" by the residual block size,\" f \" but received { len ( merged_layers ) } and { residual_size } \" ) self . n_residual_blocks = int ( len ( merged_layers [ 2 : - 2 ]) / self . residual_size ) sub_layers = [ item . tolist () for item in np . split ( np . array ( merged_layers [ 2 : - 2 ]), self . n_residual_blocks ) ] self . input_block = torch . nn . Sequential ( * merged_layers [: 2 ]) self . hidden_blocks = [ torch . nn . Sequential ( * item ) for item in sub_layers ] self . output_block = torch . nn . Sequential ( * merged_layers [ - 2 :]) # Merging the layers into a reasonable sequence def _merge ( self , layer : list = None , act : list = None ) -> list : \"\"\"It merges the dense layers and the activations into a single block. Args: layer (list, optional): List of dense layers. (Default value = None) act (list, optional): List of activation functions. (Default value = None) \"\"\" merged_list = list () for i , j in zip ( layer , act ): merged_list . append ( i ) merged_list . append ( j ) return merged_list def summary ( self ): \"\"\"It prints a summary of the network.\"\"\" super () . summary () print ( \"Residual Blocks: \\n \" ) print ( self . input_block ) print ( self . hidden_blocks ) print ( self . output_block ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): (Default value = None) \"\"\" input_tensor_ = input_data input_tensor_ = self . input_block ( input_tensor_ ) for block in self . hidden_blocks : output_tensor_ = self . ratio * ( input_tensor_ + block ( input_tensor_ )) input_tensor_ = output_tensor_ output_tensor = self . output_block ( input_tensor_ ) return output_tensor","title":"ResDenseNetwork"},{"location":"simulai_regression/#simulai.regression.ResDenseNetwork.__init__","text":"Residual Dense (fully-connected) neural network written in PyTorch Parameters: Name Type Description Default layers_units list List with the number of neurons for each layer. (Default value = None) None activations Union [ list , str ] List of activations for each layer or a single string None input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None normalization str Kind of normalization used between two layers. (Default value = \"bypass\") 'bypass' name str A name for identifying the model. (Default value = \"\") '' last_bias bool Using bias in the last layer or not. (Default value = True) True last_activation str Activation for the last layer (default is 'identity'). 'identity' residual_size int Size of the residual block. (Default value = 1) 1 Source code in simulai/regression/_pytorch/_dense.py 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , residual_size : int = 1 , ** kwargs , ) -> None : \"\"\"Residual Dense (fully-connected) neural network written in PyTorch Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). residual_size (int, optional): Size of the residual block. (Default value = 1) **kwargs \"\"\" super () . __init__ ( layers_units = layers_units , activations = activations , input_size = input_size , output_size = output_size , normalization = normalization , name = name , last_bias = last_bias , last_activation = last_activation , ** kwargs , ) # Considering the activations layers self . residual_size = 2 * residual_size self . ratio = 0.5 # Excluding the input and output layers merged_layers = self . _merge ( layer = self . layers , act = self . activations ) assert len ( merged_layers [ 2 : - 2 ]) % self . residual_size == 0 , ( \"The number of layers must be divisible\" \" by the residual block size,\" f \" but received { len ( merged_layers ) } and { residual_size } \" ) self . n_residual_blocks = int ( len ( merged_layers [ 2 : - 2 ]) / self . residual_size ) sub_layers = [ item . tolist () for item in np . split ( np . array ( merged_layers [ 2 : - 2 ]), self . n_residual_blocks ) ] self . input_block = torch . nn . Sequential ( * merged_layers [: 2 ]) self . hidden_blocks = [ torch . nn . Sequential ( * item ) for item in sub_layers ] self . output_block = torch . nn . Sequential ( * merged_layers [ - 2 :])","title":"__init__()"},{"location":"simulai_regression/#simulai.regression.ResDenseNetwork.forward","text":"Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): (Default value = None) \"\"\" input_tensor_ = input_data input_tensor_ = self . input_block ( input_tensor_ ) for block in self . hidden_blocks : output_tensor_ = self . ratio * ( input_tensor_ + block ( input_tensor_ )) input_tensor_ = output_tensor_ output_tensor = self . output_block ( input_tensor_ ) return output_tensor","title":"forward()"},{"location":"simulai_regression/#simulai.regression.ResDenseNetwork.summary","text":"It prints a summary of the network. Source code in simulai/regression/_pytorch/_dense.py 476 477 478 479 480 481 482 483 484 485 def summary ( self ): \"\"\"It prints a summary of the network.\"\"\" super () . summary () print ( \"Residual Blocks: \\n \" ) print ( self . input_block ) print ( self . hidden_blocks ) print ( self . output_block )","title":"summary()"},{"location":"simulai_regression/#convexdensenetwork","text":"Bases: DenseNetwork Source code in simulai/regression/_pytorch/_dense.py 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 class ConvexDenseNetwork ( DenseNetwork ): name = \"convexdense\" engine = \"torch\" def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , ** kwargs , ) -> None : \"\"\"Dense network with convex combinations in the hidden layers. This architecture is useful when combined to the Improved Version of DeepONets Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). **kwargs \"\"\" self . hidden_size = None assert self . _check_regular_net ( layers_units = layers_units ), ( \"All the hidden layers must be equal in\" \"a Convex Dense Network.\" ) super () . __init__ ( layers_units = layers_units , activations = activations , input_size = input_size , output_size = output_size , normalization = normalization , name = name , last_bias = last_bias , last_activation = last_activation , ** kwargs , ) def _check_regular_net ( self , layers_units : list ) -> bool : \"\"\"It checks if all the layers has the same number of neurons. Args: layers_units (list): \"\"\" mean = int ( sum ( layers_units ) / len ( layers_units )) self . hidden_size = mean if len ([ True for j in layers_units if j == mean ]) == len ( layers_units ): return True else : return False @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None , u : Union [ torch . Tensor , np . ndarray ] = None , v : Union [ torch . Tensor , np . ndarray ] = None , ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): Input data to be processed using ConvexDenseNetwork. (Default value = None) u (Union[torch.Tensor, np.ndarray], optional): Input generated by the first auxiliar encoder (external model). (Default value = None) v (Union[torch.Tensor, np.ndarray], optional): Input generated by the second auxiliar encoder (external model). (Default value = None) \"\"\" input_tensor_ = input_data # The first layer operation has no difference from the Vanilla one first_output = self . activations [ 0 ]( self . layers [ 0 ]( input_tensor_ )) input_tensor_ = first_output layers_hidden = self . layers [ 1 : - 1 ] activations_hidden = self . activations [ 1 : - 1 ] for layer_id in range ( len ( layers_hidden )): output_tensor_ = layers_hidden [ layer_id ]( input_tensor_ ) z = activations_hidden [ layer_id ]( output_tensor_ ) _output_tensor_ = ( 1 - z ) * u + z * v input_tensor_ = _output_tensor_ # The last layer operation too last_output = self . activations [ - 1 ]( self . layers [ - 1 ]( input_tensor_ )) output_tensor = last_output return output_tensor","title":"ConvexDenseNetwork"},{"location":"simulai_regression/#simulai.regression.ConvexDenseNetwork.__init__","text":"Dense network with convex combinations in the hidden layers. This architecture is useful when combined to the Improved Version of DeepONets Parameters: Name Type Description Default layers_units list List with the number of neurons for each layer. (Default value = None) None activations Union [ list , str ] List of activations for each layer or a single string None input_size int Dimension of the input. (Default value = None) None output_size int Dimension of the output. (Default value = None) None normalization str Kind of normalization used between two layers. (Default value = \"bypass\") 'bypass' name str A name for identifying the model. (Default value = \"\") '' last_bias bool Using bias in the last layer or not. (Default value = True) True last_activation str Activation for the last layer (default is 'identity'). 'identity' Source code in simulai/regression/_pytorch/_dense.py 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 def __init__ ( self , layers_units : list = None , activations : Union [ list , str ] = None , input_size : int = None , output_size : int = None , normalization : str = \"bypass\" , name : str = \"\" , last_bias : bool = True , last_activation : str = \"identity\" , ** kwargs , ) -> None : \"\"\"Dense network with convex combinations in the hidden layers. This architecture is useful when combined to the Improved Version of DeepONets Args: layers_units (list, optional): List with the number of neurons for each layer. (Default value = None) activations (Union[list, str], optional): List of activations for each layer or a single string informing the activation used for all of them. (Default value = None) input_size (int, optional): Dimension of the input. (Default value = None) output_size (int, optional): Dimension of the output. (Default value = None) normalization (str, optional): Kind of normalization used between two layers. (Default value = \"bypass\") name (str, optional): A name for identifying the model. (Default value = \"\") last_bias (bool, optional): Using bias in the last layer or not. (Default value = True) last_activation (str, optional): Activation for the last layer (default is 'identity'). **kwargs \"\"\" self . hidden_size = None assert self . _check_regular_net ( layers_units = layers_units ), ( \"All the hidden layers must be equal in\" \"a Convex Dense Network.\" ) super () . __init__ ( layers_units = layers_units , activations = activations , input_size = input_size , output_size = output_size , normalization = normalization , name = name , last_bias = last_bias , last_activation = last_activation , ** kwargs , )","title":"__init__()"},{"location":"simulai_regression/#simulai.regression.ConvexDenseNetwork.forward","text":"Parameters: Name Type Description Default input_data Union [ Tensor , ndarray ] Input data to be processed using ConvexDenseNetwork. (Default value = None) None u Union [ Tensor , ndarray ] Input generated by the first auxiliar encoder (external model). (Default value = None) None v Union [ Tensor , ndarray ] Input generated by the second auxiliar encoder (external model). (Default value = None) None Source code in simulai/regression/_pytorch/_dense.py 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None , u : Union [ torch . Tensor , np . ndarray ] = None , v : Union [ torch . Tensor , np . ndarray ] = None , ) -> torch . Tensor : \"\"\" Args: input_data (Union[torch.Tensor, np.ndarray], optional): Input data to be processed using ConvexDenseNetwork. (Default value = None) u (Union[torch.Tensor, np.ndarray], optional): Input generated by the first auxiliar encoder (external model). (Default value = None) v (Union[torch.Tensor, np.ndarray], optional): Input generated by the second auxiliar encoder (external model). (Default value = None) \"\"\" input_tensor_ = input_data # The first layer operation has no difference from the Vanilla one first_output = self . activations [ 0 ]( self . layers [ 0 ]( input_tensor_ )) input_tensor_ = first_output layers_hidden = self . layers [ 1 : - 1 ] activations_hidden = self . activations [ 1 : - 1 ] for layer_id in range ( len ( layers_hidden )): output_tensor_ = layers_hidden [ layer_id ]( input_tensor_ ) z = activations_hidden [ layer_id ]( output_tensor_ ) _output_tensor_ = ( 1 - z ) * u + z * v input_tensor_ = _output_tensor_ # The last layer operation too last_output = self . activations [ - 1 ]( self . layers [ - 1 ]( input_tensor_ )) output_tensor = last_output return output_tensor","title":"forward()"},{"location":"simulai_residuals/","text":"simulai.residuals # Bases: Module The SymbolicOperatorClass is a class that constructs tensor operators using symbolic expressions written in PyTorch. Returns: Name Type Description object An instance of the SymbolicOperatorClass. Source code in simulai/residuals/_pytorch_residuals.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 class SymbolicOperator ( torch . nn . Module ): \"\"\"The SymbolicOperatorClass is a class that constructs tensor operators using symbolic expressions written in PyTorch. Returns: object: An instance of the SymbolicOperatorClass. \"\"\" def __init__ ( self , expressions : List [ Union [ sympy . Expr , str ]] = None , input_vars : List [ Union [ sympy . Symbol , str ]] = None , output_vars : List [ Union [ sympy . Symbol , str ]] = None , function : callable = None , gradient : callable = None , keys : str = None , inputs_key = None , constants : dict = None , trainable_parameters : dict = None , external_functions : dict = dict (), processing : str = \"serial\" , device : str = \"cpu\" , engine : str = \"torch\" , auxiliary_expressions : list = None , ) -> None : if engine == \"torch\" : super ( SymbolicOperator , self ) . __init__ () else : pass self . engine = importlib . import_module ( engine ) self . constants = constants if trainable_parameters is not None : self . trainable_parameters = trainable_parameters else : self . trainable_parameters = dict () self . external_functions = external_functions self . processing = processing self . periodic_bc_protected_key = \"periodic\" self . protected_funcs = [ \"cos\" , \"sin\" , \"sqrt\" , \"exp\" ] self . protected_operators = [ \"L\" , \"Div\" , \"Identity\" , \"Kronecker\" ] self . protected_funcs_subs = self . _construct_protected_functions () self . protected_operators_subs = self . _construct_implict_operators () # Configuring the device to be used during the fitting process if device == \"gpu\" : if not torch . cuda . is_available (): print ( \"Warning: There is no GPU available, using CPU instead.\" ) device = \"cpu\" else : device = \"cuda\" print ( \"Using GPU.\" ) elif device == \"cpu\" : print ( \"Using CPU.\" ) else : raise Exception ( f \"The device must be cpu or gpu, but received: { device } \" ) self . device = device self . expressions = [ self . _parse_expression ( expr = expr ) for expr in expressions ] if isinstance ( auxiliary_expressions , dict ): self . auxiliary_expressions = { key : self . _parse_expression ( expr = expr ) for key , expr in auxiliary_expressions . items () } else : self . auxiliary_expressions = auxiliary_expressions self . input_vars = [ self . _parse_variable ( var = var ) for var in input_vars ] self . output_vars = [ self . _parse_variable ( var = var ) for var in output_vars ] self . input_names = [ var . name for var in self . input_vars ] self . output_names = [ var . name for var in self . output_vars ] self . keys = keys if inputs_key != None : self . inputs_key = self . _parse_inputs_key ( inputs_key = inputs_key ) else : self . inputs_key = inputs_key self . all_vars = self . input_vars + self . output_vars if self . inputs_key is not None : self . forward = self . _forward_dict else : self . forward = self . _forward_tensor self . function = function self . diff_symbol = D self . output = None self . f_expressions = list () self . g_expressions = dict () self . feed_vars = None for name in self . output_names : setattr ( self , name , None ) # Defining functions for returning each variable of the regression # function for index , name in enumerate ( self . output_names ): setattr ( self , name , lambda data : self . function . forward ( input_data = data )[ ... , index ][ ... , None ], ) # If no external gradient is provided, use the core gradient evaluator if gradient is None : gradient_function = self . gradient else : gradient_function = gradient subs = { self . diff_symbol . name : gradient_function } subs . update ( self . external_functions ) subs . update ( self . protected_funcs_subs ) for expr in self . expressions : if not callable ( expr ): f_expr = sympy . lambdify ( self . all_vars , expr , subs ) else : f_expr = expr self . f_expressions . append ( f_expr ) if self . auxiliary_expressions is not None : for key , expr in self . auxiliary_expressions . items (): if not callable ( expr ): g_expr = sympy . lambdify ( self . all_vars , expr , subs ) else : g_expr = expr self . g_expressions [ key ] = g_expr # Method for executing the expressions evaluation if self . processing == \"serial\" : self . process_expression = self . _process_expression_serial else : raise Exception ( f \"Processing case { self . processing } not supported.\" ) def _construct_protected_functions ( self ): \"\"\"This function creates a dictionary of protected functions from the engine object attribute. Returns: dict: A dictionary of function names and their corresponding function objects. \"\"\" protected_funcs = { func : getattr ( self . engine , func ) for func in self . protected_funcs } return protected_funcs def _construct_implict_operators ( self ): \"\"\"This function creates a dictionary of protected operators from the operators engine module. Returns: dict: A dictionary of operator names and their corresponding function objects. \"\"\" operators_engine = importlib . import_module ( \"simulai.tokens\" ) protected_operators = { func : getattr ( operators_engine , func ) for func in self . protected_operators } return protected_operators def _parse_key_interval ( self , intv : str ) -> List : begin , end = intv . split ( \",\" ) end = int ( end [: - 1 ]) begin = int ( begin ) end = int ( end + 1 ) return np . arange ( begin , end ) . astype ( int ) . tolist () def _parse_inputs_key ( self , inputs_key : str = None ) -> dict : # Sentences separator: '|' sep = \"|\" # Index identifier: ':' inx = \":\" # Interval identifier intv = \"[\" # Removing possible spaces in the inputs_key string inputs_key = inputs_key . replace ( \" \" , \"\" ) try : split_components = inputs_key . split ( sep ) except ValueError : split_components = inputs_key keys_dict = dict () for s in split_components : try : if len ( s . split ( inx )) > 1 : key , index = s . split ( inx ) if not key in keys_dict : keys_dict [ key ] = list () keys_dict [ key ] . append ( int ( index )) else : keys_dict [ key ] . append ( int ( index )) elif len ( s . split ( intv )) > 1 : key , interval_str = s . split ( intv ) interval = self . _parse_key_interval ( interval_str ) keys_dict [ key ] = interval else : raise ValueError except ValueError : keys_dict [ s ] = - 1 return keys_dict def _collect_data_from_inputs_list ( self , inputs_list : dict = None ) -> list : data = list () for k , v in self . inputs_key . items (): if v == - 1 : if inputs_list [ k ] . shape [ 1 ] == 1 : data_ = [ inputs_list [ k ]] else : data_ = list ( torch . split ( inputs_list [ k ], 1 , dim = 1 )) else : data_ = [ inputs_list [ k ][:, i : i + 1 ] for i in v ] data += data_ return data def _parse_expression ( self , expr = Union [ sympy . Expr , str ]) -> sympy . Expr : \"\"\"Parses the input expression and returns a SymPy expression. Args: expr (Union[sympy.Expr, str], optional, optional): The expression to parse, by default None. It can either be a SymPy expression or a string. Returns: sympy.Expr: The parsed SymPy expression. Raises: Exception: If the `constants` attribute is not defined, and the input expression is a string. \"\"\" if isinstance ( expr , str ): try : expr_ = sympify ( expr , locals = self . protected_operators_subs , evaluate = False ) if self . constants is not None : expr_ = expr_ . subs ( self . constants ) if self . trainable_parameters is not None : expr_ = expr_ . subs ( self . trainable_parameters ) except ValueError : if self . constants is not None : _expr = expr for key , value in self . constants . items (): _expr = _expr . replace ( key , str ( value )) expr_ = parse_expr ( _expr , evaluate = 0 ) else : raise Exception ( \"It is necessary to define a constants dict.\" ) elif callable ( expr ): expr_ = expr else : if self . constants is not None : expr_ = expr . subs ( self . constants ) else : expr_ = expr return expr_ def _parse_variable ( self , var = Union [ sympy . Symbol , str ]) -> sympy . Symbol : \"\"\"Parse the input variable and return a SymPy Symbol. Args: var (Union[sympy.Symbol, str], optional, optional): The input variable, either a SymPy Symbol or a string. (Default value = Union[sympy.Symbol, str]) Returns: sympy.Symbol: A SymPy Symbol representing the input variable. \"\"\" if isinstance ( var , str ): return sympy . Symbol ( var ) else : return var def _forward_tensor ( self , input_data : torch . Tensor = None ) -> torch . Tensor : \"\"\"Forward the input tensor through the function. Args: input_data (torch.Tensor, optional): The input tensor. (Default value = None) Returns: torch.Tensor: The output tensor after forward pass. \"\"\" return self . function . forward ( input_data = input_data ) def _forward_dict ( self , input_data : dict = None ) -> torch . Tensor : \"\"\"Forward the input dictionary through the function. Args: input_data (dict, optional): The input dictionary. (Default value = None) Returns: torch.Tensor: The output tensor after forward pass. \"\"\" return self . function . forward ( ** input_data ) def _process_expression_serial ( self , feed_vars : dict = None ) -> List [ torch . Tensor ]: \"\"\"Process the expression list serially using the given feed variables. Args: feed_vars (dict, optional): The feed variables. (Default value = None) Returns: List[torch.Tensor]: A list of tensors after evaluating the expressions serially. \"\"\" return [ f ( ** feed_vars ) . to ( self . device ) for f in self . f_expressions ] def _process_expression_individual ( self , index : int = None , feed_vars : dict = None ) -> torch . Tensor : \"\"\"Evaluates a single expression specified by index from the f_expressions list with given feed variables. Args: index (int, optional): Index of the expression to be evaluated, by default None feed_vars (dict, optional): Dictionary of feed variables, by default None Returns: torch.Tensor: Result of evaluating the specified expression with given feed variables \"\"\" return self . f_expressions [ index ]( ** feed_vars ) . to ( self . device ) def __call__ ( self , inputs_data : Union [ np . ndarray , dict ] = None ) -> List [ torch . Tensor ]: \"\"\"Evaluate the symbolic expression. This function takes either a numpy array or a dictionary of numpy arrays as input. Args: inputs_data (Union[np.ndarray, dict], optional): Union (Default value = None) Returns: List[torch.Tensor]: List[torch.Tensor]: A list of tensors containing the evaluated expressions. Raises: Raises: does: not match with the inputs_key attribute \"\"\" constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) inputs_list = constructor ( input_data = inputs_data , device = self . device ) output = self . forward ( input_data = inputs_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs = { key : value for key , value in zip ( self . output_names , outputs_list )} if type ( inputs_list ) is list : inputs = { key : value for key , value in zip ( self . input_names , inputs_list )} elif type ( inputs_list ) is dict : assert ( self . inputs_key is not None ), \"If inputs_list is dict, \\ it is necessary to provide \\ a key.\" inputs_list = self . _collect_data_from_inputs_list ( inputs_list = inputs_list ) inputs = { key : value for key , value in zip ( self . input_names , inputs_list )} else : raise Exception ( f \"Format { type ( inputs_list ) } not supported \\ for inputs_list\" ) feed_vars = { ** outputs , ** inputs } # It returns a list of tensors containing the expressions # evaluated over a domain return self . process_expression ( feed_vars = feed_vars ) def eval_expression ( self , key , inputs_list ): \"\"\"This function evaluates an expression stored in the class attribute 'g_expressions' using the inputs in 'inputs_list'. If the expression has a periodic boundary condition, the function evaluates the expression at the lower and upper boundaries and returns the difference. If the inputs are provided as a list, they are split into individual tensors and stored in a dictionary with the keys as the input names. If the inputs are provided as an np.ndarray, they are converted to tensors and split along the second axis. If the inputs are provided as a dict, they are extracted using the 'inputs_key' attribute. The inputs, along with the outputs obtained from running the function, are then passed as arguments to the expression using the 'g(**feed_vars)' syntax. Args: key (str): the key used to retrieve the expression from the 'g_expressions' attribute inputs_list (list): either a list of arrays, an np.ndarray, or a dict containing the inputs to the function Returns: the result of evaluating the expression using the inputs.: \"\"\" try : g = self . g_expressions . get ( key ) except : raise Exception ( f \"The expression { key } does not exist.\" ) # Periodic boundary conditions if self . periodic_bc_protected_key in key : assert isinstance ( inputs_list , list ), ( \"When a periodic boundary expression is used,\" \" the input must be a list of arrays.\" ) # Lower bound constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) tensors_list = constructor ( input_data = inputs_list [ 0 ], device = self . device ) inputs_L = { key : value for key , value in zip ( self . input_names , tensors_list ) } output = self . function . forward ( input_data = tensors_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs_L = { key : value for key , value in zip ( self . output_names , outputs_list ) } feed_vars_L = { ** inputs_L , ** outputs_L } # Upper bound constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) tensors_list = constructor ( input_data = inputs_list [ - 1 ], device = self . device ) inputs_U = { key : value for key , value in zip ( self . input_names , tensors_list ) } output = self . function . forward ( input_data = tensors_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs_U = { key : value for key , value in zip ( self . output_names , outputs_list ) } feed_vars_U = { ** inputs_U , ** outputs_U } # Evaluating the boundaries equality return g ( ** feed_vars_L ) - g ( ** feed_vars_U ) # The non-periodic cases else : constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) inputs_list = constructor ( input_data = inputs_list , device = self . device ) output = self . function . forward ( input_data = inputs_list ) outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs = { key : value for key , value in zip ( self . output_names , outputs_list ) } if type ( inputs_list ) is list : inputs = { key : value for key , value in zip ( self . input_names , inputs_list ) } elif type ( inputs_list ) is np . ndarray : arrays_list = np . split ( inputs_list , inputs_list . shape [ 1 ], axis = 1 ) tensors_list = [ torch . from_numpy ( arr ) for arr in arrays_list ] for t in tensors_list : t . requires_grad = True inputs = { key : value for key , value in zip ( self . input_names , tensors_list ) } elif type ( inputs_list ) is dict : assert ( self . inputs_key is not None ), \"If inputs_list is dict, \\ it is necessary to provide \\ a key.\" inputs = { key : value for key , value in zip ( self . input_names , inputs_list [ self . inputs_key ] ) } else : raise Exception ( f \"Format { type ( inputs_list ) } not supported \\ for inputs_list\" ) feed_vars = { ** inputs , ** outputs } return g ( ** feed_vars ) @staticmethod def gradient ( feature , param ): \"\"\"Calculates the gradient of the given feature with respect to the given parameter. Args: feature (torch.Tensor): Tensor with the input feature. param (torch.Tensor): Tensor with the parameter to calculate the gradient with respect to. Returns: torch.Tensor: Tensor with the gradient of the feature with respect to the given parameter. Example:: >>> feature = torch.tensor([1, 2, 3], dtype=torch.float32) >>> param = torch.tensor([2, 3, 4], dtype=torch.float32) >>> gradient(feature, param) tensor([1., 1., 1.], grad_fn=<AddBackward0>) \"\"\" grad_ = grad ( feature , param , grad_outputs = torch . ones_like ( feature ), create_graph = True , allow_unused = True , retain_graph = True , ) return grad_ [ 0 ] def jac ( self , inputs ): \"\"\"Calculates the Jacobian of the forward function of the model with respect to its inputs. Args: inputs (torch.Tensor): Tensor with the input data to the forward function. Returns: torch.Tensor: Tensor with the Jacobian of the forward function with respect to its inputs. Example:: >>> inputs = torch.tensor([[1, 2, 3], [2, 3, 4]], dtype=torch.float32) >>> jac(inputs) tensor([[1., 1., 1.], [1., 1., 1.]], grad_fn=<MulBackward0>) \"\"\" def inner ( inputs ): return self . forward ( input_data = inputs ) return jacobian ( inner , inputs ) __call__ ( inputs_data = None ) # Evaluate the symbolic expression. This function takes either a numpy array or a dictionary of numpy arrays as input. Parameters: Name Type Description Default inputs_data Union [ ndarray , dict ] Union (Default value = None) None Returns: Name Type Description List [ Tensor ] List[torch.Tensor]: List[torch.Tensor]: A list of tensors containing the evaluated expressions. Raises List [ Tensor ] Raises: Type Description does not match with the inputs_key attribute Source code in simulai/residuals/_pytorch_residuals.py 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 def __call__ ( self , inputs_data : Union [ np . ndarray , dict ] = None ) -> List [ torch . Tensor ]: \"\"\"Evaluate the symbolic expression. This function takes either a numpy array or a dictionary of numpy arrays as input. Args: inputs_data (Union[np.ndarray, dict], optional): Union (Default value = None) Returns: List[torch.Tensor]: List[torch.Tensor]: A list of tensors containing the evaluated expressions. Raises: Raises: does: not match with the inputs_key attribute \"\"\" constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) inputs_list = constructor ( input_data = inputs_data , device = self . device ) output = self . forward ( input_data = inputs_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs = { key : value for key , value in zip ( self . output_names , outputs_list )} if type ( inputs_list ) is list : inputs = { key : value for key , value in zip ( self . input_names , inputs_list )} elif type ( inputs_list ) is dict : assert ( self . inputs_key is not None ), \"If inputs_list is dict, \\ it is necessary to provide \\ a key.\" inputs_list = self . _collect_data_from_inputs_list ( inputs_list = inputs_list ) inputs = { key : value for key , value in zip ( self . input_names , inputs_list )} else : raise Exception ( f \"Format { type ( inputs_list ) } not supported \\ for inputs_list\" ) feed_vars = { ** outputs , ** inputs } # It returns a list of tensors containing the expressions # evaluated over a domain return self . process_expression ( feed_vars = feed_vars ) eval_expression ( key , inputs_list ) # This function evaluates an expression stored in the class attribute 'g_expressions' using the inputs in 'inputs_list'. If the expression has a periodic boundary condition, the function evaluates the expression at the lower and upper boundaries and returns the difference. If the inputs are provided as a list, they are split into individual tensors and stored in a dictionary with the keys as the input names. If the inputs are provided as an np.ndarray, they are converted to tensors and split along the second axis. If the inputs are provided as a dict, they are extracted using the 'inputs_key' attribute. The inputs, along with the outputs obtained from running the function, are then passed as arguments to the expression using the 'g(**feed_vars)' syntax. Parameters: Name Type Description Default key str the key used to retrieve the expression from the 'g_expressions' attribute required inputs_list list either a list of arrays, an np.ndarray, or a dict containing the inputs to the function required Returns: Type Description the result of evaluating the expression using the inputs.: Source code in simulai/residuals/_pytorch_residuals.pydef eval_expression ( self , key , inputs_list ): \"\"\"This function evaluates an expression stored in the class attribute 'g_expressions' using the inputs in 'inputs_list'. If the expression has a periodic boundary condition, the function evaluates the expression at the lower and upper boundaries and returns the difference. If the inputs are provided as a list, they are split into individual tensors and stored in a dictionary with the keys as the input names. If the inputs are provided as an np.ndarray, they are converted to tensors and split along the second axis. If the inputs are provided as a dict, they are extracted using the 'inputs_key' attribute. The inputs, along with the outputs obtained from running the function, are then passed as arguments to the expression using the 'g(**feed_vars)' syntax. Args: key (str): the key used to retrieve the expression from the 'g_expressions' attribute inputs_list (list): either a list of arrays, an np.ndarray, or a dict containing the inputs to the function Returns: the result of evaluating the expression using the inputs.: \"\"\" try : g = self . g_expressions . get ( key ) except : raise Exception ( f \"The expression { key } does not exist.\" ) # Periodic boundary conditions if self . periodic_bc_protected_key in key : assert isinstance ( inputs_list , list ), ( \"When a periodic boundary expression is used,\" \" the input must be a list of arrays.\" ) # Lower bound constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) tensors_list = constructor ( input_data = inputs_list [ 0 ], device = self . device ) inputs_L = { key : value for key , value in zip ( self . input_names , tensors_list ) } output = self . function . forward ( input_data = tensors_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs_L = { key : value for key , value in zip ( self . output_names , outputs_list ) } feed_vars_L = { ** inputs_L , ** outputs_L } # Upper bound constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) tensors_list = constructor ( input_data = inputs_list [ - 1 ], device = self . device ) inputs_U = { key : value for key , value in zip ( self . input_names , tensors_list ) } output = self . function . forward ( input_data = tensors_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs_U = { key : value for key , value in zip ( self . output_names , outputs_list ) } feed_vars_U = { ** inputs_U , ** outputs_U } # Evaluating the boundaries equality return g ( ** feed_vars_L ) - g ( ** feed_vars_U ) # The non-periodic cases else : constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) inputs_list = constructor ( input_data = inputs_list , device = self . device ) output = self . function . forward ( input_data = inputs_list ) outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs = { key : value for key , value in zip ( self . output_names , outputs_list ) } if type ( inputs_list ) is list : inputs = { key : value for key , value in zip ( self . input_names , inputs_list ) } elif type ( inputs_list ) is np . ndarray : arrays_list = np . split ( inputs_list , inputs_list . shape [ 1 ], axis = 1 ) tensors_list = [ torch . from_numpy ( arr ) for arr in arrays_list ] for t in tensors_list : t . requires_grad = True inputs = { key : value for key , value in zip ( self . input_names , tensors_list ) } elif type ( inputs_list ) is dict : assert ( self . inputs_key is not None ), \"If inputs_list is dict, \\ it is necessary to provide \\ a key.\" inputs = { key : value for key , value in zip ( self . input_names , inputs_list [ self . inputs_key ] ) } else : raise Exception ( f \"Format { type ( inputs_list ) } not supported \\ for inputs_list\" ) feed_vars = { ** inputs , ** outputs } return g ( ** feed_vars ) gradient ( feature , param ) staticmethod # Calculates the gradient of the given feature with respect to the given parameter. Parameters: Name Type Description Default feature Tensor Tensor with the input feature. required param Tensor Tensor with the parameter to calculate the gradient with respect to. required Returns: Type Description torch.Tensor: Tensor with the gradient of the feature with respect to the given parameter. Example:: >>> feature = torch.tensor([1, 2, 3], dtype=torch.float32) >>> param = torch.tensor([2, 3, 4], dtype=torch.float32) >>> gradient(feature, param) tensor([1., 1., 1.], grad_fn=<AddBackward0>) Source code in simulai/residuals/_pytorch_residuals.py 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 @staticmethod def gradient ( feature , param ): \"\"\"Calculates the gradient of the given feature with respect to the given parameter. Args: feature (torch.Tensor): Tensor with the input feature. param (torch.Tensor): Tensor with the parameter to calculate the gradient with respect to. Returns: torch.Tensor: Tensor with the gradient of the feature with respect to the given parameter. Example:: >>> feature = torch.tensor([1, 2, 3], dtype=torch.float32) >>> param = torch.tensor([2, 3, 4], dtype=torch.float32) >>> gradient(feature, param) tensor([1., 1., 1.], grad_fn=<AddBackward0>) \"\"\" grad_ = grad ( feature , param , grad_outputs = torch . ones_like ( feature ), create_graph = True , allow_unused = True , retain_graph = True , ) return grad_ [ 0 ] jac ( inputs ) # Calculates the Jacobian of the forward function of the model with respect to its inputs. Parameters: Name Type Description Default inputs Tensor Tensor with the input data to the forward function. required Returns: Type Description torch.Tensor: Tensor with the Jacobian of the forward function with respect to its inputs. Example:: >>> inputs = torch.tensor([[1, 2, 3], [2, 3, 4]], dtype=torch.float32) >>> jac(inputs) tensor([[1., 1., 1.], [1., 1., 1.]], grad_fn=<MulBackward0>) Source code in simulai/residuals/_pytorch_residuals.py 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 def jac ( self , inputs ): \"\"\"Calculates the Jacobian of the forward function of the model with respect to its inputs. Args: inputs (torch.Tensor): Tensor with the input data to the forward function. Returns: torch.Tensor: Tensor with the Jacobian of the forward function with respect to its inputs. Example:: >>> inputs = torch.tensor([[1, 2, 3], [2, 3, 4]], dtype=torch.float32) >>> jac(inputs) tensor([[1., 1., 1.], [1., 1., 1.]], grad_fn=<MulBackward0>) \"\"\" def inner ( inputs ): return self . forward ( input_data = inputs ) return jacobian ( inner , inputs )","title":"simulai.residuals"},{"location":"simulai_residuals/#simulairesiduals","text":"Bases: Module The SymbolicOperatorClass is a class that constructs tensor operators using symbolic expressions written in PyTorch. Returns: Name Type Description object An instance of the SymbolicOperatorClass. Source code in simulai/residuals/_pytorch_residuals.pyclass SymbolicOperator ( torch . nn . Module ): \"\"\"The SymbolicOperatorClass is a class that constructs tensor operators using symbolic expressions written in PyTorch. Returns: object: An instance of the SymbolicOperatorClass. \"\"\" def __init__ ( self , expressions : List [ Union [ sympy . Expr , str ]] = None , input_vars : List [ Union [ sympy . Symbol , str ]] = None , output_vars : List [ Union [ sympy . Symbol , str ]] = None , function : callable = None , gradient : callable = None , keys : str = None , inputs_key = None , constants : dict = None , trainable_parameters : dict = None , external_functions : dict = dict (), processing : str = \"serial\" , device : str = \"cpu\" , engine : str = \"torch\" , auxiliary_expressions : list = None , ) -> None : if engine == \"torch\" : super ( SymbolicOperator , self ) . __init__ () else : pass self . engine = importlib . import_module ( engine ) self . constants = constants if trainable_parameters is not None : self . trainable_parameters = trainable_parameters else : self . trainable_parameters = dict () self . external_functions = external_functions self . processing = processing self . periodic_bc_protected_key = \"periodic\" self . protected_funcs = [ \"cos\" , \"sin\" , \"sqrt\" , \"exp\" ] self . protected_operators = [ \"L\" , \"Div\" , \"Identity\" , \"Kronecker\" ] self . protected_funcs_subs = self . _construct_protected_functions () self . protected_operators_subs = self . _construct_implict_operators () # Configuring the device to be used during the fitting process if device == \"gpu\" : if not torch . cuda . is_available (): print ( \"Warning: There is no GPU available, using CPU instead.\" ) device = \"cpu\" else : device = \"cuda\" print ( \"Using GPU.\" ) elif device == \"cpu\" : print ( \"Using CPU.\" ) else : raise Exception ( f \"The device must be cpu or gpu, but received: { device } \" ) self . device = device self . expressions = [ self . _parse_expression ( expr = expr ) for expr in expressions ] if isinstance ( auxiliary_expressions , dict ): self . auxiliary_expressions = { key : self . _parse_expression ( expr = expr ) for key , expr in auxiliary_expressions . items () } else : self . auxiliary_expressions = auxiliary_expressions self . input_vars = [ self . _parse_variable ( var = var ) for var in input_vars ] self . output_vars = [ self . _parse_variable ( var = var ) for var in output_vars ] self . input_names = [ var . name for var in self . input_vars ] self . output_names = [ var . name for var in self . output_vars ] self . keys = keys if inputs_key != None : self . inputs_key = self . _parse_inputs_key ( inputs_key = inputs_key ) else : self . inputs_key = inputs_key self . all_vars = self . input_vars + self . output_vars if self . inputs_key is not None : self . forward = self . _forward_dict else : self . forward = self . _forward_tensor self . function = function self . diff_symbol = D self . output = None self . f_expressions = list () self . g_expressions = dict () self . feed_vars = None for name in self . output_names : setattr ( self , name , None ) # Defining functions for returning each variable of the regression # function for index , name in enumerate ( self . output_names ): setattr ( self , name , lambda data : self . function . forward ( input_data = data )[ ... , index ][ ... , None ], ) # If no external gradient is provided, use the core gradient evaluator if gradient is None : gradient_function = self . gradient else : gradient_function = gradient subs = { self . diff_symbol . name : gradient_function } subs . update ( self . external_functions ) subs . update ( self . protected_funcs_subs ) for expr in self . expressions : if not callable ( expr ): f_expr = sympy . lambdify ( self . all_vars , expr , subs ) else : f_expr = expr self . f_expressions . append ( f_expr ) if self . auxiliary_expressions is not None : for key , expr in self . auxiliary_expressions . items (): if not callable ( expr ): g_expr = sympy . lambdify ( self . all_vars , expr , subs ) else : g_expr = expr self . g_expressions [ key ] = g_expr # Method for executing the expressions evaluation if self . processing == \"serial\" : self . process_expression = self . _process_expression_serial else : raise Exception ( f \"Processing case { self . processing } not supported.\" ) def _construct_protected_functions ( self ): \"\"\"This function creates a dictionary of protected functions from the engine object attribute. Returns: dict: A dictionary of function names and their corresponding function objects. \"\"\" protected_funcs = { func : getattr ( self . engine , func ) for func in self . protected_funcs } return protected_funcs def _construct_implict_operators ( self ): \"\"\"This function creates a dictionary of protected operators from the operators engine module. Returns: dict: A dictionary of operator names and their corresponding function objects. \"\"\" operators_engine = importlib . import_module ( \"simulai.tokens\" ) protected_operators = { func : getattr ( operators_engine , func ) for func in self . protected_operators } return protected_operators def _parse_key_interval ( self , intv : str ) -> List : begin , end = intv . split ( \",\" ) end = int ( end [: - 1 ]) begin = int ( begin ) end = int ( end + 1 ) return np . arange ( begin , end ) . astype ( int ) . tolist () def _parse_inputs_key ( self , inputs_key : str = None ) -> dict : # Sentences separator: '|' sep = \"|\" # Index identifier: ':' inx = \":\" # Interval identifier intv = \"[\" # Removing possible spaces in the inputs_key string inputs_key = inputs_key . replace ( \" \" , \"\" ) try : split_components = inputs_key . split ( sep ) except ValueError : split_components = inputs_key keys_dict = dict () for s in split_components : try : if len ( s . split ( inx )) > 1 : key , index = s . split ( inx ) if not key in keys_dict : keys_dict [ key ] = list () keys_dict [ key ] . append ( int ( index )) else : keys_dict [ key ] . append ( int ( index )) elif len ( s . split ( intv )) > 1 : key , interval_str = s . split ( intv ) interval = self . _parse_key_interval ( interval_str ) keys_dict [ key ] = interval else : raise ValueError except ValueError : keys_dict [ s ] = - 1 return keys_dict def _collect_data_from_inputs_list ( self , inputs_list : dict = None ) -> list : data = list () for k , v in self . inputs_key . items (): if v == - 1 : if inputs_list [ k ] . shape [ 1 ] == 1 : data_ = [ inputs_list [ k ]] else : data_ = list ( torch . split ( inputs_list [ k ], 1 , dim = 1 )) else : data_ = [ inputs_list [ k ][:, i : i + 1 ] for i in v ] data += data_ return data def _parse_expression ( self , expr = Union [ sympy . Expr , str ]) -> sympy . Expr : \"\"\"Parses the input expression and returns a SymPy expression. Args: expr (Union[sympy.Expr, str], optional, optional): The expression to parse, by default None. It can either be a SymPy expression or a string. Returns: sympy.Expr: The parsed SymPy expression. Raises: Exception: If the `constants` attribute is not defined, and the input expression is a string. \"\"\" if isinstance ( expr , str ): try : expr_ = sympify ( expr , locals = self . protected_operators_subs , evaluate = False ) if self . constants is not None : expr_ = expr_ . subs ( self . constants ) if self . trainable_parameters is not None : expr_ = expr_ . subs ( self . trainable_parameters ) except ValueError : if self . constants is not None : _expr = expr for key , value in self . constants . items (): _expr = _expr . replace ( key , str ( value )) expr_ = parse_expr ( _expr , evaluate = 0 ) else : raise Exception ( \"It is necessary to define a constants dict.\" ) elif callable ( expr ): expr_ = expr else : if self . constants is not None : expr_ = expr . subs ( self . constants ) else : expr_ = expr return expr_ def _parse_variable ( self , var = Union [ sympy . Symbol , str ]) -> sympy . Symbol : \"\"\"Parse the input variable and return a SymPy Symbol. Args: var (Union[sympy.Symbol, str], optional, optional): The input variable, either a SymPy Symbol or a string. (Default value = Union[sympy.Symbol, str]) Returns: sympy.Symbol: A SymPy Symbol representing the input variable. \"\"\" if isinstance ( var , str ): return sympy . Symbol ( var ) else : return var def _forward_tensor ( self , input_data : torch . Tensor = None ) -> torch . Tensor : \"\"\"Forward the input tensor through the function. Args: input_data (torch.Tensor, optional): The input tensor. (Default value = None) Returns: torch.Tensor: The output tensor after forward pass. \"\"\" return self . function . forward ( input_data = input_data ) def _forward_dict ( self , input_data : dict = None ) -> torch . Tensor : \"\"\"Forward the input dictionary through the function. Args: input_data (dict, optional): The input dictionary. (Default value = None) Returns: torch.Tensor: The output tensor after forward pass. \"\"\" return self . function . forward ( ** input_data ) def _process_expression_serial ( self , feed_vars : dict = None ) -> List [ torch . Tensor ]: \"\"\"Process the expression list serially using the given feed variables. Args: feed_vars (dict, optional): The feed variables. (Default value = None) Returns: List[torch.Tensor]: A list of tensors after evaluating the expressions serially. \"\"\" return [ f ( ** feed_vars ) . to ( self . device ) for f in self . f_expressions ] def _process_expression_individual ( self , index : int = None , feed_vars : dict = None ) -> torch . Tensor : \"\"\"Evaluates a single expression specified by index from the f_expressions list with given feed variables. Args: index (int, optional): Index of the expression to be evaluated, by default None feed_vars (dict, optional): Dictionary of feed variables, by default None Returns: torch.Tensor: Result of evaluating the specified expression with given feed variables \"\"\" return self . f_expressions [ index ]( ** feed_vars ) . to ( self . device ) def __call__ ( self , inputs_data : Union [ np . ndarray , dict ] = None ) -> List [ torch . Tensor ]: \"\"\"Evaluate the symbolic expression. This function takes either a numpy array or a dictionary of numpy arrays as input. Args: inputs_data (Union[np.ndarray, dict], optional): Union (Default value = None) Returns: List[torch.Tensor]: List[torch.Tensor]: A list of tensors containing the evaluated expressions. Raises: Raises: does: not match with the inputs_key attribute \"\"\" constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) inputs_list = constructor ( input_data = inputs_data , device = self . device ) output = self . forward ( input_data = inputs_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs = { key : value for key , value in zip ( self . output_names , outputs_list )} if type ( inputs_list ) is list : inputs = { key : value for key , value in zip ( self . input_names , inputs_list )} elif type ( inputs_list ) is dict : assert ( self . inputs_key is not None ), \"If inputs_list is dict, \\ it is necessary to provide \\ a key.\" inputs_list = self . _collect_data_from_inputs_list ( inputs_list = inputs_list ) inputs = { key : value for key , value in zip ( self . input_names , inputs_list )} else : raise Exception ( f \"Format { type ( inputs_list ) } not supported \\ for inputs_list\" ) feed_vars = { ** outputs , ** inputs } # It returns a list of tensors containing the expressions # evaluated over a domain return self . process_expression ( feed_vars = feed_vars ) def eval_expression ( self , key , inputs_list ): \"\"\"This function evaluates an expression stored in the class attribute 'g_expressions' using the inputs in 'inputs_list'. If the expression has a periodic boundary condition, the function evaluates the expression at the lower and upper boundaries and returns the difference. If the inputs are provided as a list, they are split into individual tensors and stored in a dictionary with the keys as the input names. If the inputs are provided as an np.ndarray, they are converted to tensors and split along the second axis. If the inputs are provided as a dict, they are extracted using the 'inputs_key' attribute. The inputs, along with the outputs obtained from running the function, are then passed as arguments to the expression using the 'g(**feed_vars)' syntax. Args: key (str): the key used to retrieve the expression from the 'g_expressions' attribute inputs_list (list): either a list of arrays, an np.ndarray, or a dict containing the inputs to the function Returns: the result of evaluating the expression using the inputs.: \"\"\" try : g = self . g_expressions . get ( key ) except : raise Exception ( f \"The expression { key } does not exist.\" ) # Periodic boundary conditions if self . periodic_bc_protected_key in key : assert isinstance ( inputs_list , list ), ( \"When a periodic boundary expression is used,\" \" the input must be a list of arrays.\" ) # Lower bound constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) tensors_list = constructor ( input_data = inputs_list [ 0 ], device = self . device ) inputs_L = { key : value for key , value in zip ( self . input_names , tensors_list ) } output = self . function . forward ( input_data = tensors_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs_L = { key : value for key , value in zip ( self . output_names , outputs_list ) } feed_vars_L = { ** inputs_L , ** outputs_L } # Upper bound constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) tensors_list = constructor ( input_data = inputs_list [ - 1 ], device = self . device ) inputs_U = { key : value for key , value in zip ( self . input_names , tensors_list ) } output = self . function . forward ( input_data = tensors_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs_U = { key : value for key , value in zip ( self . output_names , outputs_list ) } feed_vars_U = { ** inputs_U , ** outputs_U } # Evaluating the boundaries equality return g ( ** feed_vars_L ) - g ( ** feed_vars_U ) # The non-periodic cases else : constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) inputs_list = constructor ( input_data = inputs_list , device = self . device ) output = self . function . forward ( input_data = inputs_list ) outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs = { key : value for key , value in zip ( self . output_names , outputs_list ) } if type ( inputs_list ) is list : inputs = { key : value for key , value in zip ( self . input_names , inputs_list ) } elif type ( inputs_list ) is np . ndarray : arrays_list = np . split ( inputs_list , inputs_list . shape [ 1 ], axis = 1 ) tensors_list = [ torch . from_numpy ( arr ) for arr in arrays_list ] for t in tensors_list : t . requires_grad = True inputs = { key : value for key , value in zip ( self . input_names , tensors_list ) } elif type ( inputs_list ) is dict : assert ( self . inputs_key is not None ), \"If inputs_list is dict, \\ it is necessary to provide \\ a key.\" inputs = { key : value for key , value in zip ( self . input_names , inputs_list [ self . inputs_key ] ) } else : raise Exception ( f \"Format { type ( inputs_list ) } not supported \\ for inputs_list\" ) feed_vars = { ** inputs , ** outputs } return g ( ** feed_vars ) @staticmethod def gradient ( feature , param ): \"\"\"Calculates the gradient of the given feature with respect to the given parameter. Args: feature (torch.Tensor): Tensor with the input feature. param (torch.Tensor): Tensor with the parameter to calculate the gradient with respect to. Returns: torch.Tensor: Tensor with the gradient of the feature with respect to the given parameter. Example:: >>> feature = torch.tensor([1, 2, 3], dtype=torch.float32) >>> param = torch.tensor([2, 3, 4], dtype=torch.float32) >>> gradient(feature, param) tensor([1., 1., 1.], grad_fn=<AddBackward0>) \"\"\" grad_ = grad ( feature , param , grad_outputs = torch . ones_like ( feature ), create_graph = True , allow_unused = True , retain_graph = True , ) return grad_ [ 0 ] def jac ( self , inputs ): \"\"\"Calculates the Jacobian of the forward function of the model with respect to its inputs. Args: inputs (torch.Tensor): Tensor with the input data to the forward function. Returns: torch.Tensor: Tensor with the Jacobian of the forward function with respect to its inputs. Example:: >>> inputs = torch.tensor([[1, 2, 3], [2, 3, 4]], dtype=torch.float32) >>> jac(inputs) tensor([[1., 1., 1.], [1., 1., 1.]], grad_fn=<MulBackward0>) \"\"\" def inner ( inputs ): return self . forward ( input_data = inputs ) return jacobian ( inner , inputs )","title":"simulai.residuals"},{"location":"simulai_residuals/#simulai.residuals.SymbolicOperator.__call__","text":"Evaluate the symbolic expression. This function takes either a numpy array or a dictionary of numpy arrays as input. Parameters: Name Type Description Default inputs_data Union [ ndarray , dict ] Union (Default value = None) None Returns: Name Type Description List [ Tensor ] List[torch.Tensor]: List[torch.Tensor]: A list of tensors containing the evaluated expressions. Raises List [ Tensor ] Raises: Type Description does not match with the inputs_key attribute Source code in simulai/residuals/_pytorch_residuals.py 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 def __call__ ( self , inputs_data : Union [ np . ndarray , dict ] = None ) -> List [ torch . Tensor ]: \"\"\"Evaluate the symbolic expression. This function takes either a numpy array or a dictionary of numpy arrays as input. Args: inputs_data (Union[np.ndarray, dict], optional): Union (Default value = None) Returns: List[torch.Tensor]: List[torch.Tensor]: A list of tensors containing the evaluated expressions. Raises: Raises: does: not match with the inputs_key attribute \"\"\" constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) inputs_list = constructor ( input_data = inputs_data , device = self . device ) output = self . forward ( input_data = inputs_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs = { key : value for key , value in zip ( self . output_names , outputs_list )} if type ( inputs_list ) is list : inputs = { key : value for key , value in zip ( self . input_names , inputs_list )} elif type ( inputs_list ) is dict : assert ( self . inputs_key is not None ), \"If inputs_list is dict, \\ it is necessary to provide \\ a key.\" inputs_list = self . _collect_data_from_inputs_list ( inputs_list = inputs_list ) inputs = { key : value for key , value in zip ( self . input_names , inputs_list )} else : raise Exception ( f \"Format { type ( inputs_list ) } not supported \\ for inputs_list\" ) feed_vars = { ** outputs , ** inputs } # It returns a list of tensors containing the expressions # evaluated over a domain return self . process_expression ( feed_vars = feed_vars )","title":"__call__()"},{"location":"simulai_residuals/#simulai.residuals.SymbolicOperator.eval_expression","text":"This function evaluates an expression stored in the class attribute 'g_expressions' using the inputs in 'inputs_list'. If the expression has a periodic boundary condition, the function evaluates the expression at the lower and upper boundaries and returns the difference. If the inputs are provided as a list, they are split into individual tensors and stored in a dictionary with the keys as the input names. If the inputs are provided as an np.ndarray, they are converted to tensors and split along the second axis. If the inputs are provided as a dict, they are extracted using the 'inputs_key' attribute. The inputs, along with the outputs obtained from running the function, are then passed as arguments to the expression using the 'g(**feed_vars)' syntax. Parameters: Name Type Description Default key str the key used to retrieve the expression from the 'g_expressions' attribute required inputs_list list either a list of arrays, an np.ndarray, or a dict containing the inputs to the function required Returns: Type Description the result of evaluating the expression using the inputs.: Source code in simulai/residuals/_pytorch_residuals.pydef eval_expression ( self , key , inputs_list ): \"\"\"This function evaluates an expression stored in the class attribute 'g_expressions' using the inputs in 'inputs_list'. If the expression has a periodic boundary condition, the function evaluates the expression at the lower and upper boundaries and returns the difference. If the inputs are provided as a list, they are split into individual tensors and stored in a dictionary with the keys as the input names. If the inputs are provided as an np.ndarray, they are converted to tensors and split along the second axis. If the inputs are provided as a dict, they are extracted using the 'inputs_key' attribute. The inputs, along with the outputs obtained from running the function, are then passed as arguments to the expression using the 'g(**feed_vars)' syntax. Args: key (str): the key used to retrieve the expression from the 'g_expressions' attribute inputs_list (list): either a list of arrays, an np.ndarray, or a dict containing the inputs to the function Returns: the result of evaluating the expression using the inputs.: \"\"\" try : g = self . g_expressions . get ( key ) except : raise Exception ( f \"The expression { key } does not exist.\" ) # Periodic boundary conditions if self . periodic_bc_protected_key in key : assert isinstance ( inputs_list , list ), ( \"When a periodic boundary expression is used,\" \" the input must be a list of arrays.\" ) # Lower bound constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) tensors_list = constructor ( input_data = inputs_list [ 0 ], device = self . device ) inputs_L = { key : value for key , value in zip ( self . input_names , tensors_list ) } output = self . function . forward ( input_data = tensors_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs_L = { key : value for key , value in zip ( self . output_names , outputs_list ) } feed_vars_L = { ** inputs_L , ** outputs_L } # Upper bound constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) tensors_list = constructor ( input_data = inputs_list [ - 1 ], device = self . device ) inputs_U = { key : value for key , value in zip ( self . input_names , tensors_list ) } output = self . function . forward ( input_data = tensors_list ) output = output . to ( self . device ) # TODO Check if it is necessary outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs_U = { key : value for key , value in zip ( self . output_names , outputs_list ) } feed_vars_U = { ** inputs_U , ** outputs_U } # Evaluating the boundaries equality return g ( ** feed_vars_L ) - g ( ** feed_vars_U ) # The non-periodic cases else : constructor = MakeTensor ( input_names = self . input_names , output_names = self . output_names ) inputs_list = constructor ( input_data = inputs_list , device = self . device ) output = self . function . forward ( input_data = inputs_list ) outputs_list = torch . split ( output , 1 , dim =- 1 ) outputs = { key : value for key , value in zip ( self . output_names , outputs_list ) } if type ( inputs_list ) is list : inputs = { key : value for key , value in zip ( self . input_names , inputs_list ) } elif type ( inputs_list ) is np . ndarray : arrays_list = np . split ( inputs_list , inputs_list . shape [ 1 ], axis = 1 ) tensors_list = [ torch . from_numpy ( arr ) for arr in arrays_list ] for t in tensors_list : t . requires_grad = True inputs = { key : value for key , value in zip ( self . input_names , tensors_list ) } elif type ( inputs_list ) is dict : assert ( self . inputs_key is not None ), \"If inputs_list is dict, \\ it is necessary to provide \\ a key.\" inputs = { key : value for key , value in zip ( self . input_names , inputs_list [ self . inputs_key ] ) } else : raise Exception ( f \"Format { type ( inputs_list ) } not supported \\ for inputs_list\" ) feed_vars = { ** inputs , ** outputs } return g ( ** feed_vars )","title":"eval_expression()"},{"location":"simulai_residuals/#simulai.residuals.SymbolicOperator.gradient","text":"Calculates the gradient of the given feature with respect to the given parameter. Parameters: Name Type Description Default feature Tensor Tensor with the input feature. required param Tensor Tensor with the parameter to calculate the gradient with respect to. required Returns: Type Description torch.Tensor: Tensor with the gradient of the feature with respect to the given parameter. Example:: >>> feature = torch.tensor([1, 2, 3], dtype=torch.float32) >>> param = torch.tensor([2, 3, 4], dtype=torch.float32) >>> gradient(feature, param) tensor([1., 1., 1.], grad_fn=<AddBackward0>) Source code in simulai/residuals/_pytorch_residuals.py 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 @staticmethod def gradient ( feature , param ): \"\"\"Calculates the gradient of the given feature with respect to the given parameter. Args: feature (torch.Tensor): Tensor with the input feature. param (torch.Tensor): Tensor with the parameter to calculate the gradient with respect to. Returns: torch.Tensor: Tensor with the gradient of the feature with respect to the given parameter. Example:: >>> feature = torch.tensor([1, 2, 3], dtype=torch.float32) >>> param = torch.tensor([2, 3, 4], dtype=torch.float32) >>> gradient(feature, param) tensor([1., 1., 1.], grad_fn=<AddBackward0>) \"\"\" grad_ = grad ( feature , param , grad_outputs = torch . ones_like ( feature ), create_graph = True , allow_unused = True , retain_graph = True , ) return grad_ [ 0 ]","title":"gradient()"},{"location":"simulai_residuals/#simulai.residuals.SymbolicOperator.jac","text":"Calculates the Jacobian of the forward function of the model with respect to its inputs. Parameters: Name Type Description Default inputs Tensor Tensor with the input data to the forward function. required Returns: Type Description torch.Tensor: Tensor with the Jacobian of the forward function with respect to its inputs. Example:: >>> inputs = torch.tensor([[1, 2, 3], [2, 3, 4]], dtype=torch.float32) >>> jac(inputs) tensor([[1., 1., 1.], [1., 1., 1.]], grad_fn=<MulBackward0>) Source code in simulai/residuals/_pytorch_residuals.py 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 def jac ( self , inputs ): \"\"\"Calculates the Jacobian of the forward function of the model with respect to its inputs. Args: inputs (torch.Tensor): Tensor with the input data to the forward function. Returns: torch.Tensor: Tensor with the Jacobian of the forward function with respect to its inputs. Example:: >>> inputs = torch.tensor([[1, 2, 3], [2, 3, 4]], dtype=torch.float32) >>> jac(inputs) tensor([[1., 1., 1.], [1., 1., 1.]], grad_fn=<MulBackward0>) \"\"\" def inner ( inputs ): return self . forward ( input_data = inputs ) return jacobian ( inner , inputs )","title":"jac()"}]}