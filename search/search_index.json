{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SimulAI {width=\"500px\"} An extensible Python package with data-driven pipelines for physics-informed machine learning. The SimulAI toolkit provides easy access to state-of-the-art models and algorithms for physics-informed machine learning. Currently, it includes the following methods described in the literature: Physics-Informed Neural Networks (PINNs) Deep Operator Networks (DeepONets) Variational Encoder-Decoders (VED) Operator Inference (OpInf) Koopman Autoencoders (experimental) Echo State Networks (experimental GPU support) Transformers U-Nets In addition to the methods above, many more techniques for model reduction and regularization are included in SimulAI. See documentation . Installing Python version requirements: 3.9 \\<= python \\<= 3.11 Using pip For installing the most recent stable version from PyPI: pip install simulai-toolkit For installing from the latest commit sent to GitHub (just for testing and developing purposes): pip uninstall simulai_toolkit pip install -U git+https://github.com/IBM/simulai@$(git ls-remote git@github.com:IBM/simulai.git | head -1 | awk '{print $1;}')#egg=simulai_toolkit Contributing code to SimulAI If you are interested in directly contributing to this project, please see CONTRIBUTING . Using MPI Some methods implemented on SimulAI support multiprocessing with MPI. In order to use it, you will need a valid MPI distribution, e.g. MPICH, OpenMPI. As an example, you can use conda to install MPICH as follows: conda install -c conda-forge mpich gcc Issues with macOS If you have problems installing gcc using the command above, we recommend you to install it using Homebrew . Using Tensorboard Tensorboard is supported for monitoring neural network training tasks. For a tutorial about how to set it see this example . Documentation Please, refer to the SimulAI API documentation before using the toolkit. Examples Additionally, you can refer to examples in the respective folder . License This software is licensed under Apache license 2.0. See LICENSE . Contributing code to SimulAI If you are interested in directly contributing to this project, please see CONTRIBUTING . How to cite SimulAI in your publications If you find SimulAI to be useful, please consider citing it in your published work: @misc{simulai, author = {IBM}, title = {SimulAI Toolkit}, subtitle = {A Python package with data-driven pipelines for physics-informed machine learning}, note = \"https://github.com/IBM/simulai\", doi = {10.5281/zenodo.7351516}, year = {2022}, } or, via Zenodo: @software{joao_lucas_de_sousa_almeida_2023_7566603, author = {Jo\u00e3o Lucas de Sousa Almeida and Leonardo Martins and Tar\u0131k Kaan Ko\u00e7}, title = {IBM/simulai: 0.99.13}, month = jan, year = 2023, publisher = {Zenodo}, version = {0.99.25}, doi = {10.5281/zenodo.7566603}, url = {https://doi.org/10.5281/zenodo.7566603} } Publications Jo\u00e3o Lucas de Sousa Almeida, Pedro Roberto Barbosa Rocha, Allan Moreira de Carvalho and Alberto Costa Nogueira Jr. A coupled Variational Encoder-Decoder - DeepONet surrogate model for the Rayleigh-B\u00e9nard convection problem. In When Machine Learning meets Dynamical Systems: Theory and Applications, AAAI, 2023. Jo\u00e3o Lucas S. Almeida, Arthur C. Pires, Klaus F. V. Cid, and Alberto C. Nogueira Jr. Non-intrusive operator inference for chaotic systems. IEEE Transactions on Artificial Intelligence, pages 1--14, 2022. Pedro Roberto Barbosa Rocha, Marcos Sebasti\u00e3o de Paula Gomes, Allan Moreira de Carvalho, Jo\u00e3o Lucas de Sousa Almeida and Alberto Costa Nogueira Jr. Data-driven reduced-order model for atmospheric CO2 dispersion. In AAAI 2022 Fall Symposium: The Role of AI in Responding to Climate Challenges, 2022. Pedro Roberto Barbosa Rocha, Jo\u00e3o Lucas de Sousa Almeida, Marcos Sebasti\u00e3o de Paula Gomes, Alberto Costa Nogueira, Reduced-order modeling of the two-dimensional Rayleigh--B\u00e9nard convection flow through a non-intrusive operator inference, Engineering Applications of Artificial Intelligence, Volume 126, Part B, 2023, 106923, ISSN 0952-1976, https://doi.org/10.1016/j.engappai.2023.106923 . ( https://www.sciencedirect.com/science/article/pii/S0952197623011077 ) References Jaeger, H., Haas, H. (2004). \\\"Harnessing Nonlinearity: Predicting Chaotic Systems and Saving Energy in Wireless Communication,\\\" Science , 304 (5667): 78--80. \\< https://doi.org/10.1126/science.1091277 >`_. Lu, L., Jin, P., Pang, G., Zhang, Z., Karniadakis, G. E. (2021). \\\"Learning nonlinear operators via DeepONet based on the universal approximation theorem of operators,\\\" Nature Machine Intelligence , 3 (1): 218--229. ISSN: 2522-5839. \\< https://doi.org/10.1038/s42256-021-00302-5 >`_. Eivazi, H., Le Clainche, S., Hoyas, S., Vinuesa, R. (2022) \\\"Towards extraction of orthogonal and parsimonious non-linear modes from turbulent flows\\\" Expert Systems with Applications , 202 . ISSN: 0957-4174. \\< https://doi.org/10.1016/j.eswa.2022.117038 >`_. Raissi, M., Perdikaris, P., Karniadakis, G. E. (2019). \\\"Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations,\\\" Journal of Computational Physics , 378 (1): 686-707. ISSN: 0021-9991. \\< https://doi.org/10.1016/j.jcp.2018.10.045 >`_. Lusch, B., Kutz, J. N., Brunton, S.L. (2018). \\\"Deep learning for universal linear embeddings of nonlinear dynamics,\\\" Nature Communications , 9 : 4950. ISSN: 2041-1723. \\< https://doi.org/10.1038/s41467-018-07210-0 >`_. McQuarrie, S., Huang, C. and Willcox, K. (2021). \\\"Data-driven reduced-order models via regularized operator inference for a single-injector combustion process,\\\" Journal of the Royal Society of New Zealand , 51 (2): 194-211. ISSN: 0303-6758. \\< https://doi.org/10.1080/03036758.2020.1863237 >`_.","title":"Welcome to SimulAI"},{"location":"#welcome-to-simulai","text":"{width=\"500px\"} An extensible Python package with data-driven pipelines for physics-informed machine learning. The SimulAI toolkit provides easy access to state-of-the-art models and algorithms for physics-informed machine learning. Currently, it includes the following methods described in the literature: Physics-Informed Neural Networks (PINNs) Deep Operator Networks (DeepONets) Variational Encoder-Decoders (VED) Operator Inference (OpInf) Koopman Autoencoders (experimental) Echo State Networks (experimental GPU support) Transformers U-Nets In addition to the methods above, many more techniques for model reduction and regularization are included in SimulAI. See documentation .","title":"Welcome to SimulAI"},{"location":"#installing","text":"Python version requirements: 3.9 \\<= python \\<= 3.11","title":"Installing"},{"location":"#using-pip","text":"For installing the most recent stable version from PyPI: pip install simulai-toolkit For installing from the latest commit sent to GitHub (just for testing and developing purposes): pip uninstall simulai_toolkit pip install -U git+https://github.com/IBM/simulai@$(git ls-remote git@github.com:IBM/simulai.git | head -1 | awk '{print $1;}')#egg=simulai_toolkit","title":"Using pip"},{"location":"#contributing-code-to-simulai","text":"If you are interested in directly contributing to this project, please see CONTRIBUTING .","title":"Contributing code to SimulAI"},{"location":"#using-mpi","text":"Some methods implemented on SimulAI support multiprocessing with MPI. In order to use it, you will need a valid MPI distribution, e.g. MPICH, OpenMPI. As an example, you can use conda to install MPICH as follows: conda install -c conda-forge mpich gcc","title":"Using MPI"},{"location":"#issues-with-macos","text":"If you have problems installing gcc using the command above, we recommend you to install it using Homebrew .","title":"Issues with macOS"},{"location":"#using-tensorboard","text":"Tensorboard is supported for monitoring neural network training tasks. For a tutorial about how to set it see this example .","title":"Using Tensorboard"},{"location":"#documentation","text":"Please, refer to the SimulAI API documentation before using the toolkit.","title":"Documentation"},{"location":"#examples","text":"Additionally, you can refer to examples in the respective folder .","title":"Examples"},{"location":"#license","text":"This software is licensed under Apache license 2.0. See LICENSE .","title":"License"},{"location":"#contributing-code-to-simulai_1","text":"If you are interested in directly contributing to this project, please see CONTRIBUTING .","title":"Contributing code to SimulAI"},{"location":"#how-to-cite-simulai-in-your-publications","text":"If you find SimulAI to be useful, please consider citing it in your published work: @misc{simulai, author = {IBM}, title = {SimulAI Toolkit}, subtitle = {A Python package with data-driven pipelines for physics-informed machine learning}, note = \"https://github.com/IBM/simulai\", doi = {10.5281/zenodo.7351516}, year = {2022}, } or, via Zenodo: @software{joao_lucas_de_sousa_almeida_2023_7566603, author = {Jo\u00e3o Lucas de Sousa Almeida and Leonardo Martins and Tar\u0131k Kaan Ko\u00e7}, title = {IBM/simulai: 0.99.13}, month = jan, year = 2023, publisher = {Zenodo}, version = {0.99.25}, doi = {10.5281/zenodo.7566603}, url = {https://doi.org/10.5281/zenodo.7566603} }","title":"How to cite SimulAI in your publications"},{"location":"#publications","text":"Jo\u00e3o Lucas de Sousa Almeida, Pedro Roberto Barbosa Rocha, Allan Moreira de Carvalho and Alberto Costa Nogueira Jr. A coupled Variational Encoder-Decoder - DeepONet surrogate model for the Rayleigh-B\u00e9nard convection problem. In When Machine Learning meets Dynamical Systems: Theory and Applications, AAAI, 2023. Jo\u00e3o Lucas S. Almeida, Arthur C. Pires, Klaus F. V. Cid, and Alberto C. Nogueira Jr. Non-intrusive operator inference for chaotic systems. IEEE Transactions on Artificial Intelligence, pages 1--14, 2022. Pedro Roberto Barbosa Rocha, Marcos Sebasti\u00e3o de Paula Gomes, Allan Moreira de Carvalho, Jo\u00e3o Lucas de Sousa Almeida and Alberto Costa Nogueira Jr. Data-driven reduced-order model for atmospheric CO2 dispersion. In AAAI 2022 Fall Symposium: The Role of AI in Responding to Climate Challenges, 2022. Pedro Roberto Barbosa Rocha, Jo\u00e3o Lucas de Sousa Almeida, Marcos Sebasti\u00e3o de Paula Gomes, Alberto Costa Nogueira, Reduced-order modeling of the two-dimensional Rayleigh--B\u00e9nard convection flow through a non-intrusive operator inference, Engineering Applications of Artificial Intelligence, Volume 126, Part B, 2023, 106923, ISSN 0952-1976, https://doi.org/10.1016/j.engappai.2023.106923 . ( https://www.sciencedirect.com/science/article/pii/S0952197623011077 )","title":"Publications"},{"location":"#references","text":"Jaeger, H., Haas, H. (2004). \\\"Harnessing Nonlinearity: Predicting Chaotic Systems and Saving Energy in Wireless Communication,\\\" Science , 304 (5667): 78--80. \\< https://doi.org/10.1126/science.1091277 >`_. Lu, L., Jin, P., Pang, G., Zhang, Z., Karniadakis, G. E. (2021). \\\"Learning nonlinear operators via DeepONet based on the universal approximation theorem of operators,\\\" Nature Machine Intelligence , 3 (1): 218--229. ISSN: 2522-5839. \\< https://doi.org/10.1038/s42256-021-00302-5 >`_. Eivazi, H., Le Clainche, S., Hoyas, S., Vinuesa, R. (2022) \\\"Towards extraction of orthogonal and parsimonious non-linear modes from turbulent flows\\\" Expert Systems with Applications , 202 . ISSN: 0957-4174. \\< https://doi.org/10.1016/j.eswa.2022.117038 >`_. Raissi, M., Perdikaris, P., Karniadakis, G. E. (2019). \\\"Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations,\\\" Journal of Computational Physics , 378 (1): 686-707. ISSN: 0021-9991. \\< https://doi.org/10.1016/j.jcp.2018.10.045 >`_. Lusch, B., Kutz, J. N., Brunton, S.L. (2018). \\\"Deep learning for universal linear embeddings of nonlinear dynamics,\\\" Nature Communications , 9 : 4950. ISSN: 2041-1723. \\< https://doi.org/10.1038/s41467-018-07210-0 >`_. McQuarrie, S., Huang, C. and Willcox, K. (2021). \\\"Data-driven reduced-order models via regularized operator inference for a single-injector combustion process,\\\" Journal of the Royal Society of New Zealand , 51 (2): 194-211. ISSN: 0303-6758. \\< https://doi.org/10.1080/03036758.2020.1863237 >`_.","title":"References"},{"location":"simulai_models/","text":"simulai.models Transformer Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_transformer.pyclass Transformer ( NetworkTemplate ): def __init__ ( self , num_heads_encoder : int = 1 , num_heads_decoder : int = 1 , embed_dim_encoder : int = Union [ int , Tuple ], embed_dim_decoder : int = Union [ int , Tuple ], encoder_activation : Union [ str , torch . nn . Module ] = 'relu' , decoder_activation : Union [ str , torch . nn . Module ] = 'relu' , encoder_mlp_layer_config : dict = None , decoder_mlp_layer_config : dict = None , number_of_encoders : int = 1 , number_of_decoders : int = 1 ) -> None : \"\"\" A classical encoder-decoder transformer: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Parameters ---------- num_heads_encoder : int The number of heads for the self-attention layer of the encoder. num_heads_decoder :int The number of heads for the self-attention layer of the decoder. embed_dim_encoder : int The dimension of the embedding for the encoder. embed_dim_decoder : int The dimension of the embedding for the decoder. encoder_activation : Union[str, torch.nn.Module] The activation to be used in all the encoder layers. decoder_activation : Union[str, torch.nn.Module] The activation to be used in all the decoder layers. encoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights decoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights number_of_encoders : int The number of encoders to be used. number_of_decoders : int The number of decoders to be used. \"\"\" super ( Transformer , self ) . __init__ () self . num_heads_encoder = num_heads_encoder self . num_heads_decoder = num_heads_decoder self . embed_dim_encoder = embed_dim_encoder self . embed_dim_decoder = embed_dim_decoder self . encoder_mlp_layer_dict = encoder_mlp_layer_config self . decoder_mlp_layer_dict = decoder_mlp_layer_config self . number_of_encoders = number_of_encoders self . number_of_decoders = number_of_encoders self . encoder_activation = encoder_activation self . decoder_activation = decoder_activation self . encoder_mlp_layers_list = list () self . decoder_mlp_layers_list = list () # Creating independent copies for the MLP layers which will be used # by the multiple encoders/decoders. for e in range ( self . number_of_encoders ): self . encoder_mlp_layers_list . append ( DenseNetwork ( ** self . encoder_mlp_layer_dict ) ) for d in range ( self . number_of_decoders ): self . decoder_mlp_layers_list . append ( DenseNetwork ( ** self . decoder_mlp_layer_dict ) ) # Defining the encoder architecture self . EncoderStage = torch . nn . Sequential ( * [ BasicEncoder ( num_heads = self . num_heads_encoder , activation = self . encoder_activation , mlp_layer = self . encoder_mlp_layers_list [ e ], embed_dim = self . embed_dim_encoder ) for e in range ( self . number_of_encoders )] ) # Defining the decoder architecture self . DecoderStage = torch . nn . ModuleList ([ BasicDecoder ( num_heads = self . num_heads_decoder , activation = self . decoder_activation , mlp_layer = self . decoder_mlp_layers_list [ d ], embed_dim = self . embed_dim_decoder ) for d in range ( self . number_of_decoders ) ]) self . weights = list () for e , encoder_e in enumerate ( self . EncoderStage ): self . weights += encoder_e . weights self . add_module ( f \"encoder_ { e } \" , encoder_e ) for d , decoder_d in enumerate ( self . DecoderStage ): self . weights += decoder_d . weights self . add_module ( f \"decoder_ { d } \" , decoder_d ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Parameters ---------- input_data : Union[torch.Tensor, np.ndarray] The input dataset. Returns ------- torch.Tensor The transformer output. \"\"\" encoder_output = self . EncoderStage ( input_data ) current_input = input_data for decoder in self . DecoderStage : output = decoder ( input_data = current_input , encoder_output = encoder_output ) current_input = output return output def summary ( self ): \"\"\" It prints a general view of the architecture. \"\"\" print ( self ) __init__ ( num_heads_encoder = 1 , num_heads_decoder = 1 , embed_dim_encoder = Union [ int , Tuple ], embed_dim_decoder = Union [ int , Tuple ], encoder_activation = 'relu' , decoder_activation = 'relu' , encoder_mlp_layer_config = None , decoder_mlp_layer_config = None , number_of_encoders = 1 , number_of_decoders = 1 ) A classical encoder-decoder transformer: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Parameters num_heads_encoder : int The number of heads for the self-attention layer of the encoder. num_heads_decoder :int The number of heads for the self-attention layer of the decoder. embed_dim_encoder : int The dimension of the embedding for the encoder. embed_dim_decoder : int The dimension of the embedding for the decoder. encoder_activation : Union[str, torch.nn.Module] The activation to be used in all the encoder layers. decoder_activation : Union[str, torch.nn.Module] The activation to be used in all the decoder layers. encoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights decoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights number_of_encoders : int The number of encoders to be used. number_of_decoders : int The number of decoders to be used. simulai/models/_pytorch_models/_transformer.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 def __init__ ( self , num_heads_encoder : int = 1 , num_heads_decoder : int = 1 , embed_dim_encoder : int = Union [ int , Tuple ], embed_dim_decoder : int = Union [ int , Tuple ], encoder_activation : Union [ str , torch . nn . Module ] = 'relu' , decoder_activation : Union [ str , torch . nn . Module ] = 'relu' , encoder_mlp_layer_config : dict = None , decoder_mlp_layer_config : dict = None , number_of_encoders : int = 1 , number_of_decoders : int = 1 ) -> None : \"\"\" A classical encoder-decoder transformer: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Parameters ---------- num_heads_encoder : int The number of heads for the self-attention layer of the encoder. num_heads_decoder :int The number of heads for the self-attention layer of the decoder. embed_dim_encoder : int The dimension of the embedding for the encoder. embed_dim_decoder : int The dimension of the embedding for the decoder. encoder_activation : Union[str, torch.nn.Module] The activation to be used in all the encoder layers. decoder_activation : Union[str, torch.nn.Module] The activation to be used in all the decoder layers. encoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights decoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights number_of_encoders : int The number of encoders to be used. number_of_decoders : int The number of decoders to be used. \"\"\" super ( Transformer , self ) . __init__ () self . num_heads_encoder = num_heads_encoder self . num_heads_decoder = num_heads_decoder self . embed_dim_encoder = embed_dim_encoder self . embed_dim_decoder = embed_dim_decoder self . encoder_mlp_layer_dict = encoder_mlp_layer_config self . decoder_mlp_layer_dict = decoder_mlp_layer_config self . number_of_encoders = number_of_encoders self . number_of_decoders = number_of_encoders self . encoder_activation = encoder_activation self . decoder_activation = decoder_activation self . encoder_mlp_layers_list = list () self . decoder_mlp_layers_list = list () # Creating independent copies for the MLP layers which will be used # by the multiple encoders/decoders. for e in range ( self . number_of_encoders ): self . encoder_mlp_layers_list . append ( DenseNetwork ( ** self . encoder_mlp_layer_dict ) ) for d in range ( self . number_of_decoders ): self . decoder_mlp_layers_list . append ( DenseNetwork ( ** self . decoder_mlp_layer_dict ) ) # Defining the encoder architecture self . EncoderStage = torch . nn . Sequential ( * [ BasicEncoder ( num_heads = self . num_heads_encoder , activation = self . encoder_activation , mlp_layer = self . encoder_mlp_layers_list [ e ], embed_dim = self . embed_dim_encoder ) for e in range ( self . number_of_encoders )] ) # Defining the decoder architecture self . DecoderStage = torch . nn . ModuleList ([ BasicDecoder ( num_heads = self . num_heads_decoder , activation = self . decoder_activation , mlp_layer = self . decoder_mlp_layers_list [ d ], embed_dim = self . embed_dim_decoder ) for d in range ( self . number_of_decoders ) ]) self . weights = list () for e , encoder_e in enumerate ( self . EncoderStage ): self . weights += encoder_e . weights self . add_module ( f \"encoder_ { e } \" , encoder_e ) for d , decoder_d in enumerate ( self . DecoderStage ): self . weights += decoder_d . weights self . add_module ( f \"decoder_ { d } \" , decoder_d ) forward ( input_data = None ) Parameters input_data : Union[torch.Tensor, np.ndarray] The input dataset. Returns torch.Tensor The transformer output. simulai/models/_pytorch_models/_transformer.py 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Parameters ---------- input_data : Union[torch.Tensor, np.ndarray] The input dataset. Returns ------- torch.Tensor The transformer output. \"\"\" encoder_output = self . EncoderStage ( input_data ) current_input = input_data for decoder in self . DecoderStage : output = decoder ( input_data = current_input , encoder_output = encoder_output ) current_input = output return output summary () It prints a general view of the architecture. simulai/models/_pytorch_models/_transformer.py 308 309 310 311 312 313 def summary ( self ): \"\"\" It prints a general view of the architecture. \"\"\" print ( self ) U-Net Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_unet.py 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 class UNet ( NetworkTemplate ): def __init__ ( self , layers_config : Dict = None , intermediary_outputs_indices : List [ int ] = None , intermediary_inputs_indices : List [ int ] = None , encoder_extra_args : Dict = dict (), decoder_extra_args : Dict = dict ()) -> None : \"\"\" U-Net. Parameters ---------- layers_config : Dict A dictionary containing the complete configuration for the U-Net encoder and decoder. intermediary_outputs_indices : List[int] A list of indices for indicating the encoder outputs. intermediary_inputs_indices : List[int] A list of indices for indicating the decoder inputs. encoder_extra_args : Dict A dictionary containing extra arguments for the encoder. decoder_extra_args : Dict A dictionary containing extra arguments for the decoder. \"\"\" super ( UNet , self ) . __init__ () self . layers_config = layers_config self . intermediary_outputs_indices = intermediary_outputs_indices self . intermediary_inputs_indices = intermediary_inputs_indices self . layers_config_encoder = self . layers_config [ \"encoder\" ] self . layers_config_decoder = self . layers_config [ \"decoder\" ] self . encoder_activations = self . layers_config [ \"encoder_activations\" ] self . decoder_activations = self . layers_config [ \"decoder_activations\" ] self . encoder_horizontal_outputs = dict () # Configuring the encoder encoder_type = self . layers_config_encoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . encoder = CNNUnetEncoder ( layers = self . layers_config_encoder [ \"architecture\" ], activations = self . encoder_activations , intermediary_outputs_indices = self . intermediary_outputs_indices , case = \"2d\" , name = \"encoder\" , ** encoder_extra_args ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) # Configuring the decoder decoder_type = self . layers_config_decoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . decoder = CNNUnetDecoder ( layers = self . layers_config_decoder [ \"architecture\" ], activations = self . decoder_activations , intermediary_inputs_indices = self . intermediary_inputs_indices , case = \"2d\" , name = \"decoder\" , ** decoder_extra_args ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" The U-Net forward method. Parameters ---------- input_data : Union[torch.Tensor, np.ndarray], A dataset to be inputted in the CNN U-Net encoder. Returns ------- torch.Tensor The U-Net output. \"\"\" encoder_main_output , encoder_intermediary_outputs = self . encoder ( input_data = input_data ) output = self . decoder ( input_data = encoder_main_output , intermediary_encoder_outputs = encoder_intermediary_outputs ) return output def summary ( self ): \"\"\" It shows a general view of the architecture. \"\"\" print ( self ) __init__ ( layers_config = None , intermediary_outputs_indices = None , intermediary_inputs_indices = None , encoder_extra_args = dict (), decoder_extra_args = dict ()) U-Net. Parameters layers_config : Dict A dictionary containing the complete configuration for the U-Net encoder and decoder. intermediary_outputs_indices : List[int] A list of indices for indicating the encoder outputs. intermediary_inputs_indices : List[int] A list of indices for indicating the decoder inputs. encoder_extra_args : Dict A dictionary containing extra arguments for the encoder. decoder_extra_args : Dict A dictionary containing extra arguments for the decoder. simulai/models/_pytorch_models/_unet.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 def __init__ ( self , layers_config : Dict = None , intermediary_outputs_indices : List [ int ] = None , intermediary_inputs_indices : List [ int ] = None , encoder_extra_args : Dict = dict (), decoder_extra_args : Dict = dict ()) -> None : \"\"\" U-Net. Parameters ---------- layers_config : Dict A dictionary containing the complete configuration for the U-Net encoder and decoder. intermediary_outputs_indices : List[int] A list of indices for indicating the encoder outputs. intermediary_inputs_indices : List[int] A list of indices for indicating the decoder inputs. encoder_extra_args : Dict A dictionary containing extra arguments for the encoder. decoder_extra_args : Dict A dictionary containing extra arguments for the decoder. \"\"\" super ( UNet , self ) . __init__ () self . layers_config = layers_config self . intermediary_outputs_indices = intermediary_outputs_indices self . intermediary_inputs_indices = intermediary_inputs_indices self . layers_config_encoder = self . layers_config [ \"encoder\" ] self . layers_config_decoder = self . layers_config [ \"decoder\" ] self . encoder_activations = self . layers_config [ \"encoder_activations\" ] self . decoder_activations = self . layers_config [ \"decoder_activations\" ] self . encoder_horizontal_outputs = dict () # Configuring the encoder encoder_type = self . layers_config_encoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . encoder = CNNUnetEncoder ( layers = self . layers_config_encoder [ \"architecture\" ], activations = self . encoder_activations , intermediary_outputs_indices = self . intermediary_outputs_indices , case = \"2d\" , name = \"encoder\" , ** encoder_extra_args ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) # Configuring the decoder decoder_type = self . layers_config_decoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . decoder = CNNUnetDecoder ( layers = self . layers_config_decoder [ \"architecture\" ], activations = self . decoder_activations , intermediary_inputs_indices = self . intermediary_inputs_indices , case = \"2d\" , name = \"decoder\" , ** decoder_extra_args ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) forward ( input_data = None ) The U-Net forward method. Parameters input_data : Union[torch.Tensor, np.ndarray], A dataset to be inputted in the CNN U-Net encoder. Returns torch.Tensor The U-Net output. simulai/models/_pytorch_models/_unet.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" The U-Net forward method. Parameters ---------- input_data : Union[torch.Tensor, np.ndarray], A dataset to be inputted in the CNN U-Net encoder. Returns ------- torch.Tensor The U-Net output. \"\"\" encoder_main_output , encoder_intermediary_outputs = self . encoder ( input_data = input_data ) output = self . decoder ( input_data = encoder_main_output , intermediary_encoder_outputs = encoder_intermediary_outputs ) return output summary () It shows a general view of the architecture. simulai/models/_pytorch_models/_unet.py 294 295 296 297 298 299 def summary ( self ): \"\"\" It shows a general view of the architecture. \"\"\" print ( self ) DeepONet Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_deeponet.pyclass DeepONet ( NetworkTemplate ): name = \"deeponet\" engine = \"torch\" def __init__ ( self , trunk_network : NetworkTemplate = None , branch_network : NetworkTemplate = None , decoder_network : NetworkTemplate = None , # The decoder network is optional and considered var_dim : int = 1 , # less effective than the output reshaping alternative devices : Union [ str , list ] = \"cpu\" , product_type : str = None , rescale_factors : np . ndarray = None , model_id : str = None , use_bias : bool = False , ) -> None : \"\"\" Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Parameters ---------- trunk_network : NetworkTemplate Subnetwork for processing the coordinates inputs. branch_network : NetworkTemplate Subnetwork for processing the forcing/conditioning inputs. decoder_network : NetworkTemplate Subnetworks for converting the embedding to the output (optional). var_dim: int Number of output variables. devices: Union[str, list] Devices in which the model will be executed. product_type: str Type of product to execute in the embedding space. rescale_factors: np.ndarray Values used for rescaling the network outputs for a given order of magnitude. model_id: str Name for the model \"\"\" super ( DeepONet , self ) . __init__ ( devices = devices ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . use_bias = use_bias self . trunk_network = self . to_wrap ( entity = trunk_network , device = self . device ) self . branch_network = self . to_wrap ( entity = branch_network , device = self . device ) self . add_module ( \"trunk_network\" , self . trunk_network ) self . add_module ( \"branch_network\" , self . branch_network ) if decoder_network is not None : self . decoder_network = self . to_wrap ( entity = decoder_network , device = self . device ) self . add_module ( \"decoder_network\" , self . decoder_network ) else : self . decoder_network = decoder_network self . product_type = product_type self . model_id = model_id self . var_dim = var_dim # Rescaling factors for the output if rescale_factors is not None : assert ( len ( rescale_factors ) == var_dim ), \"The number of rescaling factors must be equal to var_dim.\" rescale_factors = torch . from_numpy ( rescale_factors . astype ( \"float32\" )) self . rescale_factors = self . to_wrap ( entity = rescale_factors , device = self . device ) else : self . rescale_factors = None # Checking up whether the output of each subnetwork are in correct shape assert self . _latent_dimension_is_correct ( self . trunk_network . output_size ), ( \"The trunk network must have\" \" one-dimensional output , \" \"but received\" f \" { self . trunk_network . output_size } \" ) assert self . _latent_dimension_is_correct ( self . branch_network . output_size ), ( \"The branch network must have\" \" one-dimensional output,\" \" but received\" f \" { self . branch_network . output_size } \" ) # If bias is being used, check whether the network outputs are compatible. if self . use_bias : print ( \"Bias is being used.\" ) self . _bias_compatibility_is_correct ( dim_trunk = self . trunk_network . output_size , dim_branch = self . branch_network . output_size ) self . bias_wrapper = self . _wrapper_bias_active else : self . bias_wrapper = self . _wrapper_bias_inactive # Using a decoder on top of the model or not if self . decoder_network is not None : self . decoder_wrapper = self . _wrapper_decoder_active else : self . decoder_wrapper = self . _wrapper_decoder_inactive # Using rescaling factors or not if rescale_factors is not None : self . rescale_wrapper = self . _wrapper_rescale_active else : self . rescale_wrapper = self . _wrapper_rescale_inactive # Checking the compatibility of the subnetworks outputs for each kind of product being employed. if self . product_type != \"dense\" : output_branch = self . branch_network . output_size output_trunk = self . trunk_network . output_size # It checks if the inner product operation can be performed. if not self . use_bias : assert output_branch == output_trunk , ( f \"The output dimensions for the sub-networks\" f \" trunk and branch must be equal but are\" f \" { output_branch } \" f \" and { output_trunk } \" ) else : print ( \"Bias compatibility was already verified.\" ) else : output_branch = self . branch_network . output_size assert not output_branch % self . var_dim , ( f \"The number of branch latent outputs must\" f \" be divisible by the number of variables,\" f \" but received { output_branch } \" f \" and { self . var_dim } \" ) self . subnetworks = [ net for net in [ self . trunk_network , self . branch_network , self . decoder_network ] if net is not None ] self . input_trunk = None self . input_branch = None self . output = None self . var_map = dict () #TODO Checking up if the input of the decoder network has the correct dimension if self . decoder_network is not None : print ( \"Decoder is being used.\" ) else : pass # Selecting the correct forward approach to be used self . _forward = self . _forward_selector_ () self . subnetworks_names = [ \"trunk\" , \"branch\" ] def _latent_dimension_is_correct ( self , dim : Union [ int , tuple ]) -> bool : \"\"\" It checks if the latent dimension is consistent. Parameters ---------- dim : Union[int, tuple] Latent_space_dimension. Returns ------- bool The confirmation about the dimensionality correctness. \"\"\" if type ( dim ) == int : return True elif type ( dim ) == tuple : if len ( tuple ) == 1 : return True else : return False def _bias_compatibility_is_correct ( self , dim_trunk : Union [ int , tuple ], dim_branch : Union [ int , tuple ]) -> bool : assert dim_branch == dim_trunk + self . var_dim , ( \"When using bias, the dimension\" + \"of the branch output should be\" + \"trunk output + var_dim.\" ) def _forward_dense ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\" Forward method used when the embeddings are multiplied using a matrix-like product, it means, the trunk network outputs serve as \"interpolation basis\" for the branch outputs. Parameters ---------- output_trunk: torch.Tensor The embedding generated by the trunk network. output_branch: torch.Tensor The embedding generated by the branch network. Returns ------- torch.Tensor The product between the two embeddings. \"\"\" latent_dim = int ( output_branch . shape [ - 1 ] / self . var_dim ) output_branch_reshaped = torch . reshape ( output_branch , ( - 1 , self . var_dim , latent_dim ) ) output = torch . matmul ( output_branch_reshaped , output_trunk [ ... , None ]) output = torch . squeeze ( output ) return output def _forward_pointwise ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\" Forward method used when the embeddings are multiplied using a simple point-wise product, after that a reshaping is applied in order to produce multiple outputs. Parameters ---------- output_trunk: torch.Tensor The embedding generated by the trunk network. output_branch: torch.Tensor The embedding generated by the branch network. Returns ------- torch.Tensor The product between the two embeddings. \"\"\" latent_dim = int ( output_trunk . shape [ - 1 ] / self . var_dim ) output_trunk_reshaped = torch . reshape ( output_trunk , ( - 1 , latent_dim , self . var_dim ) ) output_branch_reshaped = torch . reshape ( output_branch , ( - 1 , latent_dim , self . var_dim ) ) output = torch . sum ( output_trunk_reshaped * output_branch_reshaped , dim =- 2 , keepdim = False ) return output def _forward_vanilla ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\" Forward method used when the embeddings are multiplied using a simple point-wise product. Parameters ---------- output_trunk: torch.Tensor The embedding generated by the trunk network. output_branch: torch.Tensor The embedding generated by the branch network. Returns ------- torch.Tensor The product between the two embeddings. \"\"\" output = torch . sum ( output_trunk * output_branch , dim =- 1 , keepdim = True ) return output def _forward_selector_ ( self ) -> callable : \"\"\" It selects the forward method to be used. Returns ------- callable: The callable corresponding to the required forward method. \"\"\" if self . var_dim > 1 : # It operates as a typical dense layer if self . product_type == \"dense\" : return self . _forward_dense # It executes an inner product by parts between the outputs # of the subnetworks branch and trunk else : return self . _forward_pointwise else : return self . _forward_vanilla @property def _var_map ( self ) -> dict : # It checks all the data arrays in self.var_map have the same # batches dimension batches_dimensions = set ([ value . shape [ 0 ] for value in self . var_map . values ()]) assert ( len ( batches_dimensions ) == 1 ), \"This dataset is not proper to apply shuffling\" dim = list ( batches_dimensions )[ 0 ] indices = np . arange ( dim ) np . random . shuffle ( indices ) var_map_shuffled = { key : value [ indices ] for key , value in self . var_map . items ()} return var_map_shuffled @property def weights ( self ) -> list : return sum ([ net . weights for net in self . subnetworks ], []) # Now, a sequence of wrappers def _wrapper_bias_inactive ( self , output_trunk : Union [ np . ndarray , torch . Tensor ] = None , output_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : output = self . _forward ( output_trunk = output_trunk , output_branch = output_branch ) return output def _wrapper_bias_active ( self , output_trunk : Union [ np . ndarray , torch . Tensor ] = None , output_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : output_branch_ = output_branch [:, : - self . var_dim ] bias = output_branch [:, - self . var_dim :] output = self . _forward ( output_trunk = output_trunk , output_branch = output_branch_ ) + bias return output def _wrapper_decoder_active ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return self . decoder_network . forward ( input_data = input_data ) def _wrapper_decoder_inactive ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data def _wrapper_rescale_active ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data * self . rescale_factors def _wrapper_rescale_inactive ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data def forward ( self , input_trunk : Union [ np . ndarray , torch . Tensor ] = None , input_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : \"\"\" Wrapper forward method. Parameters ---------- input_trunk : Union[np.ndarray, torch.Tensor] input_branch : Union[np.ndarray, torch.Tensor] Returns ------- torch.Tensor The result of all the hidden operations in the network. \"\"\" # Forward method execution output_trunk = self . to_wrap ( entity = self . trunk_network . forward ( input_trunk ), device = self . device ) output_branch = self . to_wrap ( entity = self . branch_network . forward ( input_branch ), device = self . device ) # Wrappers are applied to execute user-defined operations. # When those operations are not selected, these wrappers simply # bypass the inputs. output = self . bias_wrapper ( output_trunk = output_trunk , output_branch = output_branch ) return self . rescale_wrapper ( input_data = self . decoder_wrapper ( input_data = output )) @guarantee_device def eval ( self , trunk_data : Union [ np . ndarray , torch . Tensor ] = None , branch_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> np . ndarray : \"\"\" It uses the network to make evaluations. Parameters ---------- trunk_data : Union[np.ndarray, torch.Tensor] branch_data : Union[np.ndarray, torch.Tensor] Returns ------- np.ndarray The result of all the hidden operations in the network. \"\"\" output_tensor = self . forward ( input_trunk = trunk_data , input_branch = branch_data ) return output_tensor . cpu () . detach () . numpy () @guarantee_device def eval_subnetwork ( self , name : str = None , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" It evaluates the output of DeepONet subnetworks. Parameters ---------- name : str Name of the subnetwork. input_data : Union[np.ndarray, torch.Tensor] The data used as input for the subnetwork. Returns ------- np.ndarray The evaluation performed by the subnetwork. \"\"\" assert ( name in self . subnetworks_names ), f \"The name { name } is not a subnetwork of { self } .\" network_to_be_used = getattr ( self , name + \"_network\" ) return network_to_be_used . forward ( input_data ) . cpu () . detach () . numpy () def summary ( self ) -> None : print ( \"Trunk Network:\" ) self . trunk_network . summary () print ( \"Branch Network:\" ) self . branch_network . summary () __init__ ( trunk_network = None , branch_network = None , decoder_network = None , var_dim = 1 , devices = 'cpu' , product_type = None , rescale_factors = None , model_id = None , use_bias = False ) Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Parameters NetworkTemplate Subnetwork for processing the coordinates inputs. branch_network : NetworkTemplate Subnetwork for processing the forcing/conditioning inputs. decoder_network : NetworkTemplate Subnetworks for converting the embedding to the output (optional). var_dim: int Number of output variables. devices: Union[str, list] Devices in which the model will be executed. product_type: str Type of product to execute in the embedding space. rescale_factors: np.ndarray Values used for rescaling the network outputs for a given order of magnitude. model_id: str Name for the model simulai/models/_pytorch_models/_deeponet.pydef __init__ ( self , trunk_network : NetworkTemplate = None , branch_network : NetworkTemplate = None , decoder_network : NetworkTemplate = None , # The decoder network is optional and considered var_dim : int = 1 , # less effective than the output reshaping alternative devices : Union [ str , list ] = \"cpu\" , product_type : str = None , rescale_factors : np . ndarray = None , model_id : str = None , use_bias : bool = False , ) -> None : \"\"\" Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Parameters ---------- trunk_network : NetworkTemplate Subnetwork for processing the coordinates inputs. branch_network : NetworkTemplate Subnetwork for processing the forcing/conditioning inputs. decoder_network : NetworkTemplate Subnetworks for converting the embedding to the output (optional). var_dim: int Number of output variables. devices: Union[str, list] Devices in which the model will be executed. product_type: str Type of product to execute in the embedding space. rescale_factors: np.ndarray Values used for rescaling the network outputs for a given order of magnitude. model_id: str Name for the model \"\"\" super ( DeepONet , self ) . __init__ ( devices = devices ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . use_bias = use_bias self . trunk_network = self . to_wrap ( entity = trunk_network , device = self . device ) self . branch_network = self . to_wrap ( entity = branch_network , device = self . device ) self . add_module ( \"trunk_network\" , self . trunk_network ) self . add_module ( \"branch_network\" , self . branch_network ) if decoder_network is not None : self . decoder_network = self . to_wrap ( entity = decoder_network , device = self . device ) self . add_module ( \"decoder_network\" , self . decoder_network ) else : self . decoder_network = decoder_network self . product_type = product_type self . model_id = model_id self . var_dim = var_dim # Rescaling factors for the output if rescale_factors is not None : assert ( len ( rescale_factors ) == var_dim ), \"The number of rescaling factors must be equal to var_dim.\" rescale_factors = torch . from_numpy ( rescale_factors . astype ( \"float32\" )) self . rescale_factors = self . to_wrap ( entity = rescale_factors , device = self . device ) else : self . rescale_factors = None # Checking up whether the output of each subnetwork are in correct shape assert self . _latent_dimension_is_correct ( self . trunk_network . output_size ), ( \"The trunk network must have\" \" one-dimensional output , \" \"but received\" f \" { self . trunk_network . output_size } \" ) assert self . _latent_dimension_is_correct ( self . branch_network . output_size ), ( \"The branch network must have\" \" one-dimensional output,\" \" but received\" f \" { self . branch_network . output_size } \" ) # If bias is being used, check whether the network outputs are compatible. if self . use_bias : print ( \"Bias is being used.\" ) self . _bias_compatibility_is_correct ( dim_trunk = self . trunk_network . output_size , dim_branch = self . branch_network . output_size ) self . bias_wrapper = self . _wrapper_bias_active else : self . bias_wrapper = self . _wrapper_bias_inactive # Using a decoder on top of the model or not if self . decoder_network is not None : self . decoder_wrapper = self . _wrapper_decoder_active else : self . decoder_wrapper = self . _wrapper_decoder_inactive # Using rescaling factors or not if rescale_factors is not None : self . rescale_wrapper = self . _wrapper_rescale_active else : self . rescale_wrapper = self . _wrapper_rescale_inactive # Checking the compatibility of the subnetworks outputs for each kind of product being employed. if self . product_type != \"dense\" : output_branch = self . branch_network . output_size output_trunk = self . trunk_network . output_size # It checks if the inner product operation can be performed. if not self . use_bias : assert output_branch == output_trunk , ( f \"The output dimensions for the sub-networks\" f \" trunk and branch must be equal but are\" f \" { output_branch } \" f \" and { output_trunk } \" ) else : print ( \"Bias compatibility was already verified.\" ) else : output_branch = self . branch_network . output_size assert not output_branch % self . var_dim , ( f \"The number of branch latent outputs must\" f \" be divisible by the number of variables,\" f \" but received { output_branch } \" f \" and { self . var_dim } \" ) self . subnetworks = [ net for net in [ self . trunk_network , self . branch_network , self . decoder_network ] if net is not None ] self . input_trunk = None self . input_branch = None self . output = None self . var_map = dict () #TODO Checking up if the input of the decoder network has the correct dimension if self . decoder_network is not None : print ( \"Decoder is being used.\" ) else : pass # Selecting the correct forward approach to be used self . _forward = self . _forward_selector_ () self . subnetworks_names = [ \"trunk\" , \"branch\" ] eval ( trunk_data = None , branch_data = None ) It uses the network to make evaluations. Parameters trunk_data : Union[np.ndarray, torch.Tensor] branch_data : Union[np.ndarray, torch.Tensor] Returns np.ndarray The result of all the hidden operations in the network. simulai/models/_pytorch_models/_deeponet.py 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 @guarantee_device def eval ( self , trunk_data : Union [ np . ndarray , torch . Tensor ] = None , branch_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> np . ndarray : \"\"\" It uses the network to make evaluations. Parameters ---------- trunk_data : Union[np.ndarray, torch.Tensor] branch_data : Union[np.ndarray, torch.Tensor] Returns ------- np.ndarray The result of all the hidden operations in the network. \"\"\" output_tensor = self . forward ( input_trunk = trunk_data , input_branch = branch_data ) return output_tensor . cpu () . detach () . numpy () eval_subnetwork ( name = None , input_data = None ) It evaluates the output of DeepONet subnetworks. Parameters str Name of the subnetwork. input_data : Union[np.ndarray, torch.Tensor] The data used as input for the subnetwork. Returns np.ndarray The evaluation performed by the subnetwork. simulai/models/_pytorch_models/_deeponet.py 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 @guarantee_device def eval_subnetwork ( self , name : str = None , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" It evaluates the output of DeepONet subnetworks. Parameters ---------- name : str Name of the subnetwork. input_data : Union[np.ndarray, torch.Tensor] The data used as input for the subnetwork. Returns ------- np.ndarray The evaluation performed by the subnetwork. \"\"\" assert ( name in self . subnetworks_names ), f \"The name { name } is not a subnetwork of { self } .\" network_to_be_used = getattr ( self , name + \"_network\" ) return network_to_be_used . forward ( input_data ) . cpu () . detach () . numpy () forward ( input_trunk = None , input_branch = None ) Wrapper forward method. Parameters input_trunk : Union[np.ndarray, torch.Tensor] input_branch : Union[np.ndarray, torch.Tensor] Returns torch.Tensor The result of all the hidden operations in the network. simulai/models/_pytorch_models/_deeponet.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 def forward ( self , input_trunk : Union [ np . ndarray , torch . Tensor ] = None , input_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : \"\"\" Wrapper forward method. Parameters ---------- input_trunk : Union[np.ndarray, torch.Tensor] input_branch : Union[np.ndarray, torch.Tensor] Returns ------- torch.Tensor The result of all the hidden operations in the network. \"\"\" # Forward method execution output_trunk = self . to_wrap ( entity = self . trunk_network . forward ( input_trunk ), device = self . device ) output_branch = self . to_wrap ( entity = self . branch_network . forward ( input_branch ), device = self . device ) # Wrappers are applied to execute user-defined operations. # When those operations are not selected, these wrappers simply # bypass the inputs. output = self . bias_wrapper ( output_trunk = output_trunk , output_branch = output_branch ) return self . rescale_wrapper ( input_data = self . decoder_wrapper ( input_data = output )) AutoencoderMLP Bases: NetworkTemplate This is an implementation of a Fully-connected AutoEncoder as Reduced Order Model; A MLP autoencoder architecture consists of two stages: --> Fully-connected encoder --> Fully connected decoder SCHEME | | | | | | Z -> | | | | | -> Z_til | | | | | | ENCODER DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderMLP ( NetworkTemplate ): \"\"\" This is an implementation of a Fully-connected AutoEncoder as Reduced Order Model; A MLP autoencoder architecture consists of two stages: --> Fully-connected encoder --> Fully connected decoder SCHEME: | | | | | | Z -> | | | | | -> Z_til | | | | | | ENCODER DECODER \"\"\" def __init__ ( self , encoder : DenseNetwork = None , decoder : DenseNetwork = None , input_dim : Optional [ int ] = None , output_dim : Optional [ int ] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\" Initialize the AutoencoderMLP network Parameters ---------- encoder : DenseNetwork The encoder network architecture. decoder : DenseNetwork The decoder network architecture. input_dim : int, optional The input dimensions of the data, by default None. output_dim : int, optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default \"cpu\". name : str, optional The name of the network, by default None. \"\"\" super ( AutoencoderMLP , self ) . __init__ ( name = name ) self . weights = list () # This option is used when no network is provided # and it uses default choices for the architectures if encoder == None and decoder == None : encoder , decoder = mlp_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , shallow = shallow , ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . shapes_dict = dict () def summary ( self ) -> None : \"\"\" Prints the summary of the network architecture \"\"\" self . encoder . summary () self . decoder . summary () def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Project the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Reconstruct the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed, by default None. Returns ------- torch.Tensor The dataset reconstructed. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Execute the complete projection/reconstruction pipeline. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input dataset, by default None. Returns ------- torch.Tensor The dataset reconstructed. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def eval_projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Evaluate the projection of the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" return self . projection ( input_data = input_data ) . detach () . numpy () __init__ ( encoder = None , decoder = None , input_dim = None , output_dim = None , latent_dim = None , activation = None , shallow = False , devices = 'cpu' , name = None ) Initialize the AutoencoderMLP network Parameters encoder : DenseNetwork The encoder network architecture. decoder : DenseNetwork The decoder network architecture. input_dim : int, optional The input dimensions of the data, by default None. output_dim : int, optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default \"cpu\". name : str, optional The name of the network, by default None. simulai/models/_pytorch_models/_autoencoder.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 def __init__ ( self , encoder : DenseNetwork = None , decoder : DenseNetwork = None , input_dim : Optional [ int ] = None , output_dim : Optional [ int ] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\" Initialize the AutoencoderMLP network Parameters ---------- encoder : DenseNetwork The encoder network architecture. decoder : DenseNetwork The decoder network architecture. input_dim : int, optional The input dimensions of the data, by default None. output_dim : int, optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default \"cpu\". name : str, optional The name of the network, by default None. \"\"\" super ( AutoencoderMLP , self ) . __init__ ( name = name ) self . weights = list () # This option is used when no network is provided # and it uses default choices for the architectures if encoder == None and decoder == None : encoder , decoder = mlp_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , shallow = shallow , ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . shapes_dict = dict () eval_projection ( input_data = None ) Evaluate the projection of the input dataset into the latent space. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns np.ndarray The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 def eval_projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Evaluate the projection of the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" return self . projection ( input_data = input_data ) . detach () . numpy () forward ( input_data = None ) Execute the complete projection/reconstruction pipeline. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input dataset, by default None. Returns torch.Tensor The dataset reconstructed. simulai/models/_pytorch_models/_autoencoder.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Execute the complete projection/reconstruction pipeline. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input dataset, by default None. Returns ------- torch.Tensor The dataset reconstructed. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed projection ( input_data = None ) Project the input dataset into the latent space. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns torch.Tensor The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Project the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent reconstruction ( input_data = None ) Reconstruct the latent dataset to the original one. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed, by default None. Returns torch.Tensor The dataset reconstructed. simulai/models/_pytorch_models/_autoencoder.py 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Reconstruct the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed, by default None. Returns ------- torch.Tensor The dataset reconstructed. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed summary () Prints the summary of the network architecture simulai/models/_pytorch_models/_autoencoder.py 122 123 124 125 126 127 def summary ( self ) -> None : \"\"\" Prints the summary of the network architecture \"\"\" self . encoder . summary () self . decoder . summary () AutoencoderCNN Bases: NetworkTemplate This is an implementation of a convolutional autoencoder as Reduced Order Model. An autoencoder architecture consists of three stages: The convolutional encoder The bottleneck stage, subdivided in: * Fully-connected encoder * Fully connected decoder * The convolutional decoder SCHEME: Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 class AutoencoderCNN ( NetworkTemplate ): \"\"\" This is an implementation of a convolutional autoencoder as Reduced Order Model. An autoencoder architecture consists of three stages: * The convolutional encoder The bottleneck stage, subdivided in: * Fully-connected encoder * Fully connected decoder * The convolutional decoder SCHEME: Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : ConvolutionalNetwork = None , bottleneck_encoder : Linear = None , bottleneck_decoder : Linear = None , decoder : ConvolutionalNetwork = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , kernel_size : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\" Initialize the AutoencoderCNN network. Parameters ---------- encoder : ConvolutionalNetwork, optional The encoder network architecture, by default None. bottleneck_encoder : Linear, optional The bottleneck encoder network architecture, by default None. bottleneck_decoder : Linear, optional The bottleneck decoder network architecture, by default None. decoder : ConvolutionalNetwork, optional The decoder network architecture, by default None. encoder_activation : str, optional The activation function used by the encoder network, by default 'relu'. input_dim : Tuple[int, ...], optional The input dimensions of the data, by default None. output_dim : Tuple[int, ...], optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. channels : int, optional The number of channels of the convolutional layers, by default None. case : str, optional The type of convolutional encoder and decoder to be used, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default 'cpu'. name : str, optional The name of the network, by default None. \"\"\" super ( AutoencoderCNN , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim ( encoder , decoder , bottleneck_encoder , bottleneck_decoder , ) = cnn_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , kernel_size = kernel_size , channels = channels , case = case , shallow = shallow , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . before_flatten_dimension = None self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : \"\"\" Prints the summary of the network architecture. Parameters ---------- input_data : np.ndarray or torch.Tensor The input dataset. input_shape : list, optional The shape of the input data. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" if verbose == True : if self . input_dim != None : input_shape = self . input_dim else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\" Project input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The dataset to be projected. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] ) -> torch . Tensor : \"\"\" Reconstruct the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The dataset to be reconstructed. Returns ------- torch.Tensor The reconstructed dataset. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\" Execute the complete projection/reconstruction pipeline. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The input dataset. Returns ------- torch.Tensor The reconstructed dataset. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Evaluate the autoencoder on the given dataset. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be evaluated, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return super () . eval ( input_data = input_data ) def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Project the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed. If not provided, uses the original input data, by default None. Returns ------- np.ndarray The reconstructed dataset. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () __init__ ( encoder = None , bottleneck_encoder = None , bottleneck_decoder = None , decoder = None , encoder_activation = 'relu' , input_dim = None , output_dim = None , latent_dim = None , kernel_size = None , activation = None , channels = None , case = None , shallow = False , devices = 'cpu' , name = None , ** kwargs ) Initialize the AutoencoderCNN network. Parameters encoder : ConvolutionalNetwork, optional The encoder network architecture, by default None. bottleneck_encoder : Linear, optional The bottleneck encoder network architecture, by default None. bottleneck_decoder : Linear, optional The bottleneck decoder network architecture, by default None. decoder : ConvolutionalNetwork, optional The decoder network architecture, by default None. encoder_activation : str, optional The activation function used by the encoder network, by default 'relu'. input_dim : Tuple[int, ...], optional The input dimensions of the data, by default None. output_dim : Tuple[int, ...], optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. channels : int, optional The number of channels of the convolutional layers, by default None. case : str, optional The type of convolutional encoder and decoder to be used, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default 'cpu'. name : str, optional The name of the network, by default None. simulai/models/_pytorch_models/_autoencoder.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 def __init__ ( self , encoder : ConvolutionalNetwork = None , bottleneck_encoder : Linear = None , bottleneck_decoder : Linear = None , decoder : ConvolutionalNetwork = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , kernel_size : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\" Initialize the AutoencoderCNN network. Parameters ---------- encoder : ConvolutionalNetwork, optional The encoder network architecture, by default None. bottleneck_encoder : Linear, optional The bottleneck encoder network architecture, by default None. bottleneck_decoder : Linear, optional The bottleneck decoder network architecture, by default None. decoder : ConvolutionalNetwork, optional The decoder network architecture, by default None. encoder_activation : str, optional The activation function used by the encoder network, by default 'relu'. input_dim : Tuple[int, ...], optional The input dimensions of the data, by default None. output_dim : Tuple[int, ...], optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. channels : int, optional The number of channels of the convolutional layers, by default None. case : str, optional The type of convolutional encoder and decoder to be used, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default 'cpu'. name : str, optional The name of the network, by default None. \"\"\" super ( AutoencoderCNN , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim ( encoder , decoder , bottleneck_encoder , bottleneck_decoder , ) = cnn_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , kernel_size = kernel_size , channels = channels , case = case , shallow = shallow , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . before_flatten_dimension = None self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () eval ( input_data = None ) Evaluate the autoencoder on the given dataset. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be evaluated, by default None. Returns np.ndarray The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Evaluate the autoencoder on the given dataset. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be evaluated, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return super () . eval ( input_data = input_data ) forward ( input_data ) Execute the complete projection/reconstruction pipeline. Parameters input_data : Union[np.ndarray, torch.Tensor] The input dataset. Returns torch.Tensor The reconstructed dataset. simulai/models/_pytorch_models/_autoencoder.py 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\" Execute the complete projection/reconstruction pipeline. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The input dataset. Returns ------- torch.Tensor The reconstructed dataset. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed project ( input_data = None ) Project the input dataset into the latent space. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns np.ndarray The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Project the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () projection ( input_data ) Project input dataset into the latent space. Parameters input_data : Union[np.ndarray, torch.Tensor] The dataset to be projected. Returns torch.Tensor The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 @as_tensor def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\" Project input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The dataset to be projected. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent reconstruct ( input_data = None ) Reconstructs the latent dataset to the original one. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed. If not provided, uses the original input data, by default None. Returns np.ndarray The reconstructed dataset. simulai/models/_pytorch_models/_autoencoder.py 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed. If not provided, uses the original input data, by default None. Returns ------- np.ndarray The reconstructed dataset. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () reconstruction ( input_data ) Reconstruct the latent dataset to the original one. Parameters input_data : Union[np.ndarray, torch.Tensor] The dataset to be reconstructed. Returns torch.Tensor The reconstructed dataset. simulai/models/_pytorch_models/_autoencoder.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 @as_tensor def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] ) -> torch . Tensor : \"\"\" Reconstruct the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The dataset to be reconstructed. Returns ------- torch.Tensor The reconstructed dataset. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed summary ( input_data = None , input_shape = None , verbose = True ) Prints the summary of the network architecture. Parameters input_data : np.ndarray or torch.Tensor The input dataset. input_shape : list, optional The shape of the input data. Returns torch.Tensor The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : \"\"\" Prints the summary of the network architecture. Parameters ---------- input_data : np.ndarray or torch.Tensor The input dataset. input_shape : list, optional The shape of the input data. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" if verbose == True : if self . input_dim != None : input_shape = self . input_dim else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) AutoencoderKoopman Bases: NetworkTemplate This is an implementation of a Koopman autoencoder as a Reduced Order Model. A Koopman autoencoder architecture consists of five stages: The convolutional encoder [Optional] Fully-connected encoder Koopman operator Fully connected decoder The convolutional decoder [Optional] SCHEME (Koopman OPERATOR) ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderKoopman ( NetworkTemplate ): \"\"\" This is an implementation of a Koopman autoencoder as a Reduced Order Model. A Koopman autoencoder architecture consists of five stages: * The convolutional encoder [Optional] * Fully-connected encoder * Koopman operator * Fully connected decoder * The convolutional decoder [Optional] SCHEME: (Koopman OPERATOR) ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , shallow : Optional [ bool ] = False , use_batch_norm : Optional [ bool ] = False , encoder_activation : str = \"relu\" , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\" Constructs a new instance of the Autoencoder Parameters ---------- encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. input_dim : Optional[Tuple[int, ...]], optional The input dimensions. Used for automatic network generation. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimensions. Used for automatic network generation. Defaults to None. latent_dim : Optional[int], optional The latent dimensions. Used for automatic network generation. Defaults to None. activation : Optional[Union[list, str]], optional The activation functions for each layer. Used for automatic network generation. Defaults to None. channels : Optional[int], optional The number of channels. Used for automatic network generation. Defaults to None. case : Optional[str], optional The type of problem. Used for automatic network generation. Defaults to None. architecture : Optional[str], optional The network architecture. Used for automatic network generation. Defaults to None. shallow : Optional[bool], optional Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. encoder_activation : str, optional The activation function for the encoder. Defaults to \"relu\". devices : Union[str, list], optional The devices to use. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderKoopman , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , ) self . encoder = encoder . to ( self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights if bottleneck_encoder is not None and bottleneck_decoder is not None : self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . K_op = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension , bias = False ) . weight , device = self . device ) self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : if verbose == True : if self . input_dim != None : input_shape = list ( self . input_dim ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () print ( f \"The Koopman Operator has shape: { self . K_op . shape } \" ) self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def _projection_with_bottleneck ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Computes the projection of the input data onto the bottleneck encoder. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The projected latent representation. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def _projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Computes the projection of the input data onto the encoder. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The projected latent representation. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent @as_tensor def _reconstruction_with_bottleneck ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Reconstructs the input data using the bottleneck decoder. Parameters ---------- input_data : Union[torch.Tensor, np.ndarray], optional The input data. Defaults to None. Returns ------- torch.Tensor The reconstructed data. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed @as_tensor def _reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Reconstructs the input data using the decoder. Parameters ---------- input_data : Union[torch.Tensor, np.ndarray], optional The input data. Defaults to None. Returns ------- torch.Tensor The reconstructed data. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def latent_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\" Evaluates the operation u^{u+m} = K^m u^{i} Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns ------- torch.Tensor The computed latent representation. \"\"\" return torch . matmul ( input_data , torch . pow ( self . K_op . T , m )) def latent_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Evaluates the operation u^{u+1} = K u^{i} Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The computed latent representation. \"\"\" return torch . matmul ( input_data , self . K_op . T ) def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Evaluates the operation \u0168 = D(E(U)) Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def reconstruction_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\" Evaluates the operation \u0168_m = D(K^m E(U)) Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns ------- torch.Tensor The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) latent_m = self . latent_forward_m ( input_data = latent , m = m ) reconstructed_m = self . reconstruction ( input_data = latent_m ) return reconstructed_m def predict ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , n_steps : int = 1 ) -> np . ndarray : \"\"\" Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. n_steps : int, optional The number of extrapolations to perform. Defaults to 1. Returns ------- np.ndarray The predicted reconstructed data. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) predictions = list () latent = self . projection ( input_data = input_data ) init_latent = latent # Extrapolating in the latent space over n_steps steps for s in range ( n_steps ): latent_s = self . latent_forward ( input_data = init_latent ) init_latent = latent_s predictions . append ( latent_s ) predictions = torch . vstack ( predictions ) reconstructed_predictions = self . reconstruction ( input_data = predictions ) return reconstructed_predictions . detach () . numpy () def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Projects the input data into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- np.ndarray The projected data. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- np.ndarray The reconstructed data. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () __init__ ( encoder = None , bottleneck_encoder = None , bottleneck_decoder = None , decoder = None , input_dim = None , output_dim = None , latent_dim = None , activation = None , channels = None , case = None , architecture = None , shallow = False , use_batch_norm = False , encoder_activation = 'relu' , devices = 'cpu' , name = None ) Constructs a new instance of the Autoencoder Parameters encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. input_dim : Optional[Tuple[int, ...]], optional The input dimensions. Used for automatic network generation. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimensions. Used for automatic network generation. Defaults to None. latent_dim : Optional[int], optional The latent dimensions. Used for automatic network generation. Defaults to None. activation : Optional[Union[list, str]], optional The activation functions for each layer. Used for automatic network generation. Defaults to None. channels : Optional[int], optional The number of channels. Used for automatic network generation. Defaults to None. case : Optional[str], optional The type of problem. Used for automatic network generation. Defaults to None. architecture : Optional[str], optional The network architecture. Used for automatic network generation. Defaults to None. shallow : Optional[bool], optional Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. encoder_activation : str, optional The activation function for the encoder. Defaults to \"relu\". devices : Union[str, list], optional The devices to use. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. simulai/models/_pytorch_models/_autoencoder.pydef __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , shallow : Optional [ bool ] = False , use_batch_norm : Optional [ bool ] = False , encoder_activation : str = \"relu\" , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\" Constructs a new instance of the Autoencoder Parameters ---------- encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. input_dim : Optional[Tuple[int, ...]], optional The input dimensions. Used for automatic network generation. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimensions. Used for automatic network generation. Defaults to None. latent_dim : Optional[int], optional The latent dimensions. Used for automatic network generation. Defaults to None. activation : Optional[Union[list, str]], optional The activation functions for each layer. Used for automatic network generation. Defaults to None. channels : Optional[int], optional The number of channels. Used for automatic network generation. Defaults to None. case : Optional[str], optional The type of problem. Used for automatic network generation. Defaults to None. architecture : Optional[str], optional The network architecture. Used for automatic network generation. Defaults to None. shallow : Optional[bool], optional Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. encoder_activation : str, optional The activation function for the encoder. Defaults to \"relu\". devices : Union[str, list], optional The devices to use. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderKoopman , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , ) self . encoder = encoder . to ( self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights if bottleneck_encoder is not None and bottleneck_decoder is not None : self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . K_op = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension , bias = False ) . weight , device = self . device ) self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () latent_forward ( input_data = None ) Evaluates the operation u^{u+1} = K u^{i} Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns torch.Tensor The computed latent representation. simulai/models/_pytorch_models/_autoencoder.py 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 def latent_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Evaluates the operation u^{u+1} = K u^{i} Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The computed latent representation. \"\"\" return torch . matmul ( input_data , self . K_op . T ) latent_forward_m ( input_data = None , m = 1 ) Evaluates the operation u^{u+m} = K^m u^{i} Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns torch.Tensor The computed latent representation. simulai/models/_pytorch_models/_autoencoder.py 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 def latent_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\" Evaluates the operation u^{u+m} = K^m u^{i} Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns ------- torch.Tensor The computed latent representation. \"\"\" return torch . matmul ( input_data , torch . pow ( self . K_op . T , m )) predict ( input_data = None , n_steps = 1 ) Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. n_steps : int, optional The number of extrapolations to perform. Defaults to 1. Returns np.ndarray The predicted reconstructed data. simulai/models/_pytorch_models/_autoencoder.py 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 def predict ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , n_steps : int = 1 ) -> np . ndarray : \"\"\" Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. n_steps : int, optional The number of extrapolations to perform. Defaults to 1. Returns ------- np.ndarray The predicted reconstructed data. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) predictions = list () latent = self . projection ( input_data = input_data ) init_latent = latent # Extrapolating in the latent space over n_steps steps for s in range ( n_steps ): latent_s = self . latent_forward ( input_data = init_latent ) init_latent = latent_s predictions . append ( latent_s ) predictions = torch . vstack ( predictions ) reconstructed_predictions = self . reconstruction ( input_data = predictions ) return reconstructed_predictions . detach () . numpy () project ( input_data = None ) Projects the input data into the latent space. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns np.ndarray The projected data. simulai/models/_pytorch_models/_autoencoder.py 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Projects the input data into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- np.ndarray The projected data. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () reconstruct ( input_data = None ) Reconstructs the input data. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns np.ndarray The reconstructed data. simulai/models/_pytorch_models/_autoencoder.py 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- np.ndarray The reconstructed data. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () reconstruction_forward ( input_data = None ) Evaluates the operation \u0168 = D(E(U)) Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns torch.Tensor The reconstructed data. simulai/models/_pytorch_models/_autoencoder.py 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Evaluates the operation \u0168 = D(E(U)) Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed reconstruction_forward_m ( input_data = None , m = 1 ) Evaluates the operation \u0168_m = D(K^m E(U)) Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns torch.Tensor The reconstructed data. simulai/models/_pytorch_models/_autoencoder.py 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 def reconstruction_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\" Evaluates the operation \u0168_m = D(K^m E(U)) Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns ------- torch.Tensor The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) latent_m = self . latent_forward_m ( input_data = latent , m = m ) reconstructed_m = self . reconstruction ( input_data = latent_m ) return reconstructed_m AutoencoderVariational Bases: NetworkTemplate This is an implementation of a Koopman autoencoder as a reduced order model. A variational autoencoder architecture consists of five stages: --> The convolutional encoder [Optional] --> Fully-connected encoder --> Gaussian noise --> Fully connected decoder --> The convolutional decoder [Optional] SCHEME Gaussian noise ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.py 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 class AutoencoderVariational ( NetworkTemplate ): r \"\"\" This is an implementation of a Koopman autoencoder as a reduced order model. A variational autoencoder architecture consists of five stages: --> The convolutional encoder [Optional] --> Fully-connected encoder --> Gaussian noise --> Fully connected decoder --> The convolutional decoder [Optional] SCHEME: Gaussian noise ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , kernel_size : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , use_batch_norm : Optional [ bool ] = False , shallow : Optional [ bool ] = False , scale : float = 1e-3 , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\" Constructor method. Parameters ---------- encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. encoder_activation : str, optional The activation function to use in the encoder. Defaults to \"relu\". input_dim : Optional[Tuple[int, ...]], optional The input dimension of the data. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimension of the data. Defaults to None. latent_dim : Optional[int], optional The size of the bottleneck layer. Defaults to None. activation : Optional[Union[list, str]], optional The activation function to use in the networks. Defaults to None. channels : Optional[int], optional The number of channels in the input data. Defaults to None. kernel_size : Optional[int] Convolutional kernel size. case : Optional[str], optional The name of the autoencoder variant. Defaults to None. architecture : Optional[str], optional The architecture of the networks. Defaults to None. shallow : Optional[bool], optional Whether to use a shallow network architecture. Defaults to False. scale : float, optional The scale of the initialization. Defaults to 1e-3. devices : Union[str, list], optional The device(s) to use for computation. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderVariational , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , kernel_size = kernel_size , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , name = self . name , ** kwargs ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . there_is_bottleneck = False # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck self . there_is_bottleneck = True else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . z_mean = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device ) self . z_log_var = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device ) self . add_module ( \"z_mean\" , self . z_mean ) self . add_module ( \"z_log_var\" , self . z_log_var ) self . weights += [ self . z_mean . weight ] self . weights += [ self . z_log_var . weight ] self . mu = None self . log_v = None self . scale = scale self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , display : bool = True , ) -> torch . Tensor : \"\"\" Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional Input data to pass through the encoder, by default None input_shape : list, optional The shape of the input data if input_data is None, by default None Returns ------- torch.Tensor The output of the autoencoder's decoder applied to the input data. Raises ------ Exception If self.input_dim is not a tuple or an integer. AssertionError If input_shape is None when input_data is None. Notes ----- The summary method calls the `summary` method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) \"\"\" if verbose == True : if self . input_dim != None : if type ( self . input_dim ) == tuple : input_shape = list ( self . input_dim ) elif type ( self . input_dim ) == int : input_shape = [ None , self . input_dim ] else : raise Exception ( f \"input_dim is expected to be tuple or int, but received { type ( self . input_dim ) } \" ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device , display = display ) if type ( self . encoder . output_size ) == tuple : self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) input_shape = self . encoder . input_size elif type ( self . encoder . output_size ) == int : input_shape = [ None , self . encoder . input_size ] else : pass if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) # Bottleneck networks is are optional if self . there_is_bottleneck : latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary ( display = display ) self . bottleneck_decoder . summary ( display = display ) bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) else : bottleneck_output = btnk_input self . decoder . summary ( input_data = bottleneck_output , device = self . device , display = display ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) # Bottleneck networks is are optional if self . there_is_bottleneck : self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def _projection_with_bottleneck ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder and bottleneck encoder to input data and returns the output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the encoder, by default None Returns ------- torch.Tensor The output of the bottleneck encoder applied to the input data. Notes ----- This function is used for projection of the input data into the bottleneck space. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._projection_with_bottleneck(input_data=input_data) \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def _projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder to input data and returns the output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the encoder, by default None Returns ------- torch.Tensor The output of the encoder applied to the input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._projection(input_data=input_data) \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent @as_tensor def _reconstruction_with_bottleneck ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Applies the bottleneck decoder and decoder to input data and returns the output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the bottleneck decoder and decoder, by default None Returns ------- torch.Tensor The output of the decoder applied to the bottleneck decoder's output. Notes ----- This function is used for reconstruction of the input data from the bottleneck space. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> bottleneck_output = autoencoder._projection_with_bottleneck(input_data=input_data) >>> output_data = autoencoder._reconstruction_with_bottleneck(input_data=bottleneck_output) \"\"\" bottleneck_output = self . encoder_activation ( ( self . bottleneck_decoder . forward ( input_data = input_data )) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed @as_tensor def _reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Applies the decoder to input data and returns the output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the decoder, by default None Returns ------- torch.Tensor The output of the decoder applied to the input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._reconstruction(input_data=input_data) \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def Mu ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the mean of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the mean, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The mean of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return self . z_mean ( latent ) . detach () . numpy () else : return self . z_mean ( latent ) def Sigma ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the standard deviation of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the standard deviation, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The standard deviation of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return torch . exp ( self . z_log_var ( latent ) / 2 ) . detach () . numpy () else : return torch . exp ( self . z_log_var ( latent ) / 2 ) def CoVariance ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , inv : bool = False , to_numpy : bool = False , ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the covariance matrix of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the covariance matrix, by default None inv : bool, optional If True, returns the inverse of the covariance matrix, by default False to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The covariance matrix (or its inverse) of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) \"\"\" if inv == False : Sigma_inv = 1 / self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma_inv ) else : Sigma = self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma ) if to_numpy == True : return covariance . detach () . numpy () else : return covariance def latent_gaussian_noisy ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Generates a noisy latent representation of the input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and generate a noisy latent representation, by default None Returns ------- torch.Tensor A noisy latent representation of the input data. Notes ----- This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) \"\"\" self . mu = self . z_mean ( input_data ) self . log_v = self . z_log_var ( input_data ) eps = self . scale * torch . autograd . Variable ( torch . randn ( * self . log_v . size ()) ) . type_as ( self . log_v ) return self . mu + torch . exp ( self . log_v / 2.0 ) * eps def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns ------- torch.Tensor The reconstructed output of the autoencoder. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) latent_noisy = self . latent_gaussian_noisy ( input_data = latent ) reconstructed = self . reconstruction ( input_data = latent_noisy ) return reconstructed def reconstruction_eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns ------- torch.Tensor The reconstructed output of the autoencoder. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) \"\"\" encoder_output = self . projection ( input_data = input_data ) latent = self . z_mean ( encoder_output ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Projects the input data onto the autoencoder's latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to project onto the autoencoder's latent space, by default None Returns ------- np.ndarray The input data projected onto the autoencoder's latent space. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) projected_data_latent = self . Mu ( input_data = input_data ) return projected_data_latent . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data using the trained autoencoder. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns ------- np.ndarray The reconstructed data. Examples -------- >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data using the mean of the encoded data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns ------- np.ndarray The reconstructed data. Examples -------- >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return self . reconstruction_eval ( input_data = input_data ) . cpu () . detach () . numpy () CoVariance ( input_data = None , inv = False , to_numpy = False ) Computes the covariance matrix of the encoded input data. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the covariance matrix, by default None inv : bool, optional If True, returns the inverse of the covariance matrix, by default False to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns Union[np.ndarray, torch.Tensor] The covariance matrix (or its inverse) of the encoded input data. Examples autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) covariance = autoencoder.CoVariance(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 def CoVariance ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , inv : bool = False , to_numpy : bool = False , ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the covariance matrix of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the covariance matrix, by default None inv : bool, optional If True, returns the inverse of the covariance matrix, by default False to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The covariance matrix (or its inverse) of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) \"\"\" if inv == False : Sigma_inv = 1 / self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma_inv ) else : Sigma = self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma ) if to_numpy == True : return covariance . detach () . numpy () else : return covariance Mu ( input_data = None , to_numpy = False ) Computes the mean of the encoded input data. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the mean, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns Union[np.ndarray, torch.Tensor] The mean of the encoded input data. Examples autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) mu = autoencoder.Mu(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 def Mu ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the mean of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the mean, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The mean of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return self . z_mean ( latent ) . detach () . numpy () else : return self . z_mean ( latent ) Sigma ( input_data = None , to_numpy = False ) Computes the standard deviation of the encoded input data. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the standard deviation, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns Union[np.ndarray, torch.Tensor] The standard deviation of the encoded input data. Examples autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) sigma = autoencoder.Sigma(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 def Sigma ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the standard deviation of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the standard deviation, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The standard deviation of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return torch . exp ( self . z_log_var ( latent ) / 2 ) . detach () . numpy () else : return torch . exp ( self . z_log_var ( latent ) / 2 ) __init__ ( encoder = None , bottleneck_encoder = None , bottleneck_decoder = None , decoder = None , encoder_activation = 'relu' , input_dim = None , output_dim = None , latent_dim = None , activation = None , channels = None , kernel_size = None , case = None , architecture = None , use_batch_norm = False , shallow = False , scale = 0.001 , devices = 'cpu' , name = None , ** kwargs ) Constructor method. Parameters encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. encoder_activation : str, optional The activation function to use in the encoder. Defaults to \"relu\". input_dim : Optional[Tuple[int, ...]], optional The input dimension of the data. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimension of the data. Defaults to None. latent_dim : Optional[int], optional The size of the bottleneck layer. Defaults to None. activation : Optional[Union[list, str]], optional The activation function to use in the networks. Defaults to None. channels : Optional[int], optional The number of channels in the input data. Defaults to None. kernel_size : Optional[int] Convolutional kernel size. case : Optional[str], optional The name of the autoencoder variant. Defaults to None. architecture : Optional[str], optional The architecture of the networks. Defaults to None. shallow : Optional[bool], optional Whether to use a shallow network architecture. Defaults to False. scale : float, optional The scale of the initialization. Defaults to 1e-3. devices : Union[str, list], optional The device(s) to use for computation. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. simulai/models/_pytorch_models/_autoencoder.py 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , kernel_size : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , use_batch_norm : Optional [ bool ] = False , shallow : Optional [ bool ] = False , scale : float = 1e-3 , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\" Constructor method. Parameters ---------- encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. encoder_activation : str, optional The activation function to use in the encoder. Defaults to \"relu\". input_dim : Optional[Tuple[int, ...]], optional The input dimension of the data. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimension of the data. Defaults to None. latent_dim : Optional[int], optional The size of the bottleneck layer. Defaults to None. activation : Optional[Union[list, str]], optional The activation function to use in the networks. Defaults to None. channels : Optional[int], optional The number of channels in the input data. Defaults to None. kernel_size : Optional[int] Convolutional kernel size. case : Optional[str], optional The name of the autoencoder variant. Defaults to None. architecture : Optional[str], optional The architecture of the networks. Defaults to None. shallow : Optional[bool], optional Whether to use a shallow network architecture. Defaults to False. scale : float, optional The scale of the initialization. Defaults to 1e-3. devices : Union[str, list], optional The device(s) to use for computation. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderVariational , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , kernel_size = kernel_size , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , name = self . name , ** kwargs ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . there_is_bottleneck = False # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck self . there_is_bottleneck = True else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . z_mean = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device ) self . z_log_var = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device ) self . add_module ( \"z_mean\" , self . z_mean ) self . add_module ( \"z_log_var\" , self . z_log_var ) self . weights += [ self . z_mean . weight ] self . weights += [ self . z_log_var . weight ] self . mu = None self . log_v = None self . scale = scale self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () eval ( input_data = None ) Reconstructs the input data using the mean of the encoded data. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns np.ndarray The reconstructed data. Examples autoencoder = Autoencoder(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) reconstructed_data = autoencoder.eval(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data using the mean of the encoded data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns ------- np.ndarray The reconstructed data. Examples -------- >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return self . reconstruction_eval ( input_data = input_data ) . cpu () . detach () . numpy () latent_gaussian_noisy ( input_data = None ) Generates a noisy latent representation of the input data. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and generate a noisy latent representation, by default None Returns torch.Tensor A noisy latent representation of the input data. Notes This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Examples autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 def latent_gaussian_noisy ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Generates a noisy latent representation of the input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and generate a noisy latent representation, by default None Returns ------- torch.Tensor A noisy latent representation of the input data. Notes ----- This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) \"\"\" self . mu = self . z_mean ( input_data ) self . log_v = self . z_log_var ( input_data ) eps = self . scale * torch . autograd . Variable ( torch . randn ( * self . log_v . size ()) ) . type_as ( self . log_v ) return self . mu + torch . exp ( self . log_v / 2.0 ) * eps project ( input_data = None ) Projects the input data onto the autoencoder's latent space. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data to project onto the autoencoder's latent space, by default None Returns np.ndarray The input data projected onto the autoencoder's latent space. Examples autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) projected_data = autoencoder.project(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Projects the input data onto the autoencoder's latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to project onto the autoencoder's latent space, by default None Returns ------- np.ndarray The input data projected onto the autoencoder's latent space. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) projected_data_latent = self . Mu ( input_data = input_data ) return projected_data_latent . cpu () . detach () . numpy () reconstruct ( input_data = None ) Reconstructs the input data using the trained autoencoder. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns np.ndarray The reconstructed data. Examples autoencoder = Autoencoder(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) reconstructed_data = autoencoder.reconstruct(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data using the trained autoencoder. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns ------- np.ndarray The reconstructed data. Examples -------- >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () reconstruction_eval ( input_data = None ) Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns torch.Tensor The reconstructed output of the autoencoder. Examples autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 def reconstruction_eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns ------- torch.Tensor The reconstructed output of the autoencoder. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) \"\"\" encoder_output = self . projection ( input_data = input_data ) latent = self . z_mean ( encoder_output ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed reconstruction_forward ( input_data = None ) Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Parameters input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns torch.Tensor The reconstructed output of the autoencoder. Examples autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns ------- torch.Tensor The reconstructed output of the autoencoder. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) latent_noisy = self . latent_gaussian_noisy ( input_data = latent ) reconstructed = self . reconstruction ( input_data = latent_noisy ) return reconstructed summary ( input_data = None , input_shape = None , verbose = True , display = True ) Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Parameters input_data : Union[np.ndarray, torch.Tensor], optional Input data to pass through the encoder, by default None input_shape : list, optional The shape of the input data if input_data is None, by default None Returns torch.Tensor The output of the autoencoder's decoder applied to the input data. Raises Exception If self.input_dim is not a tuple or an integer. AssertionError If input_shape is None when input_data is None. Notes The summary method calls the summary method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Examples autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) output_data = autoencoder.summary(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , display : bool = True , ) -> torch . Tensor : \"\"\" Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional Input data to pass through the encoder, by default None input_shape : list, optional The shape of the input data if input_data is None, by default None Returns ------- torch.Tensor The output of the autoencoder's decoder applied to the input data. Raises ------ Exception If self.input_dim is not a tuple or an integer. AssertionError If input_shape is None when input_data is None. Notes ----- The summary method calls the `summary` method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) \"\"\" if verbose == True : if self . input_dim != None : if type ( self . input_dim ) == tuple : input_shape = list ( self . input_dim ) elif type ( self . input_dim ) == int : input_shape = [ None , self . input_dim ] else : raise Exception ( f \"input_dim is expected to be tuple or int, but received { type ( self . input_dim ) } \" ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device , display = display ) if type ( self . encoder . output_size ) == tuple : self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) input_shape = self . encoder . input_size elif type ( self . encoder . output_size ) == int : input_shape = [ None , self . encoder . input_size ] else : pass if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) # Bottleneck networks is are optional if self . there_is_bottleneck : latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary ( display = display ) self . bottleneck_decoder . summary ( display = display ) bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) else : bottleneck_output = btnk_input self . decoder . summary ( input_data = bottleneck_output , device = self . device , display = display ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) # Bottleneck networks is are optional if self . there_is_bottleneck : self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self )","title":"simulai.models"},{"location":"simulai_models/#simulaimodels","text":"","title":"simulai.models"},{"location":"simulai_models/#transformer","text":"Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_transformer.pyclass Transformer ( NetworkTemplate ): def __init__ ( self , num_heads_encoder : int = 1 , num_heads_decoder : int = 1 , embed_dim_encoder : int = Union [ int , Tuple ], embed_dim_decoder : int = Union [ int , Tuple ], encoder_activation : Union [ str , torch . nn . Module ] = 'relu' , decoder_activation : Union [ str , torch . nn . Module ] = 'relu' , encoder_mlp_layer_config : dict = None , decoder_mlp_layer_config : dict = None , number_of_encoders : int = 1 , number_of_decoders : int = 1 ) -> None : \"\"\" A classical encoder-decoder transformer: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Parameters ---------- num_heads_encoder : int The number of heads for the self-attention layer of the encoder. num_heads_decoder :int The number of heads for the self-attention layer of the decoder. embed_dim_encoder : int The dimension of the embedding for the encoder. embed_dim_decoder : int The dimension of the embedding for the decoder. encoder_activation : Union[str, torch.nn.Module] The activation to be used in all the encoder layers. decoder_activation : Union[str, torch.nn.Module] The activation to be used in all the decoder layers. encoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights decoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights number_of_encoders : int The number of encoders to be used. number_of_decoders : int The number of decoders to be used. \"\"\" super ( Transformer , self ) . __init__ () self . num_heads_encoder = num_heads_encoder self . num_heads_decoder = num_heads_decoder self . embed_dim_encoder = embed_dim_encoder self . embed_dim_decoder = embed_dim_decoder self . encoder_mlp_layer_dict = encoder_mlp_layer_config self . decoder_mlp_layer_dict = decoder_mlp_layer_config self . number_of_encoders = number_of_encoders self . number_of_decoders = number_of_encoders self . encoder_activation = encoder_activation self . decoder_activation = decoder_activation self . encoder_mlp_layers_list = list () self . decoder_mlp_layers_list = list () # Creating independent copies for the MLP layers which will be used # by the multiple encoders/decoders. for e in range ( self . number_of_encoders ): self . encoder_mlp_layers_list . append ( DenseNetwork ( ** self . encoder_mlp_layer_dict ) ) for d in range ( self . number_of_decoders ): self . decoder_mlp_layers_list . append ( DenseNetwork ( ** self . decoder_mlp_layer_dict ) ) # Defining the encoder architecture self . EncoderStage = torch . nn . Sequential ( * [ BasicEncoder ( num_heads = self . num_heads_encoder , activation = self . encoder_activation , mlp_layer = self . encoder_mlp_layers_list [ e ], embed_dim = self . embed_dim_encoder ) for e in range ( self . number_of_encoders )] ) # Defining the decoder architecture self . DecoderStage = torch . nn . ModuleList ([ BasicDecoder ( num_heads = self . num_heads_decoder , activation = self . decoder_activation , mlp_layer = self . decoder_mlp_layers_list [ d ], embed_dim = self . embed_dim_decoder ) for d in range ( self . number_of_decoders ) ]) self . weights = list () for e , encoder_e in enumerate ( self . EncoderStage ): self . weights += encoder_e . weights self . add_module ( f \"encoder_ { e } \" , encoder_e ) for d , decoder_d in enumerate ( self . DecoderStage ): self . weights += decoder_d . weights self . add_module ( f \"decoder_ { d } \" , decoder_d ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Parameters ---------- input_data : Union[torch.Tensor, np.ndarray] The input dataset. Returns ------- torch.Tensor The transformer output. \"\"\" encoder_output = self . EncoderStage ( input_data ) current_input = input_data for decoder in self . DecoderStage : output = decoder ( input_data = current_input , encoder_output = encoder_output ) current_input = output return output def summary ( self ): \"\"\" It prints a general view of the architecture. \"\"\" print ( self )","title":"Transformer"},{"location":"simulai_models/#simulai.models.Transformer.__init__","text":"A classical encoder-decoder transformer: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V","title":"__init__()"},{"location":"simulai_models/#simulai.models.Transformer.__init__--parameters","text":"num_heads_encoder : int The number of heads for the self-attention layer of the encoder. num_heads_decoder :int The number of heads for the self-attention layer of the decoder. embed_dim_encoder : int The dimension of the embedding for the encoder. embed_dim_decoder : int The dimension of the embedding for the decoder. encoder_activation : Union[str, torch.nn.Module] The activation to be used in all the encoder layers. decoder_activation : Union[str, torch.nn.Module] The activation to be used in all the decoder layers. encoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights decoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights number_of_encoders : int The number of encoders to be used. number_of_decoders : int The number of decoders to be used. simulai/models/_pytorch_models/_transformer.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 def __init__ ( self , num_heads_encoder : int = 1 , num_heads_decoder : int = 1 , embed_dim_encoder : int = Union [ int , Tuple ], embed_dim_decoder : int = Union [ int , Tuple ], encoder_activation : Union [ str , torch . nn . Module ] = 'relu' , decoder_activation : Union [ str , torch . nn . Module ] = 'relu' , encoder_mlp_layer_config : dict = None , decoder_mlp_layer_config : dict = None , number_of_encoders : int = 1 , number_of_decoders : int = 1 ) -> None : \"\"\" A classical encoder-decoder transformer: U -> ( Encoder_1 -> Encoder_2 -> ... -> Encoder_N ) -> u_e (u_e, U) -> ( Decoder_1 -> Decoder_2 -> ... Decoder_N ) -> V Parameters ---------- num_heads_encoder : int The number of heads for the self-attention layer of the encoder. num_heads_decoder :int The number of heads for the self-attention layer of the decoder. embed_dim_encoder : int The dimension of the embedding for the encoder. embed_dim_decoder : int The dimension of the embedding for the decoder. encoder_activation : Union[str, torch.nn.Module] The activation to be used in all the encoder layers. decoder_activation : Union[str, torch.nn.Module] The activation to be used in all the decoder layers. encoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights decoder_mlp_layer_config : dict A configuration dictionary to instantiate the encoder MLP layer.weights number_of_encoders : int The number of encoders to be used. number_of_decoders : int The number of decoders to be used. \"\"\" super ( Transformer , self ) . __init__ () self . num_heads_encoder = num_heads_encoder self . num_heads_decoder = num_heads_decoder self . embed_dim_encoder = embed_dim_encoder self . embed_dim_decoder = embed_dim_decoder self . encoder_mlp_layer_dict = encoder_mlp_layer_config self . decoder_mlp_layer_dict = decoder_mlp_layer_config self . number_of_encoders = number_of_encoders self . number_of_decoders = number_of_encoders self . encoder_activation = encoder_activation self . decoder_activation = decoder_activation self . encoder_mlp_layers_list = list () self . decoder_mlp_layers_list = list () # Creating independent copies for the MLP layers which will be used # by the multiple encoders/decoders. for e in range ( self . number_of_encoders ): self . encoder_mlp_layers_list . append ( DenseNetwork ( ** self . encoder_mlp_layer_dict ) ) for d in range ( self . number_of_decoders ): self . decoder_mlp_layers_list . append ( DenseNetwork ( ** self . decoder_mlp_layer_dict ) ) # Defining the encoder architecture self . EncoderStage = torch . nn . Sequential ( * [ BasicEncoder ( num_heads = self . num_heads_encoder , activation = self . encoder_activation , mlp_layer = self . encoder_mlp_layers_list [ e ], embed_dim = self . embed_dim_encoder ) for e in range ( self . number_of_encoders )] ) # Defining the decoder architecture self . DecoderStage = torch . nn . ModuleList ([ BasicDecoder ( num_heads = self . num_heads_decoder , activation = self . decoder_activation , mlp_layer = self . decoder_mlp_layers_list [ d ], embed_dim = self . embed_dim_decoder ) for d in range ( self . number_of_decoders ) ]) self . weights = list () for e , encoder_e in enumerate ( self . EncoderStage ): self . weights += encoder_e . weights self . add_module ( f \"encoder_ { e } \" , encoder_e ) for d , decoder_d in enumerate ( self . DecoderStage ): self . weights += decoder_d . weights self . add_module ( f \"decoder_ { d } \" , decoder_d )","title":"Parameters"},{"location":"simulai_models/#simulai.models.Transformer.forward","text":"","title":"forward()"},{"location":"simulai_models/#simulai.models.Transformer.forward--parameters","text":"input_data : Union[torch.Tensor, np.ndarray] The input dataset.","title":"Parameters"},{"location":"simulai_models/#simulai.models.Transformer.forward--returns","text":"torch.Tensor The transformer output. simulai/models/_pytorch_models/_transformer.py 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Parameters ---------- input_data : Union[torch.Tensor, np.ndarray] The input dataset. Returns ------- torch.Tensor The transformer output. \"\"\" encoder_output = self . EncoderStage ( input_data ) current_input = input_data for decoder in self . DecoderStage : output = decoder ( input_data = current_input , encoder_output = encoder_output ) current_input = output return output","title":"Returns"},{"location":"simulai_models/#simulai.models.Transformer.summary","text":"It prints a general view of the architecture. simulai/models/_pytorch_models/_transformer.py 308 309 310 311 312 313 def summary ( self ): \"\"\" It prints a general view of the architecture. \"\"\" print ( self )","title":"summary()"},{"location":"simulai_models/#u-net","text":"Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_unet.py 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 class UNet ( NetworkTemplate ): def __init__ ( self , layers_config : Dict = None , intermediary_outputs_indices : List [ int ] = None , intermediary_inputs_indices : List [ int ] = None , encoder_extra_args : Dict = dict (), decoder_extra_args : Dict = dict ()) -> None : \"\"\" U-Net. Parameters ---------- layers_config : Dict A dictionary containing the complete configuration for the U-Net encoder and decoder. intermediary_outputs_indices : List[int] A list of indices for indicating the encoder outputs. intermediary_inputs_indices : List[int] A list of indices for indicating the decoder inputs. encoder_extra_args : Dict A dictionary containing extra arguments for the encoder. decoder_extra_args : Dict A dictionary containing extra arguments for the decoder. \"\"\" super ( UNet , self ) . __init__ () self . layers_config = layers_config self . intermediary_outputs_indices = intermediary_outputs_indices self . intermediary_inputs_indices = intermediary_inputs_indices self . layers_config_encoder = self . layers_config [ \"encoder\" ] self . layers_config_decoder = self . layers_config [ \"decoder\" ] self . encoder_activations = self . layers_config [ \"encoder_activations\" ] self . decoder_activations = self . layers_config [ \"decoder_activations\" ] self . encoder_horizontal_outputs = dict () # Configuring the encoder encoder_type = self . layers_config_encoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . encoder = CNNUnetEncoder ( layers = self . layers_config_encoder [ \"architecture\" ], activations = self . encoder_activations , intermediary_outputs_indices = self . intermediary_outputs_indices , case = \"2d\" , name = \"encoder\" , ** encoder_extra_args ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) # Configuring the decoder decoder_type = self . layers_config_decoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . decoder = CNNUnetDecoder ( layers = self . layers_config_decoder [ \"architecture\" ], activations = self . decoder_activations , intermediary_inputs_indices = self . intermediary_inputs_indices , case = \"2d\" , name = \"decoder\" , ** decoder_extra_args ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" The U-Net forward method. Parameters ---------- input_data : Union[torch.Tensor, np.ndarray], A dataset to be inputted in the CNN U-Net encoder. Returns ------- torch.Tensor The U-Net output. \"\"\" encoder_main_output , encoder_intermediary_outputs = self . encoder ( input_data = input_data ) output = self . decoder ( input_data = encoder_main_output , intermediary_encoder_outputs = encoder_intermediary_outputs ) return output def summary ( self ): \"\"\" It shows a general view of the architecture. \"\"\" print ( self )","title":"U-Net"},{"location":"simulai_models/#simulai.models.UNet.__init__","text":"U-Net.","title":"__init__()"},{"location":"simulai_models/#simulai.models.UNet.__init__--parameters","text":"layers_config : Dict A dictionary containing the complete configuration for the U-Net encoder and decoder. intermediary_outputs_indices : List[int] A list of indices for indicating the encoder outputs. intermediary_inputs_indices : List[int] A list of indices for indicating the decoder inputs. encoder_extra_args : Dict A dictionary containing extra arguments for the encoder. decoder_extra_args : Dict A dictionary containing extra arguments for the decoder. simulai/models/_pytorch_models/_unet.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 def __init__ ( self , layers_config : Dict = None , intermediary_outputs_indices : List [ int ] = None , intermediary_inputs_indices : List [ int ] = None , encoder_extra_args : Dict = dict (), decoder_extra_args : Dict = dict ()) -> None : \"\"\" U-Net. Parameters ---------- layers_config : Dict A dictionary containing the complete configuration for the U-Net encoder and decoder. intermediary_outputs_indices : List[int] A list of indices for indicating the encoder outputs. intermediary_inputs_indices : List[int] A list of indices for indicating the decoder inputs. encoder_extra_args : Dict A dictionary containing extra arguments for the encoder. decoder_extra_args : Dict A dictionary containing extra arguments for the decoder. \"\"\" super ( UNet , self ) . __init__ () self . layers_config = layers_config self . intermediary_outputs_indices = intermediary_outputs_indices self . intermediary_inputs_indices = intermediary_inputs_indices self . layers_config_encoder = self . layers_config [ \"encoder\" ] self . layers_config_decoder = self . layers_config [ \"decoder\" ] self . encoder_activations = self . layers_config [ \"encoder_activations\" ] self . decoder_activations = self . layers_config [ \"decoder_activations\" ] self . encoder_horizontal_outputs = dict () # Configuring the encoder encoder_type = self . layers_config_encoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . encoder = CNNUnetEncoder ( layers = self . layers_config_encoder [ \"architecture\" ], activations = self . encoder_activations , intermediary_outputs_indices = self . intermediary_outputs_indices , case = \"2d\" , name = \"encoder\" , ** encoder_extra_args ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) # Configuring the decoder decoder_type = self . layers_config_decoder . get ( \"type\" ) layers_config_encoder = self . layers_config_encoder . get ( \"architecture\" ) if encoder_type == \"cnn\" : self . decoder = CNNUnetDecoder ( layers = self . layers_config_decoder [ \"architecture\" ], activations = self . decoder_activations , intermediary_inputs_indices = self . intermediary_inputs_indices , case = \"2d\" , name = \"decoder\" , ** decoder_extra_args ) else : raise Exception ( f \"Option { encoder_type } is not available.\" ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder )","title":"Parameters"},{"location":"simulai_models/#simulai.models.UNet.forward","text":"The U-Net forward method.","title":"forward()"},{"location":"simulai_models/#simulai.models.UNet.forward--parameters","text":"input_data : Union[torch.Tensor, np.ndarray], A dataset to be inputted in the CNN U-Net encoder.","title":"Parameters"},{"location":"simulai_models/#simulai.models.UNet.forward--returns","text":"torch.Tensor The U-Net output. simulai/models/_pytorch_models/_unet.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 @as_tensor def forward ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" The U-Net forward method. Parameters ---------- input_data : Union[torch.Tensor, np.ndarray], A dataset to be inputted in the CNN U-Net encoder. Returns ------- torch.Tensor The U-Net output. \"\"\" encoder_main_output , encoder_intermediary_outputs = self . encoder ( input_data = input_data ) output = self . decoder ( input_data = encoder_main_output , intermediary_encoder_outputs = encoder_intermediary_outputs ) return output","title":"Returns"},{"location":"simulai_models/#simulai.models.UNet.summary","text":"It shows a general view of the architecture. simulai/models/_pytorch_models/_unet.py 294 295 296 297 298 299 def summary ( self ): \"\"\" It shows a general view of the architecture. \"\"\" print ( self )","title":"summary()"},{"location":"simulai_models/#deeponet","text":"Bases: NetworkTemplate Source code in simulai/models/_pytorch_models/_deeponet.pyclass DeepONet ( NetworkTemplate ): name = \"deeponet\" engine = \"torch\" def __init__ ( self , trunk_network : NetworkTemplate = None , branch_network : NetworkTemplate = None , decoder_network : NetworkTemplate = None , # The decoder network is optional and considered var_dim : int = 1 , # less effective than the output reshaping alternative devices : Union [ str , list ] = \"cpu\" , product_type : str = None , rescale_factors : np . ndarray = None , model_id : str = None , use_bias : bool = False , ) -> None : \"\"\" Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Parameters ---------- trunk_network : NetworkTemplate Subnetwork for processing the coordinates inputs. branch_network : NetworkTemplate Subnetwork for processing the forcing/conditioning inputs. decoder_network : NetworkTemplate Subnetworks for converting the embedding to the output (optional). var_dim: int Number of output variables. devices: Union[str, list] Devices in which the model will be executed. product_type: str Type of product to execute in the embedding space. rescale_factors: np.ndarray Values used for rescaling the network outputs for a given order of magnitude. model_id: str Name for the model \"\"\" super ( DeepONet , self ) . __init__ ( devices = devices ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . use_bias = use_bias self . trunk_network = self . to_wrap ( entity = trunk_network , device = self . device ) self . branch_network = self . to_wrap ( entity = branch_network , device = self . device ) self . add_module ( \"trunk_network\" , self . trunk_network ) self . add_module ( \"branch_network\" , self . branch_network ) if decoder_network is not None : self . decoder_network = self . to_wrap ( entity = decoder_network , device = self . device ) self . add_module ( \"decoder_network\" , self . decoder_network ) else : self . decoder_network = decoder_network self . product_type = product_type self . model_id = model_id self . var_dim = var_dim # Rescaling factors for the output if rescale_factors is not None : assert ( len ( rescale_factors ) == var_dim ), \"The number of rescaling factors must be equal to var_dim.\" rescale_factors = torch . from_numpy ( rescale_factors . astype ( \"float32\" )) self . rescale_factors = self . to_wrap ( entity = rescale_factors , device = self . device ) else : self . rescale_factors = None # Checking up whether the output of each subnetwork are in correct shape assert self . _latent_dimension_is_correct ( self . trunk_network . output_size ), ( \"The trunk network must have\" \" one-dimensional output , \" \"but received\" f \" { self . trunk_network . output_size } \" ) assert self . _latent_dimension_is_correct ( self . branch_network . output_size ), ( \"The branch network must have\" \" one-dimensional output,\" \" but received\" f \" { self . branch_network . output_size } \" ) # If bias is being used, check whether the network outputs are compatible. if self . use_bias : print ( \"Bias is being used.\" ) self . _bias_compatibility_is_correct ( dim_trunk = self . trunk_network . output_size , dim_branch = self . branch_network . output_size ) self . bias_wrapper = self . _wrapper_bias_active else : self . bias_wrapper = self . _wrapper_bias_inactive # Using a decoder on top of the model or not if self . decoder_network is not None : self . decoder_wrapper = self . _wrapper_decoder_active else : self . decoder_wrapper = self . _wrapper_decoder_inactive # Using rescaling factors or not if rescale_factors is not None : self . rescale_wrapper = self . _wrapper_rescale_active else : self . rescale_wrapper = self . _wrapper_rescale_inactive # Checking the compatibility of the subnetworks outputs for each kind of product being employed. if self . product_type != \"dense\" : output_branch = self . branch_network . output_size output_trunk = self . trunk_network . output_size # It checks if the inner product operation can be performed. if not self . use_bias : assert output_branch == output_trunk , ( f \"The output dimensions for the sub-networks\" f \" trunk and branch must be equal but are\" f \" { output_branch } \" f \" and { output_trunk } \" ) else : print ( \"Bias compatibility was already verified.\" ) else : output_branch = self . branch_network . output_size assert not output_branch % self . var_dim , ( f \"The number of branch latent outputs must\" f \" be divisible by the number of variables,\" f \" but received { output_branch } \" f \" and { self . var_dim } \" ) self . subnetworks = [ net for net in [ self . trunk_network , self . branch_network , self . decoder_network ] if net is not None ] self . input_trunk = None self . input_branch = None self . output = None self . var_map = dict () #TODO Checking up if the input of the decoder network has the correct dimension if self . decoder_network is not None : print ( \"Decoder is being used.\" ) else : pass # Selecting the correct forward approach to be used self . _forward = self . _forward_selector_ () self . subnetworks_names = [ \"trunk\" , \"branch\" ] def _latent_dimension_is_correct ( self , dim : Union [ int , tuple ]) -> bool : \"\"\" It checks if the latent dimension is consistent. Parameters ---------- dim : Union[int, tuple] Latent_space_dimension. Returns ------- bool The confirmation about the dimensionality correctness. \"\"\" if type ( dim ) == int : return True elif type ( dim ) == tuple : if len ( tuple ) == 1 : return True else : return False def _bias_compatibility_is_correct ( self , dim_trunk : Union [ int , tuple ], dim_branch : Union [ int , tuple ]) -> bool : assert dim_branch == dim_trunk + self . var_dim , ( \"When using bias, the dimension\" + \"of the branch output should be\" + \"trunk output + var_dim.\" ) def _forward_dense ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\" Forward method used when the embeddings are multiplied using a matrix-like product, it means, the trunk network outputs serve as \"interpolation basis\" for the branch outputs. Parameters ---------- output_trunk: torch.Tensor The embedding generated by the trunk network. output_branch: torch.Tensor The embedding generated by the branch network. Returns ------- torch.Tensor The product between the two embeddings. \"\"\" latent_dim = int ( output_branch . shape [ - 1 ] / self . var_dim ) output_branch_reshaped = torch . reshape ( output_branch , ( - 1 , self . var_dim , latent_dim ) ) output = torch . matmul ( output_branch_reshaped , output_trunk [ ... , None ]) output = torch . squeeze ( output ) return output def _forward_pointwise ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\" Forward method used when the embeddings are multiplied using a simple point-wise product, after that a reshaping is applied in order to produce multiple outputs. Parameters ---------- output_trunk: torch.Tensor The embedding generated by the trunk network. output_branch: torch.Tensor The embedding generated by the branch network. Returns ------- torch.Tensor The product between the two embeddings. \"\"\" latent_dim = int ( output_trunk . shape [ - 1 ] / self . var_dim ) output_trunk_reshaped = torch . reshape ( output_trunk , ( - 1 , latent_dim , self . var_dim ) ) output_branch_reshaped = torch . reshape ( output_branch , ( - 1 , latent_dim , self . var_dim ) ) output = torch . sum ( output_trunk_reshaped * output_branch_reshaped , dim =- 2 , keepdim = False ) return output def _forward_vanilla ( self , output_trunk : torch . Tensor = None , output_branch : torch . Tensor = None ) -> torch . Tensor : \"\"\" Forward method used when the embeddings are multiplied using a simple point-wise product. Parameters ---------- output_trunk: torch.Tensor The embedding generated by the trunk network. output_branch: torch.Tensor The embedding generated by the branch network. Returns ------- torch.Tensor The product between the two embeddings. \"\"\" output = torch . sum ( output_trunk * output_branch , dim =- 1 , keepdim = True ) return output def _forward_selector_ ( self ) -> callable : \"\"\" It selects the forward method to be used. Returns ------- callable: The callable corresponding to the required forward method. \"\"\" if self . var_dim > 1 : # It operates as a typical dense layer if self . product_type == \"dense\" : return self . _forward_dense # It executes an inner product by parts between the outputs # of the subnetworks branch and trunk else : return self . _forward_pointwise else : return self . _forward_vanilla @property def _var_map ( self ) -> dict : # It checks all the data arrays in self.var_map have the same # batches dimension batches_dimensions = set ([ value . shape [ 0 ] for value in self . var_map . values ()]) assert ( len ( batches_dimensions ) == 1 ), \"This dataset is not proper to apply shuffling\" dim = list ( batches_dimensions )[ 0 ] indices = np . arange ( dim ) np . random . shuffle ( indices ) var_map_shuffled = { key : value [ indices ] for key , value in self . var_map . items ()} return var_map_shuffled @property def weights ( self ) -> list : return sum ([ net . weights for net in self . subnetworks ], []) # Now, a sequence of wrappers def _wrapper_bias_inactive ( self , output_trunk : Union [ np . ndarray , torch . Tensor ] = None , output_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : output = self . _forward ( output_trunk = output_trunk , output_branch = output_branch ) return output def _wrapper_bias_active ( self , output_trunk : Union [ np . ndarray , torch . Tensor ] = None , output_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : output_branch_ = output_branch [:, : - self . var_dim ] bias = output_branch [:, - self . var_dim :] output = self . _forward ( output_trunk = output_trunk , output_branch = output_branch_ ) + bias return output def _wrapper_decoder_active ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return self . decoder_network . forward ( input_data = input_data ) def _wrapper_decoder_inactive ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data def _wrapper_rescale_active ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data * self . rescale_factors def _wrapper_rescale_inactive ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : return input_data def forward ( self , input_trunk : Union [ np . ndarray , torch . Tensor ] = None , input_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : \"\"\" Wrapper forward method. Parameters ---------- input_trunk : Union[np.ndarray, torch.Tensor] input_branch : Union[np.ndarray, torch.Tensor] Returns ------- torch.Tensor The result of all the hidden operations in the network. \"\"\" # Forward method execution output_trunk = self . to_wrap ( entity = self . trunk_network . forward ( input_trunk ), device = self . device ) output_branch = self . to_wrap ( entity = self . branch_network . forward ( input_branch ), device = self . device ) # Wrappers are applied to execute user-defined operations. # When those operations are not selected, these wrappers simply # bypass the inputs. output = self . bias_wrapper ( output_trunk = output_trunk , output_branch = output_branch ) return self . rescale_wrapper ( input_data = self . decoder_wrapper ( input_data = output )) @guarantee_device def eval ( self , trunk_data : Union [ np . ndarray , torch . Tensor ] = None , branch_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> np . ndarray : \"\"\" It uses the network to make evaluations. Parameters ---------- trunk_data : Union[np.ndarray, torch.Tensor] branch_data : Union[np.ndarray, torch.Tensor] Returns ------- np.ndarray The result of all the hidden operations in the network. \"\"\" output_tensor = self . forward ( input_trunk = trunk_data , input_branch = branch_data ) return output_tensor . cpu () . detach () . numpy () @guarantee_device def eval_subnetwork ( self , name : str = None , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" It evaluates the output of DeepONet subnetworks. Parameters ---------- name : str Name of the subnetwork. input_data : Union[np.ndarray, torch.Tensor] The data used as input for the subnetwork. Returns ------- np.ndarray The evaluation performed by the subnetwork. \"\"\" assert ( name in self . subnetworks_names ), f \"The name { name } is not a subnetwork of { self } .\" network_to_be_used = getattr ( self , name + \"_network\" ) return network_to_be_used . forward ( input_data ) . cpu () . detach () . numpy () def summary ( self ) -> None : print ( \"Trunk Network:\" ) self . trunk_network . summary () print ( \"Branch Network:\" ) self . branch_network . summary ()","title":"DeepONet"},{"location":"simulai_models/#simulai.models.DeepONet.__init__","text":"Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem.","title":"__init__()"},{"location":"simulai_models/#simulai.models.DeepONet.__init__--parameters","text":"NetworkTemplate Subnetwork for processing the coordinates inputs. branch_network : NetworkTemplate Subnetwork for processing the forcing/conditioning inputs. decoder_network : NetworkTemplate Subnetworks for converting the embedding to the output (optional). var_dim: int Number of output variables. devices: Union[str, list] Devices in which the model will be executed. product_type: str Type of product to execute in the embedding space. rescale_factors: np.ndarray Values used for rescaling the network outputs for a given order of magnitude. model_id: str Name for the model simulai/models/_pytorch_models/_deeponet.pydef __init__ ( self , trunk_network : NetworkTemplate = None , branch_network : NetworkTemplate = None , decoder_network : NetworkTemplate = None , # The decoder network is optional and considered var_dim : int = 1 , # less effective than the output reshaping alternative devices : Union [ str , list ] = \"cpu\" , product_type : str = None , rescale_factors : np . ndarray = None , model_id : str = None , use_bias : bool = False , ) -> None : \"\"\" Classical Deep Operator Network (DeepONet), a deep learning version of the Universal Approximation Theorem. Parameters ---------- trunk_network : NetworkTemplate Subnetwork for processing the coordinates inputs. branch_network : NetworkTemplate Subnetwork for processing the forcing/conditioning inputs. decoder_network : NetworkTemplate Subnetworks for converting the embedding to the output (optional). var_dim: int Number of output variables. devices: Union[str, list] Devices in which the model will be executed. product_type: str Type of product to execute in the embedding space. rescale_factors: np.ndarray Values used for rescaling the network outputs for a given order of magnitude. model_id: str Name for the model \"\"\" super ( DeepONet , self ) . __init__ ( devices = devices ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . use_bias = use_bias self . trunk_network = self . to_wrap ( entity = trunk_network , device = self . device ) self . branch_network = self . to_wrap ( entity = branch_network , device = self . device ) self . add_module ( \"trunk_network\" , self . trunk_network ) self . add_module ( \"branch_network\" , self . branch_network ) if decoder_network is not None : self . decoder_network = self . to_wrap ( entity = decoder_network , device = self . device ) self . add_module ( \"decoder_network\" , self . decoder_network ) else : self . decoder_network = decoder_network self . product_type = product_type self . model_id = model_id self . var_dim = var_dim # Rescaling factors for the output if rescale_factors is not None : assert ( len ( rescale_factors ) == var_dim ), \"The number of rescaling factors must be equal to var_dim.\" rescale_factors = torch . from_numpy ( rescale_factors . astype ( \"float32\" )) self . rescale_factors = self . to_wrap ( entity = rescale_factors , device = self . device ) else : self . rescale_factors = None # Checking up whether the output of each subnetwork are in correct shape assert self . _latent_dimension_is_correct ( self . trunk_network . output_size ), ( \"The trunk network must have\" \" one-dimensional output , \" \"but received\" f \" { self . trunk_network . output_size } \" ) assert self . _latent_dimension_is_correct ( self . branch_network . output_size ), ( \"The branch network must have\" \" one-dimensional output,\" \" but received\" f \" { self . branch_network . output_size } \" ) # If bias is being used, check whether the network outputs are compatible. if self . use_bias : print ( \"Bias is being used.\" ) self . _bias_compatibility_is_correct ( dim_trunk = self . trunk_network . output_size , dim_branch = self . branch_network . output_size ) self . bias_wrapper = self . _wrapper_bias_active else : self . bias_wrapper = self . _wrapper_bias_inactive # Using a decoder on top of the model or not if self . decoder_network is not None : self . decoder_wrapper = self . _wrapper_decoder_active else : self . decoder_wrapper = self . _wrapper_decoder_inactive # Using rescaling factors or not if rescale_factors is not None : self . rescale_wrapper = self . _wrapper_rescale_active else : self . rescale_wrapper = self . _wrapper_rescale_inactive # Checking the compatibility of the subnetworks outputs for each kind of product being employed. if self . product_type != \"dense\" : output_branch = self . branch_network . output_size output_trunk = self . trunk_network . output_size # It checks if the inner product operation can be performed. if not self . use_bias : assert output_branch == output_trunk , ( f \"The output dimensions for the sub-networks\" f \" trunk and branch must be equal but are\" f \" { output_branch } \" f \" and { output_trunk } \" ) else : print ( \"Bias compatibility was already verified.\" ) else : output_branch = self . branch_network . output_size assert not output_branch % self . var_dim , ( f \"The number of branch latent outputs must\" f \" be divisible by the number of variables,\" f \" but received { output_branch } \" f \" and { self . var_dim } \" ) self . subnetworks = [ net for net in [ self . trunk_network , self . branch_network , self . decoder_network ] if net is not None ] self . input_trunk = None self . input_branch = None self . output = None self . var_map = dict () #TODO Checking up if the input of the decoder network has the correct dimension if self . decoder_network is not None : print ( \"Decoder is being used.\" ) else : pass # Selecting the correct forward approach to be used self . _forward = self . _forward_selector_ () self . subnetworks_names = [ \"trunk\" , \"branch\" ]","title":"Parameters"},{"location":"simulai_models/#simulai.models.DeepONet.eval","text":"It uses the network to make evaluations.","title":"eval()"},{"location":"simulai_models/#simulai.models.DeepONet.eval--parameters","text":"trunk_data : Union[np.ndarray, torch.Tensor] branch_data : Union[np.ndarray, torch.Tensor]","title":"Parameters"},{"location":"simulai_models/#simulai.models.DeepONet.eval--returns","text":"np.ndarray The result of all the hidden operations in the network. simulai/models/_pytorch_models/_deeponet.py 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 @guarantee_device def eval ( self , trunk_data : Union [ np . ndarray , torch . Tensor ] = None , branch_data : Union [ np . ndarray , torch . Tensor ] = None , ) -> np . ndarray : \"\"\" It uses the network to make evaluations. Parameters ---------- trunk_data : Union[np.ndarray, torch.Tensor] branch_data : Union[np.ndarray, torch.Tensor] Returns ------- np.ndarray The result of all the hidden operations in the network. \"\"\" output_tensor = self . forward ( input_trunk = trunk_data , input_branch = branch_data ) return output_tensor . cpu () . detach () . numpy ()","title":"Returns"},{"location":"simulai_models/#simulai.models.DeepONet.eval_subnetwork","text":"It evaluates the output of DeepONet subnetworks.","title":"eval_subnetwork()"},{"location":"simulai_models/#simulai.models.DeepONet.eval_subnetwork--parameters","text":"str Name of the subnetwork. input_data : Union[np.ndarray, torch.Tensor] The data used as input for the subnetwork.","title":"Parameters"},{"location":"simulai_models/#simulai.models.DeepONet.eval_subnetwork--returns","text":"np.ndarray The evaluation performed by the subnetwork. simulai/models/_pytorch_models/_deeponet.py 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 @guarantee_device def eval_subnetwork ( self , name : str = None , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" It evaluates the output of DeepONet subnetworks. Parameters ---------- name : str Name of the subnetwork. input_data : Union[np.ndarray, torch.Tensor] The data used as input for the subnetwork. Returns ------- np.ndarray The evaluation performed by the subnetwork. \"\"\" assert ( name in self . subnetworks_names ), f \"The name { name } is not a subnetwork of { self } .\" network_to_be_used = getattr ( self , name + \"_network\" ) return network_to_be_used . forward ( input_data ) . cpu () . detach () . numpy ()","title":"Returns"},{"location":"simulai_models/#simulai.models.DeepONet.forward","text":"Wrapper forward method.","title":"forward()"},{"location":"simulai_models/#simulai.models.DeepONet.forward--parameters","text":"input_trunk : Union[np.ndarray, torch.Tensor] input_branch : Union[np.ndarray, torch.Tensor]","title":"Parameters"},{"location":"simulai_models/#simulai.models.DeepONet.forward--returns","text":"torch.Tensor The result of all the hidden operations in the network. simulai/models/_pytorch_models/_deeponet.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 def forward ( self , input_trunk : Union [ np . ndarray , torch . Tensor ] = None , input_branch : Union [ np . ndarray , torch . Tensor ] = None , ) -> torch . Tensor : \"\"\" Wrapper forward method. Parameters ---------- input_trunk : Union[np.ndarray, torch.Tensor] input_branch : Union[np.ndarray, torch.Tensor] Returns ------- torch.Tensor The result of all the hidden operations in the network. \"\"\" # Forward method execution output_trunk = self . to_wrap ( entity = self . trunk_network . forward ( input_trunk ), device = self . device ) output_branch = self . to_wrap ( entity = self . branch_network . forward ( input_branch ), device = self . device ) # Wrappers are applied to execute user-defined operations. # When those operations are not selected, these wrappers simply # bypass the inputs. output = self . bias_wrapper ( output_trunk = output_trunk , output_branch = output_branch ) return self . rescale_wrapper ( input_data = self . decoder_wrapper ( input_data = output ))","title":"Returns"},{"location":"simulai_models/#autoencodermlp","text":"Bases: NetworkTemplate This is an implementation of a Fully-connected AutoEncoder as Reduced Order Model; A MLP autoencoder architecture consists of two stages: --> Fully-connected encoder --> Fully connected decoder SCHEME | | | | | | Z -> | | | | | -> Z_til | | | | | | ENCODER DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderMLP ( NetworkTemplate ): \"\"\" This is an implementation of a Fully-connected AutoEncoder as Reduced Order Model; A MLP autoencoder architecture consists of two stages: --> Fully-connected encoder --> Fully connected decoder SCHEME: | | | | | | Z -> | | | | | -> Z_til | | | | | | ENCODER DECODER \"\"\" def __init__ ( self , encoder : DenseNetwork = None , decoder : DenseNetwork = None , input_dim : Optional [ int ] = None , output_dim : Optional [ int ] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\" Initialize the AutoencoderMLP network Parameters ---------- encoder : DenseNetwork The encoder network architecture. decoder : DenseNetwork The decoder network architecture. input_dim : int, optional The input dimensions of the data, by default None. output_dim : int, optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default \"cpu\". name : str, optional The name of the network, by default None. \"\"\" super ( AutoencoderMLP , self ) . __init__ ( name = name ) self . weights = list () # This option is used when no network is provided # and it uses default choices for the architectures if encoder == None and decoder == None : encoder , decoder = mlp_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , shallow = shallow , ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . shapes_dict = dict () def summary ( self ) -> None : \"\"\" Prints the summary of the network architecture \"\"\" self . encoder . summary () self . decoder . summary () def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Project the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Reconstruct the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed, by default None. Returns ------- torch.Tensor The dataset reconstructed. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Execute the complete projection/reconstruction pipeline. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input dataset, by default None. Returns ------- torch.Tensor The dataset reconstructed. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def eval_projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Evaluate the projection of the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" return self . projection ( input_data = input_data ) . detach () . numpy ()","title":"AutoencoderMLP"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.__init__","text":"Initialize the AutoencoderMLP network","title":"__init__()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.__init__--parameters","text":"encoder : DenseNetwork The encoder network architecture. decoder : DenseNetwork The decoder network architecture. input_dim : int, optional The input dimensions of the data, by default None. output_dim : int, optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default \"cpu\". name : str, optional The name of the network, by default None. simulai/models/_pytorch_models/_autoencoder.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 def __init__ ( self , encoder : DenseNetwork = None , decoder : DenseNetwork = None , input_dim : Optional [ int ] = None , output_dim : Optional [ int ] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\" Initialize the AutoencoderMLP network Parameters ---------- encoder : DenseNetwork The encoder network architecture. decoder : DenseNetwork The decoder network architecture. input_dim : int, optional The input dimensions of the data, by default None. output_dim : int, optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default \"cpu\". name : str, optional The name of the network, by default None. \"\"\" super ( AutoencoderMLP , self ) . __init__ ( name = name ) self . weights = list () # This option is used when no network is provided # and it uses default choices for the architectures if encoder == None and decoder == None : encoder , decoder = mlp_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , shallow = shallow , ) # Determining the kind of device to be used for allocating the # subnetworks used in the DeepONet model self . device = self . _set_device ( devices = devices ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . shapes_dict = dict ()","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.eval_projection","text":"Evaluate the projection of the input dataset into the latent space.","title":"eval_projection()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.eval_projection--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.eval_projection--returns","text":"np.ndarray The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 def eval_projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Evaluate the projection of the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" return self . projection ( input_data = input_data ) . detach () . numpy ()","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.forward","text":"Execute the complete projection/reconstruction pipeline.","title":"forward()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.forward--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input dataset, by default None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.forward--returns","text":"torch.Tensor The dataset reconstructed. simulai/models/_pytorch_models/_autoencoder.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Execute the complete projection/reconstruction pipeline. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input dataset, by default None. Returns ------- torch.Tensor The dataset reconstructed. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.projection","text":"Project the input dataset into the latent space.","title":"projection()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.projection--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.projection--returns","text":"torch.Tensor The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Project the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.reconstruction","text":"Reconstruct the latent dataset to the original one.","title":"reconstruction()"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.reconstruction--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed, by default None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.reconstruction--returns","text":"torch.Tensor The dataset reconstructed. simulai/models/_pytorch_models/_autoencoder.py 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Reconstruct the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed, by default None. Returns ------- torch.Tensor The dataset reconstructed. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderMLP.summary","text":"Prints the summary of the network architecture simulai/models/_pytorch_models/_autoencoder.py 122 123 124 125 126 127 def summary ( self ) -> None : \"\"\" Prints the summary of the network architecture \"\"\" self . encoder . summary () self . decoder . summary ()","title":"summary()"},{"location":"simulai_models/#autoencodercnn","text":"Bases: NetworkTemplate This is an implementation of a convolutional autoencoder as Reduced Order Model. An autoencoder architecture consists of three stages: The convolutional encoder The bottleneck stage, subdivided in: * Fully-connected encoder * Fully connected decoder * The convolutional decoder SCHEME: Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.pyclass AutoencoderCNN ( NetworkTemplate ): \"\"\" This is an implementation of a convolutional autoencoder as Reduced Order Model. An autoencoder architecture consists of three stages: * The convolutional encoder The bottleneck stage, subdivided in: * Fully-connected encoder * Fully connected decoder * The convolutional decoder SCHEME: Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : ConvolutionalNetwork = None , bottleneck_encoder : Linear = None , bottleneck_decoder : Linear = None , decoder : ConvolutionalNetwork = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , kernel_size : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\" Initialize the AutoencoderCNN network. Parameters ---------- encoder : ConvolutionalNetwork, optional The encoder network architecture, by default None. bottleneck_encoder : Linear, optional The bottleneck encoder network architecture, by default None. bottleneck_decoder : Linear, optional The bottleneck decoder network architecture, by default None. decoder : ConvolutionalNetwork, optional The decoder network architecture, by default None. encoder_activation : str, optional The activation function used by the encoder network, by default 'relu'. input_dim : Tuple[int, ...], optional The input dimensions of the data, by default None. output_dim : Tuple[int, ...], optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. channels : int, optional The number of channels of the convolutional layers, by default None. case : str, optional The type of convolutional encoder and decoder to be used, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default 'cpu'. name : str, optional The name of the network, by default None. \"\"\" super ( AutoencoderCNN , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim ( encoder , decoder , bottleneck_encoder , bottleneck_decoder , ) = cnn_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , kernel_size = kernel_size , channels = channels , case = case , shallow = shallow , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . before_flatten_dimension = None self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : \"\"\" Prints the summary of the network architecture. Parameters ---------- input_data : np.ndarray or torch.Tensor The input dataset. input_shape : list, optional The shape of the input data. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" if verbose == True : if self . input_dim != None : input_shape = self . input_dim else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\" Project input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The dataset to be projected. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] ) -> torch . Tensor : \"\"\" Reconstruct the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The dataset to be reconstructed. Returns ------- torch.Tensor The reconstructed dataset. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\" Execute the complete projection/reconstruction pipeline. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The input dataset. Returns ------- torch.Tensor The reconstructed dataset. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Evaluate the autoencoder on the given dataset. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be evaluated, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return super () . eval ( input_data = input_data ) def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Project the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed. If not provided, uses the original input data, by default None. Returns ------- np.ndarray The reconstructed dataset. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"AutoencoderCNN"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.__init__","text":"Initialize the AutoencoderCNN network.","title":"__init__()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.__init__--parameters","text":"encoder : ConvolutionalNetwork, optional The encoder network architecture, by default None. bottleneck_encoder : Linear, optional The bottleneck encoder network architecture, by default None. bottleneck_decoder : Linear, optional The bottleneck decoder network architecture, by default None. decoder : ConvolutionalNetwork, optional The decoder network architecture, by default None. encoder_activation : str, optional The activation function used by the encoder network, by default 'relu'. input_dim : Tuple[int, ...], optional The input dimensions of the data, by default None. output_dim : Tuple[int, ...], optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. channels : int, optional The number of channels of the convolutional layers, by default None. case : str, optional The type of convolutional encoder and decoder to be used, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default 'cpu'. name : str, optional The name of the network, by default None. simulai/models/_pytorch_models/_autoencoder.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 def __init__ ( self , encoder : ConvolutionalNetwork = None , bottleneck_encoder : Linear = None , bottleneck_decoder : Linear = None , decoder : ConvolutionalNetwork = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , kernel_size : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , shallow : Optional [ bool ] = False , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\" Initialize the AutoencoderCNN network. Parameters ---------- encoder : ConvolutionalNetwork, optional The encoder network architecture, by default None. bottleneck_encoder : Linear, optional The bottleneck encoder network architecture, by default None. bottleneck_decoder : Linear, optional The bottleneck decoder network architecture, by default None. decoder : ConvolutionalNetwork, optional The decoder network architecture, by default None. encoder_activation : str, optional The activation function used by the encoder network, by default 'relu'. input_dim : Tuple[int, ...], optional The input dimensions of the data, by default None. output_dim : Tuple[int, ...], optional The output dimensions of the data, by default None. latent_dim : int, optional The dimensions of the latent space, by default None. activation : Union[list, str], optional The activation functions used by the network, by default None. channels : int, optional The number of channels of the convolutional layers, by default None. case : str, optional The type of convolutional encoder and decoder to be used, by default None. shallow : bool, optional Whether the network should be shallow or not, by default False. devices : Union[str, list], optional The device(s) to be used for allocating subnetworks, by default 'cpu'. name : str, optional The name of the network, by default None. \"\"\" super ( AutoencoderCNN , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim ( encoder , decoder , bottleneck_encoder , bottleneck_decoder , ) = cnn_autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , kernel_size = kernel_size , channels = channels , case = case , shallow = shallow , ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . decoder = self . to_wrap ( entity = decoder , device = self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . weights += self . decoder . weights self . last_encoder_channels = None self . before_flatten_dimension = None self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict ()","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.eval","text":"Evaluate the autoencoder on the given dataset.","title":"eval()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.eval--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be evaluated, by default None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.eval--returns","text":"np.ndarray The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Evaluate the autoencoder on the given dataset. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be evaluated, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return super () . eval ( input_data = input_data )","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.forward","text":"Execute the complete projection/reconstruction pipeline.","title":"forward()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.forward--parameters","text":"input_data : Union[np.ndarray, torch.Tensor] The input dataset.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.forward--returns","text":"torch.Tensor The reconstructed dataset. simulai/models/_pytorch_models/_autoencoder.py 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 def forward ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\" Execute the complete projection/reconstruction pipeline. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The input dataset. Returns ------- torch.Tensor The reconstructed dataset. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.project","text":"Project the input dataset into the latent space.","title":"project()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.project--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.project--returns","text":"np.ndarray The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Project the input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be projected, by default None. Returns ------- np.ndarray The dataset projected over the latent space. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy ()","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.projection","text":"Project input dataset into the latent space.","title":"projection()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.projection--parameters","text":"input_data : Union[np.ndarray, torch.Tensor] The dataset to be projected.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.projection--returns","text":"torch.Tensor The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 @as_tensor def projection ( self , input_data : Union [ np . ndarray , torch . Tensor ]) -> torch . Tensor : \"\"\" Project input dataset into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The dataset to be projected. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.reconstruct","text":"Reconstructs the latent dataset to the original one.","title":"reconstruct()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.reconstruct--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed. If not provided, uses the original input data, by default None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.reconstruct--returns","text":"np.ndarray The reconstructed dataset. simulai/models/_pytorch_models/_autoencoder.py 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The dataset to be reconstructed. If not provided, uses the original input data, by default None. Returns ------- np.ndarray The reconstructed dataset. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.reconstruction","text":"Reconstruct the latent dataset to the original one.","title":"reconstruction()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.reconstruction--parameters","text":"input_data : Union[np.ndarray, torch.Tensor] The dataset to be reconstructed.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.reconstruction--returns","text":"torch.Tensor The reconstructed dataset. simulai/models/_pytorch_models/_autoencoder.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 @as_tensor def reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] ) -> torch . Tensor : \"\"\" Reconstruct the latent dataset to the original one. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor] The dataset to be reconstructed. Returns ------- torch.Tensor The reconstructed dataset. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.summary","text":"Prints the summary of the network architecture.","title":"summary()"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.summary--parameters","text":"input_data : np.ndarray or torch.Tensor The input dataset. input_shape : list, optional The shape of the input data.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderCNN.summary--returns","text":"torch.Tensor The dataset projected over the latent space. simulai/models/_pytorch_models/_autoencoder.py 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : \"\"\" Prints the summary of the network architecture. Parameters ---------- input_data : np.ndarray or torch.Tensor The input dataset. input_shape : list, optional The shape of the input data. Returns ------- torch.Tensor The dataset projected over the latent space. \"\"\" if verbose == True : if self . input_dim != None : input_shape = self . input_dim else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self )","title":"Returns"},{"location":"simulai_models/#autoencoderkoopman","text":"Bases: NetworkTemplate This is an implementation of a Koopman autoencoder as a Reduced Order Model. A Koopman autoencoder architecture consists of five stages: The convolutional encoder [Optional] Fully-connected encoder Koopman operator Fully connected decoder The convolutional decoder [Optional] SCHEME (Koopman OPERATOR) ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.py 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 class AutoencoderKoopman ( NetworkTemplate ): \"\"\" This is an implementation of a Koopman autoencoder as a Reduced Order Model. A Koopman autoencoder architecture consists of five stages: * The convolutional encoder [Optional] * Fully-connected encoder * Koopman operator * Fully connected decoder * The convolutional decoder [Optional] SCHEME: (Koopman OPERATOR) ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , shallow : Optional [ bool ] = False , use_batch_norm : Optional [ bool ] = False , encoder_activation : str = \"relu\" , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\" Constructs a new instance of the Autoencoder Parameters ---------- encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. input_dim : Optional[Tuple[int, ...]], optional The input dimensions. Used for automatic network generation. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimensions. Used for automatic network generation. Defaults to None. latent_dim : Optional[int], optional The latent dimensions. Used for automatic network generation. Defaults to None. activation : Optional[Union[list, str]], optional The activation functions for each layer. Used for automatic network generation. Defaults to None. channels : Optional[int], optional The number of channels. Used for automatic network generation. Defaults to None. case : Optional[str], optional The type of problem. Used for automatic network generation. Defaults to None. architecture : Optional[str], optional The network architecture. Used for automatic network generation. Defaults to None. shallow : Optional[bool], optional Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. encoder_activation : str, optional The activation function for the encoder. Defaults to \"relu\". devices : Union[str, list], optional The devices to use. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderKoopman , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , ) self . encoder = encoder . to ( self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights if bottleneck_encoder is not None and bottleneck_decoder is not None : self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . K_op = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension , bias = False ) . weight , device = self . device ) self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , ) -> torch . Tensor : if verbose == True : if self . input_dim != None : input_shape = list ( self . input_dim ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device ) self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape = self . encoder . input_size input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary () print ( f \"The Koopman Operator has shape: { self . K_op . shape } \" ) self . bottleneck_decoder . summary () bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) self . decoder . summary ( input_data = bottleneck_output , device = self . device ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def _projection_with_bottleneck ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Computes the projection of the input data onto the bottleneck encoder. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The projected latent representation. \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def _projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Computes the projection of the input data onto the encoder. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The projected latent representation. \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent @as_tensor def _reconstruction_with_bottleneck ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Reconstructs the input data using the bottleneck decoder. Parameters ---------- input_data : Union[torch.Tensor, np.ndarray], optional The input data. Defaults to None. Returns ------- torch.Tensor The reconstructed data. \"\"\" bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = input_data ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed @as_tensor def _reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Reconstructs the input data using the decoder. Parameters ---------- input_data : Union[torch.Tensor, np.ndarray], optional The input data. Defaults to None. Returns ------- torch.Tensor The reconstructed data. \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def latent_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\" Evaluates the operation u^{u+m} = K^m u^{i} Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns ------- torch.Tensor The computed latent representation. \"\"\" return torch . matmul ( input_data , torch . pow ( self . K_op . T , m )) def latent_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Evaluates the operation u^{u+1} = K u^{i} Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The computed latent representation. \"\"\" return torch . matmul ( input_data , self . K_op . T ) def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Evaluates the operation \u0168 = D(E(U)) Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def reconstruction_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\" Evaluates the operation \u0168_m = D(K^m E(U)) Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns ------- torch.Tensor The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) latent_m = self . latent_forward_m ( input_data = latent , m = m ) reconstructed_m = self . reconstruction ( input_data = latent_m ) return reconstructed_m def predict ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , n_steps : int = 1 ) -> np . ndarray : \"\"\" Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. n_steps : int, optional The number of extrapolations to perform. Defaults to 1. Returns ------- np.ndarray The predicted reconstructed data. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) predictions = list () latent = self . projection ( input_data = input_data ) init_latent = latent # Extrapolating in the latent space over n_steps steps for s in range ( n_steps ): latent_s = self . latent_forward ( input_data = init_latent ) init_latent = latent_s predictions . append ( latent_s ) predictions = torch . vstack ( predictions ) reconstructed_predictions = self . reconstruction ( input_data = predictions ) return reconstructed_predictions . detach () . numpy () def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Projects the input data into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- np.ndarray The projected data. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- np.ndarray The reconstructed data. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"AutoencoderKoopman"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.__init__","text":"Constructs a new instance of the Autoencoder","title":"__init__()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.__init__--parameters","text":"encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. input_dim : Optional[Tuple[int, ...]], optional The input dimensions. Used for automatic network generation. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimensions. Used for automatic network generation. Defaults to None. latent_dim : Optional[int], optional The latent dimensions. Used for automatic network generation. Defaults to None. activation : Optional[Union[list, str]], optional The activation functions for each layer. Used for automatic network generation. Defaults to None. channels : Optional[int], optional The number of channels. Used for automatic network generation. Defaults to None. case : Optional[str], optional The type of problem. Used for automatic network generation. Defaults to None. architecture : Optional[str], optional The network architecture. Used for automatic network generation. Defaults to None. shallow : Optional[bool], optional Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. encoder_activation : str, optional The activation function for the encoder. Defaults to \"relu\". devices : Union[str, list], optional The devices to use. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. simulai/models/_pytorch_models/_autoencoder.pydef __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , shallow : Optional [ bool ] = False , use_batch_norm : Optional [ bool ] = False , encoder_activation : str = \"relu\" , devices : Union [ str , list ] = \"cpu\" , name : str = None , ) -> None : \"\"\" Constructs a new instance of the Autoencoder Parameters ---------- encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. input_dim : Optional[Tuple[int, ...]], optional The input dimensions. Used for automatic network generation. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimensions. Used for automatic network generation. Defaults to None. latent_dim : Optional[int], optional The latent dimensions. Used for automatic network generation. Defaults to None. activation : Optional[Union[list, str]], optional The activation functions for each layer. Used for automatic network generation. Defaults to None. channels : Optional[int], optional The number of channels. Used for automatic network generation. Defaults to None. case : Optional[str], optional The type of problem. Used for automatic network generation. Defaults to None. architecture : Optional[str], optional The network architecture. Used for automatic network generation. Defaults to None. shallow : Optional[bool], optional Whether to use shallow or deep network. Used for automatic network generation. Defaults to False. encoder_activation : str, optional The activation function for the encoder. Defaults to \"relu\". devices : Union[str, list], optional The devices to use. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderKoopman , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , ) self . encoder = encoder . to ( self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights if bottleneck_encoder is not None and bottleneck_decoder is not None : self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . K_op = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension , bias = False ) . weight , device = self . device ) self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict ()","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.latent_forward","text":"Evaluates the operation u^{u+1} = K u^{i}","title":"latent_forward()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.latent_forward--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.latent_forward--returns","text":"torch.Tensor The computed latent representation. simulai/models/_pytorch_models/_autoencoder.py 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 def latent_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Evaluates the operation u^{u+1} = K u^{i} Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The computed latent representation. \"\"\" return torch . matmul ( input_data , self . K_op . T )","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.latent_forward_m","text":"Evaluates the operation u^{u+m} = K^m u^{i}","title":"latent_forward_m()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.latent_forward_m--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.latent_forward_m--returns","text":"torch.Tensor The computed latent representation. simulai/models/_pytorch_models/_autoencoder.py 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 def latent_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\" Evaluates the operation u^{u+m} = K^m u^{i} Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns ------- torch.Tensor The computed latent representation. \"\"\" return torch . matmul ( input_data , torch . pow ( self . K_op . T , m ))","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.predict","text":"Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space.","title":"predict()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.predict--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. n_steps : int, optional The number of extrapolations to perform. Defaults to 1.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.predict--returns","text":"np.ndarray The predicted reconstructed data. simulai/models/_pytorch_models/_autoencoder.py 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 def predict ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , n_steps : int = 1 ) -> np . ndarray : \"\"\" Predicts the reconstructed data for the input data after n_steps extrapolation in the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. n_steps : int, optional The number of extrapolations to perform. Defaults to 1. Returns ------- np.ndarray The predicted reconstructed data. \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) predictions = list () latent = self . projection ( input_data = input_data ) init_latent = latent # Extrapolating in the latent space over n_steps steps for s in range ( n_steps ): latent_s = self . latent_forward ( input_data = init_latent ) init_latent = latent_s predictions . append ( latent_s ) predictions = torch . vstack ( predictions ) reconstructed_predictions = self . reconstruction ( input_data = predictions ) return reconstructed_predictions . detach () . numpy ()","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.project","text":"Projects the input data into the latent space.","title":"project()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.project--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.project--returns","text":"np.ndarray The projected data. simulai/models/_pytorch_models/_autoencoder.py 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Projects the input data into the latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- np.ndarray The projected data. \"\"\" projected_data = self . projection ( input_data = input_data ) return projected_data . cpu () . detach () . numpy ()","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruct","text":"Reconstructs the input data.","title":"reconstruct()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruct--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruct--returns","text":"np.ndarray The reconstructed data. simulai/models/_pytorch_models/_autoencoder.py 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- np.ndarray The reconstructed data. \"\"\" reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruction_forward","text":"Evaluates the operation \u0168 = D(E(U))","title":"reconstruction_forward()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruction_forward--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruction_forward--returns","text":"torch.Tensor The reconstructed data. simulai/models/_pytorch_models/_autoencoder.py 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Evaluates the operation \u0168 = D(E(U)) Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. Returns ------- torch.Tensor The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruction_forward_m","text":"Evaluates the operation \u0168_m = D(K^m E(U))","title":"reconstruction_forward_m()"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruction_forward_m--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1.","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderKoopman.reconstruction_forward_m--returns","text":"torch.Tensor The reconstructed data. simulai/models/_pytorch_models/_autoencoder.py 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 def reconstruction_forward_m ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , m : int = 1 ) -> torch . Tensor : \"\"\" Evaluates the operation \u0168_m = D(K^m E(U)) Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data. Defaults to None. m : int, optional The number of Koopman iterations. Defaults to 1. Returns ------- torch.Tensor The reconstructed data. \"\"\" latent = self . projection ( input_data = input_data ) latent_m = self . latent_forward_m ( input_data = latent , m = m ) reconstructed_m = self . reconstruction ( input_data = latent_m ) return reconstructed_m","title":"Returns"},{"location":"simulai_models/#autoencodervariational","text":"Bases: NetworkTemplate This is an implementation of a Koopman autoencoder as a reduced order model. A variational autoencoder architecture consists of five stages: --> The convolutional encoder [Optional] --> Fully-connected encoder --> Gaussian noise --> Fully connected decoder --> The convolutional decoder [Optional] SCHEME Gaussian noise ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER Source code in simulai/models/_pytorch_models/_autoencoder.py 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 class AutoencoderVariational ( NetworkTemplate ): r \"\"\" This is an implementation of a Koopman autoencoder as a reduced order model. A variational autoencoder architecture consists of five stages: --> The convolutional encoder [Optional] --> Fully-connected encoder --> Gaussian noise --> Fully connected decoder --> The convolutional decoder [Optional] SCHEME: Gaussian noise ^ | | | | | | | | Z -> [Conv] -> [Conv] -> ... [Conv] -> | | | - | | | -> [Conv.T] -> [Conv.T] -> ... [Conv.T] -> Z_til | | | | | | ENCODER DENSE BOTTLENECK DECODER \"\"\" def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , kernel_size : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , use_batch_norm : Optional [ bool ] = False , shallow : Optional [ bool ] = False , scale : float = 1e-3 , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\" Constructor method. Parameters ---------- encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. encoder_activation : str, optional The activation function to use in the encoder. Defaults to \"relu\". input_dim : Optional[Tuple[int, ...]], optional The input dimension of the data. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimension of the data. Defaults to None. latent_dim : Optional[int], optional The size of the bottleneck layer. Defaults to None. activation : Optional[Union[list, str]], optional The activation function to use in the networks. Defaults to None. channels : Optional[int], optional The number of channels in the input data. Defaults to None. kernel_size : Optional[int] Convolutional kernel size. case : Optional[str], optional The name of the autoencoder variant. Defaults to None. architecture : Optional[str], optional The architecture of the networks. Defaults to None. shallow : Optional[bool], optional Whether to use a shallow network architecture. Defaults to False. scale : float, optional The scale of the initialization. Defaults to 1e-3. devices : Union[str, list], optional The device(s) to use for computation. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderVariational , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , kernel_size = kernel_size , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , name = self . name , ** kwargs ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . there_is_bottleneck = False # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck self . there_is_bottleneck = True else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . z_mean = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device ) self . z_log_var = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device ) self . add_module ( \"z_mean\" , self . z_mean ) self . add_module ( \"z_log_var\" , self . z_log_var ) self . weights += [ self . z_mean . weight ] self . weights += [ self . z_log_var . weight ] self . mu = None self . log_v = None self . scale = scale self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict () def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , display : bool = True , ) -> torch . Tensor : \"\"\" Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional Input data to pass through the encoder, by default None input_shape : list, optional The shape of the input data if input_data is None, by default None Returns ------- torch.Tensor The output of the autoencoder's decoder applied to the input data. Raises ------ Exception If self.input_dim is not a tuple or an integer. AssertionError If input_shape is None when input_data is None. Notes ----- The summary method calls the `summary` method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) \"\"\" if verbose == True : if self . input_dim != None : if type ( self . input_dim ) == tuple : input_shape = list ( self . input_dim ) elif type ( self . input_dim ) == int : input_shape = [ None , self . input_dim ] else : raise Exception ( f \"input_dim is expected to be tuple or int, but received { type ( self . input_dim ) } \" ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device , display = display ) if type ( self . encoder . output_size ) == tuple : self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) input_shape = self . encoder . input_size elif type ( self . encoder . output_size ) == int : input_shape = [ None , self . encoder . input_size ] else : pass if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) # Bottleneck networks is are optional if self . there_is_bottleneck : latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary ( display = display ) self . bottleneck_decoder . summary ( display = display ) bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) else : bottleneck_output = btnk_input self . decoder . summary ( input_data = bottleneck_output , device = self . device , display = display ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) # Bottleneck networks is are optional if self . there_is_bottleneck : self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self ) @as_tensor def _projection_with_bottleneck ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder and bottleneck encoder to input data and returns the output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the encoder, by default None Returns ------- torch.Tensor The output of the bottleneck encoder applied to the input data. Notes ----- This function is used for projection of the input data into the bottleneck space. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._projection_with_bottleneck(input_data=input_data) \"\"\" btnk_input = self . encoder . forward ( input_data = input_data ) self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( self . before_flatten_dimension ))) latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) return latent @as_tensor def _projection ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder to input data and returns the output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the encoder, by default None Returns ------- torch.Tensor The output of the encoder applied to the input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._projection(input_data=input_data) \"\"\" latent = self . encoder . forward ( input_data = input_data ) return latent @as_tensor def _reconstruction_with_bottleneck ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Applies the bottleneck decoder and decoder to input data and returns the output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the bottleneck decoder and decoder, by default None Returns ------- torch.Tensor The output of the decoder applied to the bottleneck decoder's output. Notes ----- This function is used for reconstruction of the input data from the bottleneck space. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> bottleneck_output = autoencoder._projection_with_bottleneck(input_data=input_data) >>> output_data = autoencoder._reconstruction_with_bottleneck(input_data=bottleneck_output) \"\"\" bottleneck_output = self . encoder_activation ( ( self . bottleneck_decoder . forward ( input_data = input_data )) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 ,) + self . before_flatten_dimension ) reconstructed = self . decoder . forward ( input_data = bottleneck_output ) return reconstructed @as_tensor def _reconstruction ( self , input_data : Union [ torch . Tensor , np . ndarray ] = None ) -> torch . Tensor : \"\"\" Applies the decoder to input data and returns the output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the decoder, by default None Returns ------- torch.Tensor The output of the decoder applied to the input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder._reconstruction(input_data=input_data) \"\"\" reconstructed = self . decoder . forward ( input_data = input_data ) return reconstructed def Mu ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the mean of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the mean, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The mean of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return self . z_mean ( latent ) . detach () . numpy () else : return self . z_mean ( latent ) def Sigma ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the standard deviation of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the standard deviation, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The standard deviation of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return torch . exp ( self . z_log_var ( latent ) / 2 ) . detach () . numpy () else : return torch . exp ( self . z_log_var ( latent ) / 2 ) def CoVariance ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , inv : bool = False , to_numpy : bool = False , ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the covariance matrix of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the covariance matrix, by default None inv : bool, optional If True, returns the inverse of the covariance matrix, by default False to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The covariance matrix (or its inverse) of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) \"\"\" if inv == False : Sigma_inv = 1 / self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma_inv ) else : Sigma = self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma ) if to_numpy == True : return covariance . detach () . numpy () else : return covariance def latent_gaussian_noisy ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Generates a noisy latent representation of the input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and generate a noisy latent representation, by default None Returns ------- torch.Tensor A noisy latent representation of the input data. Notes ----- This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) \"\"\" self . mu = self . z_mean ( input_data ) self . log_v = self . z_log_var ( input_data ) eps = self . scale * torch . autograd . Variable ( torch . randn ( * self . log_v . size ()) ) . type_as ( self . log_v ) return self . mu + torch . exp ( self . log_v / 2.0 ) * eps def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns ------- torch.Tensor The reconstructed output of the autoencoder. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) latent_noisy = self . latent_gaussian_noisy ( input_data = latent ) reconstructed = self . reconstruction ( input_data = latent_noisy ) return reconstructed def reconstruction_eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns ------- torch.Tensor The reconstructed output of the autoencoder. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) \"\"\" encoder_output = self . projection ( input_data = input_data ) latent = self . z_mean ( encoder_output ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Projects the input data onto the autoencoder's latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to project onto the autoencoder's latent space, by default None Returns ------- np.ndarray The input data projected onto the autoencoder's latent space. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) projected_data_latent = self . Mu ( input_data = input_data ) return projected_data_latent . cpu () . detach () . numpy () def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data using the trained autoencoder. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns ------- np.ndarray The reconstructed data. Examples -------- >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy () def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data using the mean of the encoded data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns ------- np.ndarray The reconstructed data. Examples -------- >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return self . reconstruction_eval ( input_data = input_data ) . cpu () . detach () . numpy ()","title":"AutoencoderVariational"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.CoVariance","text":"Computes the covariance matrix of the encoded input data.","title":"CoVariance()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.CoVariance--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the covariance matrix, by default None inv : bool, optional If True, returns the inverse of the covariance matrix, by default False to_numpy : bool, optional If True, returns the result as a NumPy array, by default False","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.CoVariance--returns","text":"Union[np.ndarray, torch.Tensor] The covariance matrix (or its inverse) of the encoded input data.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.CoVariance--examples","text":"autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) covariance = autoencoder.CoVariance(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 def CoVariance ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , inv : bool = False , to_numpy : bool = False , ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the covariance matrix of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the covariance matrix, by default None inv : bool, optional If True, returns the inverse of the covariance matrix, by default False to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The covariance matrix (or its inverse) of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> covariance = autoencoder.CoVariance(input_data=input_data) \"\"\" if inv == False : Sigma_inv = 1 / self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma_inv ) else : Sigma = self . Sigma ( input_data = input_data ) covariance = torch . diag_embed ( Sigma ) if to_numpy == True : return covariance . detach () . numpy () else : return covariance","title":"Examples"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Mu","text":"Computes the mean of the encoded input data.","title":"Mu()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Mu--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the mean, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Mu--returns","text":"Union[np.ndarray, torch.Tensor] The mean of the encoded input data.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Mu--examples","text":"autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) mu = autoencoder.Mu(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 def Mu ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the mean of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the mean, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The mean of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> mu = autoencoder.Mu(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return self . z_mean ( latent ) . detach () . numpy () else : return self . z_mean ( latent )","title":"Examples"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Sigma","text":"Computes the standard deviation of the encoded input data.","title":"Sigma()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Sigma--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the standard deviation, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Sigma--returns","text":"Union[np.ndarray, torch.Tensor] The standard deviation of the encoded input data.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.Sigma--examples","text":"autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) sigma = autoencoder.Sigma(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 def Sigma ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , to_numpy : bool = False ) -> Union [ np . ndarray , torch . Tensor ]: \"\"\" Computes the standard deviation of the encoded input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and compute the standard deviation, by default None to_numpy : bool, optional If True, returns the result as a NumPy array, by default False Returns ------- Union[np.ndarray, torch.Tensor] The standard deviation of the encoded input data. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> sigma = autoencoder.Sigma(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) if to_numpy == True : return torch . exp ( self . z_log_var ( latent ) / 2 ) . detach () . numpy () else : return torch . exp ( self . z_log_var ( latent ) / 2 )","title":"Examples"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.__init__","text":"Constructor method.","title":"__init__()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.__init__--parameters","text":"encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. encoder_activation : str, optional The activation function to use in the encoder. Defaults to \"relu\". input_dim : Optional[Tuple[int, ...]], optional The input dimension of the data. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimension of the data. Defaults to None. latent_dim : Optional[int], optional The size of the bottleneck layer. Defaults to None. activation : Optional[Union[list, str]], optional The activation function to use in the networks. Defaults to None. channels : Optional[int], optional The number of channels in the input data. Defaults to None. kernel_size : Optional[int] Convolutional kernel size. case : Optional[str], optional The name of the autoencoder variant. Defaults to None. architecture : Optional[str], optional The architecture of the networks. Defaults to None. shallow : Optional[bool], optional Whether to use a shallow network architecture. Defaults to False. scale : float, optional The scale of the initialization. Defaults to 1e-3. devices : Union[str, list], optional The device(s) to use for computation. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. simulai/models/_pytorch_models/_autoencoder.py 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 def __init__ ( self , encoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , bottleneck_encoder : Optional [ Union [ Linear , DenseNetwork ]] = None , bottleneck_decoder : Optional [ Union [ Linear , DenseNetwork ]] = None , decoder : Union [ ConvolutionalNetwork , DenseNetwork ] = None , encoder_activation : str = \"relu\" , input_dim : Optional [ Tuple [ int , ... ]] = None , output_dim : Optional [ Tuple [ int , ... ]] = None , latent_dim : Optional [ int ] = None , activation : Optional [ Union [ list , str ]] = None , channels : Optional [ int ] = None , kernel_size : Optional [ int ] = None , case : Optional [ str ] = None , architecture : Optional [ str ] = None , use_batch_norm : Optional [ bool ] = False , shallow : Optional [ bool ] = False , scale : float = 1e-3 , devices : Union [ str , list ] = \"cpu\" , name : str = None , ** kwargs , ) -> None : \"\"\" Constructor method. Parameters ---------- encoder : Union[ConvolutionalNetwork, DenseNetwork], optional The encoder network. Defaults to None. bottleneck_encoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck encoder network. Defaults to None. bottleneck_decoder : Optional[Union[Linear, DenseNetwork]], optional The bottleneck decoder network. Defaults to None. decoder : Union[ConvolutionalNetwork, DenseNetwork], optional The decoder network. Defaults to None. encoder_activation : str, optional The activation function to use in the encoder. Defaults to \"relu\". input_dim : Optional[Tuple[int, ...]], optional The input dimension of the data. Defaults to None. output_dim : Optional[Tuple[int, ...]], optional The output dimension of the data. Defaults to None. latent_dim : Optional[int], optional The size of the bottleneck layer. Defaults to None. activation : Optional[Union[list, str]], optional The activation function to use in the networks. Defaults to None. channels : Optional[int], optional The number of channels in the input data. Defaults to None. kernel_size : Optional[int] Convolutional kernel size. case : Optional[str], optional The name of the autoencoder variant. Defaults to None. architecture : Optional[str], optional The architecture of the networks. Defaults to None. shallow : Optional[bool], optional Whether to use a shallow network architecture. Defaults to False. scale : float, optional The scale of the initialization. Defaults to 1e-3. devices : Union[str, list], optional The device(s) to use for computation. Defaults to \"cpu\". name : str, optional The name of the autoencoder. Defaults to None. \"\"\" super ( AutoencoderVariational , self ) . __init__ ( name = name ) self . weights = list () # Determining the kind of device to be used for allocating the # subnetworks self . device = self . _set_device ( devices = devices ) self . input_dim = None # If not network is provided, the automatic generation # pipeline is activated. if all ( [ isn == None for isn in [ encoder , decoder , bottleneck_encoder , bottleneck_decoder ] ] ): self . input_dim = input_dim encoder , decoder , bottleneck_encoder , bottleneck_decoder = autoencoder_auto ( input_dim = input_dim , latent_dim = latent_dim , output_dim = output_dim , activation = activation , channels = channels , kernel_size = kernel_size , architecture = architecture , case = case , shallow = shallow , use_batch_norm = use_batch_norm , name = self . name , ** kwargs ) self . encoder = self . to_wrap ( entity = encoder , device = self . device ) self . decoder = decoder . to ( self . device ) self . add_module ( \"encoder\" , self . encoder ) self . add_module ( \"decoder\" , self . decoder ) self . weights += self . encoder . weights self . weights += self . decoder . weights self . there_is_bottleneck = False # These subnetworks are optional if bottleneck_encoder is not None and bottleneck_decoder is not None : self . bottleneck_encoder = self . to_wrap ( entity = bottleneck_encoder , device = self . device ) self . bottleneck_decoder = self . to_wrap ( entity = bottleneck_decoder , device = self . device ) self . add_module ( \"bottleneck_encoder\" , self . bottleneck_encoder ) self . add_module ( \"bottleneck_decoder\" , self . bottleneck_decoder ) self . weights += self . bottleneck_encoder . weights self . weights += self . bottleneck_decoder . weights self . projection = self . _projection_with_bottleneck self . reconstruction = self . _reconstruction_with_bottleneck self . there_is_bottleneck = True else : self . projection = self . _projection self . reconstruction = self . _reconstruction self . last_encoder_channels = None self . before_flatten_dimension = None self . latent_dimension = None if bottleneck_encoder is not None : self . latent_dimension = bottleneck_encoder . output_size else : self . latent_dimension = self . encoder . output_size self . z_mean = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device ) self . z_log_var = self . to_wrap ( entity = torch . nn . Linear ( self . latent_dimension , self . latent_dimension ), device = self . device ) self . add_module ( \"z_mean\" , self . z_mean ) self . add_module ( \"z_log_var\" , self . z_log_var ) self . weights += [ self . z_mean . weight ] self . weights += [ self . z_log_var . weight ] self . mu = None self . log_v = None self . scale = scale self . encoder_activation = self . _get_operation ( operation = encoder_activation ) self . shapes_dict = dict ()","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.eval","text":"Reconstructs the input data using the mean of the encoded data.","title":"eval()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.eval--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.eval--returns","text":"np.ndarray The reconstructed data.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.eval--examples","text":"autoencoder = Autoencoder(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) reconstructed_data = autoencoder.eval(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 def eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data using the mean of the encoded data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns ------- np.ndarray The reconstructed data. Examples -------- >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.eval(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) return self . reconstruction_eval ( input_data = input_data ) . cpu () . detach () . numpy ()","title":"Examples"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.latent_gaussian_noisy","text":"Generates a noisy latent representation of the input data.","title":"latent_gaussian_noisy()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.latent_gaussian_noisy--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and generate a noisy latent representation, by default None","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.latent_gaussian_noisy--returns","text":"torch.Tensor A noisy latent representation of the input data.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.latent_gaussian_noisy--notes","text":"This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation.","title":"Notes"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.latent_gaussian_noisy--examples","text":"autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 def latent_gaussian_noisy ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Generates a noisy latent representation of the input data. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to encode and generate a noisy latent representation, by default None Returns ------- torch.Tensor A noisy latent representation of the input data. Notes ----- This function adds Gaussian noise to the mean and standard deviation of the encoded input data to generate a noisy latent representation. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> noisy_latent = autoencoder.latent_gaussian_noisy(input_data=input_data) \"\"\" self . mu = self . z_mean ( input_data ) self . log_v = self . z_log_var ( input_data ) eps = self . scale * torch . autograd . Variable ( torch . randn ( * self . log_v . size ()) ) . type_as ( self . log_v ) return self . mu + torch . exp ( self . log_v / 2.0 ) * eps","title":"Examples"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.project","text":"Projects the input data onto the autoencoder's latent space.","title":"project()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.project--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data to project onto the autoencoder's latent space, by default None","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.project--returns","text":"np.ndarray The input data projected onto the autoencoder's latent space.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.project--examples","text":"autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) projected_data = autoencoder.project(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 def project ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Projects the input data onto the autoencoder's latent space. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to project onto the autoencoder's latent space, by default None Returns ------- np.ndarray The input data projected onto the autoencoder's latent space. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> projected_data = autoencoder.project(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) projected_data_latent = self . Mu ( input_data = input_data ) return projected_data_latent . cpu () . detach () . numpy ()","title":"Examples"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruct","text":"Reconstructs the input data using the trained autoencoder.","title":"reconstruct()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruct--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruct--returns","text":"np.ndarray The reconstructed data.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruct--examples","text":"autoencoder = Autoencoder(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) reconstructed_data = autoencoder.reconstruct(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 def reconstruct ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> np . ndarray : \"\"\" Reconstructs the input data using the trained autoencoder. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to reconstruct, by default None Returns ------- np.ndarray The reconstructed data. Examples -------- >>> autoencoder = Autoencoder(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruct(input_data=input_data) \"\"\" if isinstance ( input_data , np . ndarray ): input_data = torch . from_numpy ( input_data . astype ( ARRAY_DTYPE )) input_data = input_data . to ( self . device ) reconstructed_data = self . reconstruction ( input_data = input_data ) return reconstructed_data . cpu () . detach () . numpy ()","title":"Examples"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_eval","text":"Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output.","title":"reconstruction_eval()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_eval--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_eval--returns","text":"torch.Tensor The reconstructed output of the autoencoder.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_eval--examples","text":"autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 def reconstruction_eval ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder, computes the mean of the encoded data, and then applies the decoder to generate a reconstructed output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns ------- torch.Tensor The reconstructed output of the autoencoder. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_eval(input_data=input_data) \"\"\" encoder_output = self . projection ( input_data = input_data ) latent = self . z_mean ( encoder_output ) reconstructed = self . reconstruction ( input_data = latent ) return reconstructed","title":"Examples"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_forward","text":"Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output.","title":"reconstruction_forward()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_forward--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_forward--returns","text":"torch.Tensor The reconstructed output of the autoencoder.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.reconstruction_forward--examples","text":"autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 def reconstruction_forward ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None ) -> torch . Tensor : \"\"\" Applies the encoder, adds Gaussian noise to the encoded data, and then applies the decoder to generate a reconstructed output. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional The input data to pass through the autoencoder, by default None Returns ------- torch.Tensor The reconstructed output of the autoencoder. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> reconstructed_data = autoencoder.reconstruction_forward(input_data=input_data) \"\"\" latent = self . projection ( input_data = input_data ) latent_noisy = self . latent_gaussian_noisy ( input_data = latent ) reconstructed = self . reconstruction ( input_data = latent_noisy ) return reconstructed","title":"Examples"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.summary","text":"Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary.","title":"summary()"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.summary--parameters","text":"input_data : Union[np.ndarray, torch.Tensor], optional Input data to pass through the encoder, by default None input_shape : list, optional The shape of the input data if input_data is None, by default None","title":"Parameters"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.summary--returns","text":"torch.Tensor The output of the autoencoder's decoder applied to the input data.","title":"Returns"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.summary--raises","text":"Exception If self.input_dim is not a tuple or an integer. AssertionError If input_shape is None when input_data is None.","title":"Raises"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.summary--notes","text":"The summary method calls the summary method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary.","title":"Notes"},{"location":"simulai_models/#simulai.models.AutoencoderVariational.summary--examples","text":"autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) input_data = np.random.rand(1, 28, 28, 1) output_data = autoencoder.summary(input_data=input_data) simulai/models/_pytorch_models/_autoencoder.py 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 def summary ( self , input_data : Union [ np . ndarray , torch . Tensor ] = None , input_shape : list = None , verbose : bool = True , display : bool = True , ) -> torch . Tensor : \"\"\" Summarizes the overall architecture of the autoencoder and saves the content of the subnetworks to a dictionary. Parameters ---------- input_data : Union[np.ndarray, torch.Tensor], optional Input data to pass through the encoder, by default None input_shape : list, optional The shape of the input data if input_data is None, by default None Returns ------- torch.Tensor The output of the autoencoder's decoder applied to the input data. Raises ------ Exception If self.input_dim is not a tuple or an integer. AssertionError If input_shape is None when input_data is None. Notes ----- The summary method calls the `summary` method of each of the subnetworks and saves the content of the subnetworks to the overall architecture dictionary. If there is a bottleneck network, it is also summarized and saved to the architecture dictionary. Examples -------- >>> autoencoder = AutoencoderVariational(input_dim=(28, 28, 1)) >>> input_data = np.random.rand(1, 28, 28, 1) >>> output_data = autoencoder.summary(input_data=input_data) \"\"\" if verbose == True : if self . input_dim != None : if type ( self . input_dim ) == tuple : input_shape = list ( self . input_dim ) elif type ( self . input_dim ) == int : input_shape = [ None , self . input_dim ] else : raise Exception ( f \"input_dim is expected to be tuple or int, but received { type ( self . input_dim ) } \" ) else : pass self . encoder . summary ( input_data = input_data , input_shape = input_shape , device = self . device , display = display ) if type ( self . encoder . output_size ) == tuple : self . before_flatten_dimension = tuple ( self . encoder . output_size [ 1 :]) input_shape = self . encoder . input_size elif type ( self . encoder . output_size ) == int : input_shape = [ None , self . encoder . input_size ] else : pass if isinstance ( input_data , np . ndarray ): btnk_input = self . encoder . forward ( input_data = input_data ) else : assert ( input_shape ), \"It is necessary to have input_shape when input_data is None.\" input_shape [ 0 ] = 1 input_data = self . to_wrap ( entity = torch . ones ( input_shape ), device = self . device ) btnk_input = self . encoder . forward ( input_data = input_data ) before_flatten_dimension = tuple ( btnk_input . shape [ 1 :]) btnk_input = btnk_input . reshape (( - 1 , np . prod ( btnk_input . shape [ 1 :]))) # Bottleneck networks is are optional if self . there_is_bottleneck : latent = self . bottleneck_encoder . forward ( input_data = btnk_input ) self . bottleneck_encoder . summary ( display = display ) self . bottleneck_decoder . summary ( display = display ) bottleneck_output = self . encoder_activation ( self . bottleneck_decoder . forward ( input_data = latent ) ) bottleneck_output = bottleneck_output . reshape ( ( - 1 , * before_flatten_dimension ) ) else : bottleneck_output = btnk_input self . decoder . summary ( input_data = bottleneck_output , device = self . device , display = display ) # Saving the content of the subnetworks to the overall architecture dictionary self . shapes_dict . update ({ \"encoder\" : self . encoder . shapes_dict }) # Bottleneck networks is are optional if self . there_is_bottleneck : self . shapes_dict . update ( { \"bottleneck_encoder\" : self . bottleneck_encoder . shapes_dict } ) self . shapes_dict . update ( { \"bottleneck_decoder\" : self . bottleneck_decoder . shapes_dict } ) self . shapes_dict . update ({ \"decoder\" : self . decoder . shapes_dict }) else : print ( self )","title":"Examples"}]}